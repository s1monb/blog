exports.id = 520;
exports.ids = [520];
exports.modules = {

/***/ 3014:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++){
        arr2[i] = arr[i];
    }
    return arr2;
}
function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
var assign = __webpack_require__(1944);
var _require = __webpack_require__(8178), map = _require.map, filter = _require.filter;
var queryString = __webpack_require__(5424);
var validators = __webpack_require__(7118);
function AssetsClient(client) {
    this.client = client;
}
function optionsFromFile(opts, file) {
    if (true) {
        return opts;
    }
    return assign({
        filename: opts.preserveFilename === false ? undefined : file.name,
        contentType: file.type
    }, opts);
}
assign(AssetsClient.prototype, {
    /**
   * Upload an asset
   *
   * @param  {String} assetType `image` or `file`
   * @param  {File|Blob|Buffer|ReadableStream} body File to upload
   * @param  {Object}  opts Options for the upload
   * @param  {Boolean} opts.preserveFilename Whether or not to preserve the original filename (default: true)
   * @param  {String}  opts.filename Filename for this file (optional)
   * @param  {Number}  opts.timeout  Milliseconds to wait before timing the request out (default: 0)
   * @param  {String}  opts.contentType Mime type of the file
   * @param  {Array}   opts.extract Array of metadata parts to extract from image.
   *                                 Possible values: `location`, `exif`, `image`, `palette`
   * @param  {String}  opts.label Label
   * @param  {String}  opts.title Title
   * @param  {String}  opts.description Description
   * @param  {String}  opts.creditLine The credit to person(s) and/or organization(s) required by the supplier of the image to be used when published
   * @param  {Object}  opts.source Source data (when the asset is from an external service)
   * @param  {String}  opts.source.id The (u)id of the asset within the source, i.e. 'i-f323r1E'
   *                                  Required if source is defined
   * @param  {String}  opts.source.name The name of the source, i.e. 'unsplash'
   *                                  Required if source is defined
   * @param  {String}  opts.source.url A url to where to find the asset, or get more info about it in the source
   *                                  Optional
   * @return {Promise} Resolves with the created asset document
   */ upload: function upload(assetType, body) {
        var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        validators.validateAssetType(assetType); // If an empty array is given, explicitly set `none` to override API defaults
        var meta = opts.extract || undefined;
        if (meta && !meta.length) {
            meta = [
                "none"
            ];
        }
        var dataset = validators.hasDataset(this.client.clientConfig);
        var assetEndpoint = assetType === "image" ? "images" : "files";
        var options = optionsFromFile(opts, body);
        var tag = options.tag, label = options.label, title = options.title, description = options.description, creditLine = options.creditLine, filename = options.filename, source = options.source;
        var query = {
            label: label,
            title: title,
            description: description,
            filename: filename,
            meta: meta,
            creditLine: creditLine
        };
        if (source) {
            query.sourceId = source.id;
            query.sourceName = source.name;
            query.sourceUrl = source.url;
        }
        var observable = this.client._requestObservable({
            tag: tag,
            method: "POST",
            timeout: options.timeout || 0,
            uri: "/assets/".concat(assetEndpoint, "/").concat(dataset),
            headers: options.contentType ? {
                "Content-Type": options.contentType
            } : {},
            query: query,
            body: body
        });
        return this.client.isPromiseAPI() ? observable.pipe(filter(function(event) {
            return event.type === "response";
        }), map(function(event) {
            return event.body.document;
        })).toPromise() : observable;
    },
    delete: function _delete(type, id) {
        // eslint-disable-next-line no-console
        console.warn("client.assets.delete() is deprecated, please use client.delete(<document-id>)");
        var docId = id || "";
        if (!/^(image|file)-/.test(docId)) {
            docId = "".concat(type, "-").concat(docId);
        } else if (type._id) {
            // We could be passing an entire asset document instead of an ID
            docId = type._id;
        }
        validators.hasDataset(this.client.clientConfig);
        return this.client.delete(docId);
    },
    getImageUrl: function getImageUrl(ref, query) {
        var id = ref._ref || ref;
        if (typeof id !== "string") {
            throw new Error("getImageUrl() needs either an object with a _ref, or a string with an asset document ID");
        }
        if (!/^image-[A-Za-z0-9_]+-\d+x\d+-[a-z]{1,5}$/.test(id)) {
            throw new Error('Unsupported asset ID "'.concat(id, '". URL generation only works for auto-generated IDs.'));
        }
        var _id$split = id.split("-"), _id$split2 = _slicedToArray(_id$split, 4), assetId = _id$split2[1], size = _id$split2[2], format = _id$split2[3];
        validators.hasDataset(this.client.clientConfig);
        var _this$client$clientCo = this.client.clientConfig, projectId = _this$client$clientCo.projectId, dataset = _this$client$clientCo.dataset;
        var qs = query ? queryString(query) : "";
        return "https://cdn.sanity.io/images/".concat(projectId, "/").concat(dataset, "/").concat(assetId, "-").concat(size, ".").concat(format).concat(qs);
    }
});
module.exports = AssetsClient;


/***/ }),

/***/ 2850:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var assign = __webpack_require__(1944);
function AuthClient(client) {
    this.client = client;
}
assign(AuthClient.prototype, {
    getLoginProviders: function getLoginProviders() {
        return this.client.request({
            uri: "/auth/providers"
        });
    },
    logout: function logout() {
        return this.client.request({
            uri: "/auth/logout",
            method: "POST"
        });
    }
});
module.exports = AuthClient;


/***/ }),

/***/ 94:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var assign = __webpack_require__(1944);
var generateHelpUrl = __webpack_require__(7781);
var validate = __webpack_require__(7118);
var warnings = __webpack_require__(220);
var defaultCdnHost = "apicdn.sanity.io";
var defaultConfig = {
    apiHost: "https://api.sanity.io",
    apiVersion: "1",
    useProjectHostname: true,
    isPromiseAPI: true
};
var LOCALHOSTS = [
    "localhost",
    "127.0.0.1",
    "0.0.0.0"
];
var isLocal = function isLocal(host) {
    return LOCALHOSTS.indexOf(host) !== -1;
};
exports.defaultConfig = defaultConfig; // eslint-disable-next-line complexity
exports.initConfig = function(config, prevConfig) {
    var specifiedConfig = assign({}, prevConfig, config);
    if (!specifiedConfig.apiVersion) {
        warnings.printNoApiVersionSpecifiedWarning();
    }
    var newConfig = assign({}, defaultConfig, specifiedConfig);
    var projectBased = newConfig.useProjectHostname;
    if (typeof Promise === "undefined") {
        var helpUrl = generateHelpUrl("js-client-promise-polyfill");
        throw new Error("No native Promise-implementation found, polyfill needed - see ".concat(helpUrl));
    }
    if (projectBased && !newConfig.projectId) {
        throw new Error("Configuration must contain `projectId`");
    }
    var isBrowser =  false && 0;
    var isLocalhost = isBrowser && isLocal(window.location.hostname);
    if (isBrowser && isLocalhost && newConfig.token && newConfig.ignoreBrowserTokenWarning !== true) {
        warnings.printBrowserTokenWarning();
    } else if (typeof newConfig.useCdn === "undefined") {
        warnings.printCdnWarning();
    }
    if (projectBased) {
        validate.projectId(newConfig.projectId);
    }
    if (newConfig.dataset) {
        validate.dataset(newConfig.dataset);
    }
    if ("requestTagPrefix" in newConfig) {
        // Allow setting and unsetting request tag prefix
        newConfig.requestTagPrefix = newConfig.requestTagPrefix ? validate.requestTag(newConfig.requestTagPrefix).replace(/\.+$/, "") : undefined;
    }
    newConfig.apiVersion = "".concat(newConfig.apiVersion).replace(/^v/, "");
    newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost;
    newConfig.useCdn = Boolean(newConfig.useCdn) && !newConfig.withCredentials;
    exports.validateApiVersion(newConfig.apiVersion);
    var hostParts = newConfig.apiHost.split("://", 2);
    var protocol = hostParts[0];
    var host = hostParts[1];
    var cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host;
    if (newConfig.useProjectHostname) {
        newConfig.url = "".concat(protocol, "://").concat(newConfig.projectId, ".").concat(host, "/v").concat(newConfig.apiVersion);
        newConfig.cdnUrl = "".concat(protocol, "://").concat(newConfig.projectId, ".").concat(cdnHost, "/v").concat(newConfig.apiVersion);
    } else {
        newConfig.url = "".concat(newConfig.apiHost, "/v").concat(newConfig.apiVersion);
        newConfig.cdnUrl = newConfig.url;
    }
    return newConfig;
};
exports.validateApiVersion = function validateApiVersion(apiVersion) {
    if (apiVersion === "1" || apiVersion === "X") {
        return;
    }
    var apiDate = new Date(apiVersion);
    var apiVersionValid = /^\d{4}-\d{2}-\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0;
    if (!apiVersionValid) {
        throw new Error("Invalid API version string, expected `1` or date in format `YYYY-MM-DD`");
    }
};


/***/ }),

/***/ 2309:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var assign = __webpack_require__(1944);
var _require = __webpack_require__(8178), map = _require.map, filter = _require.filter;
var validators = __webpack_require__(7118);
var getSelection = __webpack_require__(9025);
var encodeQueryString = __webpack_require__(6625);
var Transaction = __webpack_require__(7325);
var Patch = __webpack_require__(3837);
var listen = __webpack_require__(5920);
var excludeFalsey = function excludeFalsey(param, defValue) {
    var value = typeof param === "undefined" ? defValue : param;
    return param === false ? undefined : value;
};
var getMutationQuery = function getMutationQuery() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return {
        dryRun: options.dryRun,
        returnIds: true,
        returnDocuments: excludeFalsey(options.returnDocuments, true),
        visibility: options.visibility || "sync",
        autoGenerateArrayKeys: options.autoGenerateArrayKeys,
        skipCrossDatasetReferenceValidation: options.skipCrossDatasetReferenceValidation
    };
};
var isResponse = function isResponse(event) {
    return event.type === "response";
};
var getBody = function getBody(event) {
    return event.body;
};
var indexBy = function indexBy(docs, attr) {
    return docs.reduce(function(indexed, doc) {
        indexed[attr(doc)] = doc;
        return indexed;
    }, Object.create(null));
};
var toPromise = function toPromise(observable) {
    return observable.toPromise();
};
var getQuerySizeLimit = 11264;
module.exports = {
    listen: listen,
    getDataUrl: function getDataUrl(operation, path) {
        var config = this.clientConfig;
        var catalog = validators.hasDataset(config);
        var baseUri = "/".concat(operation, "/").concat(catalog);
        var uri = path ? "".concat(baseUri, "/").concat(path) : baseUri;
        return "/data".concat(uri).replace(/\/($|\?)/, "$1");
    },
    fetch: function fetch(query, params) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var mapResponse = options.filterResponse === false ? function(res) {
            return res;
        } : function(res) {
            return res.result;
        };
        var observable = this._dataRequest("query", {
            query: query,
            params: params
        }, options).pipe(map(mapResponse));
        return this.isPromiseAPI() ? toPromise(observable) : observable;
    },
    getDocument: function getDocument(id) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var options = {
            uri: this.getDataUrl("doc", id),
            json: true,
            tag: opts.tag
        };
        var observable = this._requestObservable(options).pipe(filter(isResponse), map(function(event) {
            return event.body.documents && event.body.documents[0];
        }));
        return this.isPromiseAPI() ? toPromise(observable) : observable;
    },
    getDocuments: function getDocuments(ids) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var options = {
            uri: this.getDataUrl("doc", ids.join(",")),
            json: true,
            tag: opts.tag
        };
        var observable = this._requestObservable(options).pipe(filter(isResponse), map(function(event) {
            var indexed = indexBy(event.body.documents || [], function(doc) {
                return doc._id;
            });
            return ids.map(function(id) {
                return indexed[id] || null;
            });
        }));
        return this.isPromiseAPI() ? toPromise(observable) : observable;
    },
    create: function create(doc, options) {
        return this._create(doc, "create", options);
    },
    createIfNotExists: function createIfNotExists(doc, options) {
        validators.requireDocumentId("createIfNotExists", doc);
        return this._create(doc, "createIfNotExists", options);
    },
    createOrReplace: function createOrReplace(doc, options) {
        validators.requireDocumentId("createOrReplace", doc);
        return this._create(doc, "createOrReplace", options);
    },
    patch: function patch(selector, operations) {
        return new Patch(selector, operations, this);
    },
    delete: function _delete(selection, options) {
        return this.dataRequest("mutate", {
            mutations: [
                {
                    delete: getSelection(selection)
                }
            ]
        }, options);
    },
    mutate: function mutate(mutations, options) {
        var mut = mutations instanceof Patch || mutations instanceof Transaction ? mutations.serialize() : mutations;
        var muts = Array.isArray(mut) ? mut : [
            mut
        ];
        var transactionId = options && options.transactionId;
        return this.dataRequest("mutate", {
            mutations: muts,
            transactionId: transactionId
        }, options);
    },
    transaction: function transaction(operations) {
        return new Transaction(operations, this);
    },
    dataRequest: function dataRequest(endpoint, body) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var request = this._dataRequest(endpoint, body, options);
        return this.isPromiseAPI() ? toPromise(request) : request;
    },
    _dataRequest: function _dataRequest(endpoint, body) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var isMutation = endpoint === "mutate";
        var isQuery = endpoint === "query"; // Check if the query string is within a configured threshold,
        // in which case we can use GET. Otherwise, use POST.
        var strQuery = !isMutation && encodeQueryString(body);
        var useGet = !isMutation && strQuery.length < getQuerySizeLimit;
        var stringQuery = useGet ? strQuery : "";
        var returnFirst = options.returnFirst;
        var timeout = options.timeout, token = options.token, tag = options.tag, headers = options.headers;
        var uri = this.getDataUrl(endpoint, stringQuery);
        var reqOptions = {
            method: useGet ? "GET" : "POST",
            uri: uri,
            json: true,
            body: useGet ? undefined : body,
            query: isMutation && getMutationQuery(options),
            timeout: timeout,
            headers: headers,
            token: token,
            tag: tag,
            canUseCdn: isQuery
        };
        return this._requestObservable(reqOptions).pipe(filter(isResponse), map(getBody), map(function(res) {
            if (!isMutation) {
                return res;
            } // Should we return documents?
            var results = res.results || [];
            if (options.returnDocuments) {
                return returnFirst ? results[0] && results[0].document : results.map(function(mut) {
                    return mut.document;
                });
            } // Return a reduced subset
            var key = returnFirst ? "documentId" : "documentIds";
            var ids = returnFirst ? results[0] && results[0].id : results.map(function(mut) {
                return mut.id;
            });
            return _defineProperty({
                transactionId: res.transactionId,
                results: results
            }, key, ids);
        }));
    },
    _create: function _create(doc, op) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var mutation = _defineProperty({}, op, doc);
        var opts = assign({
            returnFirst: true,
            returnDocuments: true
        }, options);
        return this.dataRequest("mutate", {
            mutations: [
                mutation
            ]
        }, opts);
    }
};


/***/ }),

/***/ 6625:
/***/ ((module) => {

"use strict";

var _excluded = [
    "tag"
];
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var enc = encodeURIComponent;
module.exports = function(_ref) {
    var query = _ref.query, _ref$params = _ref.params, params = _ref$params === void 0 ? {} : _ref$params, _ref$options = _ref.options, options = _ref$options === void 0 ? {} : _ref$options;
    // We generally want tag at the start of the query string
    var tag = options.tag, opts = _objectWithoutProperties(options, _excluded);
    var q = "query=".concat(enc(query));
    var base = tag ? "?tag=".concat(enc(tag), "&").concat(q) : "?".concat(q);
    var qString = Object.keys(params).reduce(function(qs, param) {
        return "".concat(qs, "&").concat(enc("$".concat(param)), "=").concat(enc(JSON.stringify(params[param])));
    }, base);
    return Object.keys(opts).reduce(function(qs, option) {
        // Only include the option if it is truthy
        return options[option] ? "".concat(qs, "&").concat(enc(option), "=").concat(enc(options[option])) : qs;
    }, qString);
};


/***/ }),

/***/ 5920:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var assign = __webpack_require__(1944);
var _require = __webpack_require__(8178), Observable = _require.Observable;
var polyfilledEventSource = __webpack_require__(130);
var pick = __webpack_require__(2053);
var defaults = __webpack_require__(2614);
var encodeQueryString = __webpack_require__(6625); // Limit is 16K for a _request_, eg including headers. Have to account for an
// unknown range of headers, but an average EventSource request from Chrome seems
// to have around 700 bytes of cruft, so let us account for 1.2K to be "safe"
var MAX_URL_LENGTH = 16000 - 1200;
var EventSource = polyfilledEventSource;
var possibleOptions = [
    "includePreviousRevision",
    "includeResult",
    "visibility",
    "effectFormat",
    "tag"
];
var defaultOptions = {
    includeResult: true
};
module.exports = function listen(query, params) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _this$clientConfig = this.clientConfig, url = _this$clientConfig.url, token = _this$clientConfig.token, withCredentials = _this$clientConfig.withCredentials, requestTagPrefix = _this$clientConfig.requestTagPrefix;
    var tag = opts.tag && requestTagPrefix ? [
        requestTagPrefix,
        opts.tag
    ].join(".") : opts.tag;
    var options = _objectSpread(_objectSpread({}, defaults(opts, defaultOptions)), {}, {
        tag: tag
    });
    var listenOpts = pick(options, possibleOptions);
    var qs = encodeQueryString({
        query: query,
        params: params,
        options: listenOpts,
        tag: tag
    });
    var uri = "".concat(url).concat(this.getDataUrl("listen", qs));
    if (uri.length > MAX_URL_LENGTH) {
        return new Observable(function(observer) {
            return observer.error(new Error("Query too large for listener"));
        });
    }
    var listenFor = options.events ? options.events : [
        "mutation"
    ];
    var shouldEmitReconnect = listenFor.indexOf("reconnect") !== -1;
    var esOptions = {};
    if (token || withCredentials) {
        esOptions.withCredentials = true;
    }
    if (token) {
        esOptions.headers = {
            Authorization: "Bearer ".concat(token)
        };
    }
    return new Observable(function(observer) {
        var es = getEventSource();
        var reconnectTimer;
        var stopped = false;
        function onError() {
            if (stopped) {
                return;
            }
            emitReconnect(); // Allow event handlers of `emitReconnect` to cancel/close the reconnect attempt
            if (stopped) {
                return;
            } // Unless we've explicitly stopped the ES (in which case `stopped` should be true),
            // we should never be in a disconnected state. By default, EventSource will reconnect
            // automatically, in which case it sets readyState to `CONNECTING`, but in some cases
            // (like when a laptop lid is closed), it closes the connection. In these cases we need
            // to explicitly reconnect.
            if (es.readyState === EventSource.CLOSED) {
                unsubscribe();
                clearTimeout(reconnectTimer);
                reconnectTimer = setTimeout(open, 100);
            }
        }
        function onChannelError(err) {
            observer.error(cooerceError(err));
        }
        function onMessage(evt) {
            var event = parseEvent(evt);
            return event instanceof Error ? observer.error(event) : observer.next(event);
        }
        function onDisconnect(evt) {
            stopped = true;
            unsubscribe();
            observer.complete();
        }
        function unsubscribe() {
            es.removeEventListener("error", onError, false);
            es.removeEventListener("channelError", onChannelError, false);
            es.removeEventListener("disconnect", onDisconnect, false);
            listenFor.forEach(function(type) {
                return es.removeEventListener(type, onMessage, false);
            });
            es.close();
        }
        function emitReconnect() {
            if (shouldEmitReconnect) {
                observer.next({
                    type: "reconnect"
                });
            }
        }
        function getEventSource() {
            var evs = new EventSource(uri, esOptions);
            evs.addEventListener("error", onError, false);
            evs.addEventListener("channelError", onChannelError, false);
            evs.addEventListener("disconnect", onDisconnect, false);
            listenFor.forEach(function(type) {
                return evs.addEventListener(type, onMessage, false);
            });
            return evs;
        }
        function open() {
            es = getEventSource();
        }
        function stop() {
            stopped = true;
            unsubscribe();
        }
        return stop;
    });
};
function parseEvent(event) {
    try {
        var data = event.data && JSON.parse(event.data) || {};
        return assign({
            type: event.type
        }, data);
    } catch (err) {
        return err;
    }
}
function cooerceError(err) {
    if (err instanceof Error) {
        return err;
    }
    var evt = parseEvent(err);
    return evt instanceof Error ? evt : new Error(extractErrorMessage(evt));
}
function extractErrorMessage(err) {
    if (!err.error) {
        return err.message || "Unknown listener error";
    }
    if (err.error.description) {
        return err.error.description;
    }
    return typeof err.error === "string" ? err.error : JSON.stringify(err.error, null, 2);
}


/***/ }),

/***/ 3837:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var assign = __webpack_require__(1944);
var getSelection = __webpack_require__(9025);
var validate = __webpack_require__(7118);
var validateObject = validate.validateObject;
var validateInsert = validate.validateInsert;
function Patch(selection) {
    var operations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var client = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    this.selection = selection;
    this.operations = assign({}, operations);
    this.client = client;
}
assign(Patch.prototype, {
    clone: function clone() {
        return new Patch(this.selection, assign({}, this.operations), this.client);
    },
    set: function set(props) {
        return this._assign("set", props);
    },
    diffMatchPatch: function diffMatchPatch(props) {
        validateObject("diffMatchPatch", props);
        return this._assign("diffMatchPatch", props);
    },
    unset: function unset(attrs) {
        if (!Array.isArray(attrs)) {
            throw new Error("unset(attrs) takes an array of attributes to unset, non-array given");
        }
        this.operations = assign({}, this.operations, {
            unset: attrs
        });
        return this;
    },
    setIfMissing: function setIfMissing(props) {
        return this._assign("setIfMissing", props);
    },
    replace: function replace(props) {
        validateObject("replace", props);
        return this._set("set", {
            $: props
        }); // eslint-disable-line id-length
    },
    inc: function inc(props) {
        return this._assign("inc", props);
    },
    dec: function dec(props) {
        return this._assign("dec", props);
    },
    insert: function insert(at, selector, items) {
        var _this$_assign;
        validateInsert(at, selector, items);
        return this._assign("insert", (_this$_assign = {}, _defineProperty(_this$_assign, at, selector), _defineProperty(_this$_assign, "items", items), _this$_assign));
    },
    append: function append(selector, items) {
        return this.insert("after", "".concat(selector, "[-1]"), items);
    },
    prepend: function prepend(selector, items) {
        return this.insert("before", "".concat(selector, "[0]"), items);
    },
    splice: function splice(selector, start, deleteCount, items) {
        // Negative indexes doesn't mean the same in Sanity as they do in JS;
        // -1 means "actually at the end of the array", which allows inserting
        // at the end of the array without knowing its length. We therefore have
        // to substract negative indexes by one to match JS. If you want Sanity-
        // behaviour, just use `insert('replace', selector, items)` directly
        var delAll = typeof deleteCount === "undefined" || deleteCount === -1;
        var startIndex = start < 0 ? start - 1 : start;
        var delCount = delAll ? -1 : Math.max(0, start + deleteCount);
        var delRange = startIndex < 0 && delCount >= 0 ? "" : delCount;
        var rangeSelector = "".concat(selector, "[").concat(startIndex, ":").concat(delRange, "]");
        return this.insert("replace", rangeSelector, items || []);
    },
    ifRevisionId: function ifRevisionId(rev) {
        this.operations.ifRevisionID = rev;
        return this;
    },
    serialize: function serialize() {
        return assign(getSelection(this.selection), this.operations);
    },
    toJSON: function toJSON() {
        return this.serialize();
    },
    commit: function commit() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (!this.client) {
            throw new Error("No `client` passed to patch, either provide one or pass the " + "patch to a clients `mutate()` method");
        }
        var returnFirst = typeof this.selection === "string";
        var opts = assign({
            returnFirst: returnFirst,
            returnDocuments: true
        }, options);
        return this.client.mutate({
            patch: this.serialize()
        }, opts);
    },
    reset: function reset() {
        this.operations = {};
        return this;
    },
    _set: function _set(op, props) {
        return this._assign(op, props, false);
    },
    _assign: function _assign(op, props) {
        var merge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        validateObject(op, props);
        this.operations = assign({}, this.operations, _defineProperty({}, op, assign({}, merge && this.operations[op] || {}, props)));
        return this;
    }
});
module.exports = Patch;


/***/ }),

/***/ 7325:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var assign = __webpack_require__(1944);
var validators = __webpack_require__(7118);
var Patch = __webpack_require__(3837);
var defaultMutateOptions = {
    returnDocuments: false
};
function Transaction() {
    var operations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var client = arguments.length > 1 ? arguments[1] : undefined;
    var transactionId = arguments.length > 2 ? arguments[2] : undefined;
    this.trxId = transactionId;
    this.operations = operations;
    this.client = client;
}
assign(Transaction.prototype, {
    clone: function clone() {
        return new Transaction(this.operations.slice(0), this.client, this.trxId);
    },
    create: function create(doc) {
        validators.validateObject("create", doc);
        return this._add({
            create: doc
        });
    },
    createIfNotExists: function createIfNotExists(doc) {
        var op = "createIfNotExists";
        validators.validateObject(op, doc);
        validators.requireDocumentId(op, doc);
        return this._add(_defineProperty({}, op, doc));
    },
    createOrReplace: function createOrReplace(doc) {
        var op = "createOrReplace";
        validators.validateObject(op, doc);
        validators.requireDocumentId(op, doc);
        return this._add(_defineProperty({}, op, doc));
    },
    delete: function _delete(documentId) {
        validators.validateDocumentId("delete", documentId);
        return this._add({
            delete: {
                id: documentId
            }
        });
    },
    patch: function patch(documentId, patchOps) {
        var isBuilder = typeof patchOps === "function";
        var isPatch = documentId instanceof Patch; // transaction.patch(client.patch('documentId').inc({visits: 1}))
        if (isPatch) {
            return this._add({
                patch: documentId.serialize()
            });
        } // patch => patch.inc({visits: 1}).set({foo: 'bar'})
        if (isBuilder) {
            var patch = patchOps(new Patch(documentId, {}, this.client));
            if (!(patch instanceof Patch)) {
                throw new Error("function passed to `patch()` must return the patch");
            }
            return this._add({
                patch: patch.serialize()
            });
        }
        return this._add({
            patch: assign({
                id: documentId
            }, patchOps)
        });
    },
    transactionId: function transactionId(id) {
        if (!id) {
            return this.trxId;
        }
        this.trxId = id;
        return this;
    },
    serialize: function serialize() {
        return this.operations.slice();
    },
    toJSON: function toJSON() {
        return this.serialize();
    },
    commit: function commit(options) {
        if (!this.client) {
            throw new Error("No `client` passed to transaction, either provide one or pass the " + "transaction to a clients `mutate()` method");
        }
        return this.client.mutate(this.serialize(), assign({
            transactionId: this.trxId
        }, defaultMutateOptions, options || {}));
    },
    reset: function reset() {
        this.operations = [];
        return this;
    },
    _add: function _add(mut) {
        this.operations.push(mut);
        return this;
    }
});
module.exports = Transaction;


/***/ }),

/***/ 9767:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var assign = __webpack_require__(1944);
var validate = __webpack_require__(7118);
function DatasetsClient(client) {
    this.request = client.request.bind(client);
}
assign(DatasetsClient.prototype, {
    create: function create(name, options) {
        return this._modify("PUT", name, options);
    },
    edit: function edit(name, options) {
        return this._modify("PATCH", name, options);
    },
    delete: function _delete(name) {
        return this._modify("DELETE", name);
    },
    list: function list() {
        return this.request({
            uri: "/datasets"
        });
    },
    _modify: function _modify(method, name, body) {
        validate.dataset(name);
        return this.request({
            method: method,
            uri: "/datasets/".concat(name),
            body: body
        });
    }
});
module.exports = DatasetsClient;


/***/ }),

/***/ 7781:
/***/ ((module) => {

"use strict";

var BASE_URL = "https://docs.sanity.io/help/";
module.exports = function generateHelpUrl(slug) {
    return BASE_URL + slug;
};


/***/ }),

/***/ 4950:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var makeError = __webpack_require__(9637);
var assign = __webpack_require__(1944);
function ClientError(res) {
    var props = extractErrorProps(res);
    ClientError.super.call(this, props.message);
    assign(this, props);
}
function ServerError(res) {
    var props = extractErrorProps(res);
    ServerError.super.call(this, props.message);
    assign(this, props);
}
function extractErrorProps(res) {
    var body = res.body;
    var props = {
        response: res,
        statusCode: res.statusCode,
        responseBody: stringifyBody(body, res)
    }; // API/Boom style errors ({statusCode, error, message})
    if (body.error && body.message) {
        props.message = "".concat(body.error, " - ").concat(body.message);
        return props;
    } // Query/database errors ({error: {description, other, arb, props}})
    if (body.error && body.error.description) {
        props.message = body.error.description;
        props.details = body.error;
        return props;
    } // Other, more arbitrary errors
    props.message = body.error || body.message || httpErrorMessage(res);
    return props;
}
function httpErrorMessage(res) {
    var statusMessage = res.statusMessage ? " ".concat(res.statusMessage) : "";
    return "".concat(res.method, "-request to ").concat(res.url, " resulted in HTTP ").concat(res.statusCode).concat(statusMessage);
}
function stringifyBody(body, res) {
    var contentType = (res.headers["content-type"] || "").toLowerCase();
    var isJson = contentType.indexOf("application/json") !== -1;
    return isJson ? JSON.stringify(body, null, 2) : body;
}
makeError(ClientError);
makeError(ServerError);
exports.ClientError = ClientError;
exports.ServerError = ServerError;


/***/ }),

/***/ 4951:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var retry = __webpack_require__(6643);
var debug = __webpack_require__(4784);
var headers = __webpack_require__(4174);
var pkg = __webpack_require__(2805);
var middleware = [
    debug({
        verbose: true,
        namespace: "sanity:client"
    }),
    headers({
        "User-Agent": "".concat(pkg.name, " ").concat(pkg.version)
    }),
    retry({
        maxRetries: 3
    })
];
module.exports = middleware;


/***/ }),

/***/ 5424:
/***/ ((module) => {

"use strict";

module.exports = function(params) {
    var qs = [];
    for(var key in params){
        if (params.hasOwnProperty(key)) {
            qs.push("".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(params[key])));
        }
    }
    return qs.length > 0 ? "?".concat(qs.join("&")) : "";
};


/***/ }),

/***/ 6769:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/* eslint-disable no-empty-function, no-process-env */ var getIt = __webpack_require__(7069);
var assign = __webpack_require__(1944);
var observable = __webpack_require__(5092);
var jsonRequest = __webpack_require__(1965);
var jsonResponse = __webpack_require__(6537);
var progress = __webpack_require__(5646);
var _require = __webpack_require__(8178), Observable = _require.Observable;
var _require2 = __webpack_require__(4950), ClientError = _require2.ClientError, ServerError = _require2.ServerError;
var httpError = {
    onResponse: function onResponse(res) {
        if (res.statusCode >= 500) {
            throw new ServerError(res);
        } else if (res.statusCode >= 400) {
            throw new ClientError(res);
        }
        return res;
    }
};
var printWarnings = {
    onResponse: function onResponse(res) {
        var warn = res.headers["x-sanity-warning"];
        var warnings = Array.isArray(warn) ? warn : [
            warn
        ];
        warnings.filter(Boolean).forEach(function(msg) {
            return console.warn(msg);
        }); // eslint-disable-line no-console
        return res;
    }
}; // Environment-specific middleware.
var envSpecific = __webpack_require__(4951);
var middleware = envSpecific.concat([
    printWarnings,
    jsonRequest(),
    jsonResponse(),
    progress(),
    httpError,
    observable({
        implementation: Observable
    })
]);
var request = getIt(middleware);
function httpRequest(options) {
    var requester = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : request;
    return requester(assign({
        maxRedirects: 0
    }, options));
}
httpRequest.defaultRequester = request;
httpRequest.ClientError = ClientError;
httpRequest.ServerError = ServerError;
module.exports = httpRequest;


/***/ }),

/***/ 1189:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var assign = __webpack_require__(1944);
var projectHeader = "X-Sanity-Project-ID";
module.exports = function(config) {
    var overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var headers = {};
    var token = overrides.token || config.token;
    if (token) {
        headers.Authorization = "Bearer ".concat(token);
    }
    if (!overrides.useGlobalApi && !config.useProjectHostname && config.projectId) {
        headers[projectHeader] = config.projectId;
    }
    var withCredentials = Boolean(typeof overrides.withCredentials === "undefined" ? config.token || config.withCredentials : overrides.withCredentials);
    var timeout = typeof overrides.timeout === "undefined" ? config.timeout : overrides.timeout;
    return assign({}, overrides, {
        headers: assign({}, headers, overrides.headers || {}),
        timeout: typeof timeout === "undefined" ? 5 * 60 * 1000 : timeout,
        proxy: overrides.proxy || config.proxy,
        json: true,
        withCredentials: withCredentials
    });
};


/***/ }),

/***/ 1969:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var assign = __webpack_require__(1944);
function ProjectsClient(client) {
    this.client = client;
}
assign(ProjectsClient.prototype, {
    list: function list() {
        return this.client.request({
            uri: "/projects"
        });
    },
    getById: function getById(id) {
        return this.client.request({
            uri: "/projects/".concat(id)
        });
    }
});
module.exports = ProjectsClient;


/***/ }),

/***/ 6772:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var assign = __webpack_require__(1944);
var _require = __webpack_require__(8178), Observable = _require.Observable, map = _require.map, filter = _require.filter;
var Patch = __webpack_require__(3837);
var Transaction = __webpack_require__(7325);
var dataMethods = __webpack_require__(2309);
var DatasetsClient = __webpack_require__(9767);
var ProjectsClient = __webpack_require__(1969);
var AssetsClient = __webpack_require__(3014);
var UsersClient = __webpack_require__(1914);
var AuthClient = __webpack_require__(2850);
var httpRequest = __webpack_require__(6769);
var getRequestOptions = __webpack_require__(1189);
var _require2 = __webpack_require__(94), defaultConfig = _require2.defaultConfig, initConfig = _require2.initConfig;
var validate = __webpack_require__(7118);
var toPromise = function toPromise(observable) {
    return observable.toPromise();
};
function SanityClient() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultConfig;
    if (!(this instanceof SanityClient)) {
        return new SanityClient(config);
    }
    this.config(config);
    this.assets = new AssetsClient(this);
    this.datasets = new DatasetsClient(this);
    this.projects = new ProjectsClient(this);
    this.users = new UsersClient(this);
    this.auth = new AuthClient(this);
    if (this.clientConfig.isPromiseAPI) {
        var observableConfig = assign({}, this.clientConfig, {
            isPromiseAPI: false
        });
        this.observable = new SanityClient(observableConfig);
    }
}
assign(SanityClient.prototype, dataMethods);
assign(SanityClient.prototype, {
    clone: function clone() {
        return new SanityClient(this.config());
    },
    config: function config(newConfig) {
        if (typeof newConfig === "undefined") {
            return assign({}, this.clientConfig);
        }
        if (this.clientConfig && this.clientConfig.allowReconfigure === false) {
            throw new Error("Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client");
        }
        if (this.observable) {
            var observableConfig = assign({}, newConfig, {
                isPromiseAPI: false
            });
            this.observable.config(observableConfig);
        }
        this.clientConfig = initConfig(newConfig, this.clientConfig || {});
        return this;
    },
    withConfig: function withConfig(newConfig) {
        return new SanityClient(_objectSpread(_objectSpread({}, this.config()), newConfig));
    },
    getUrl: function getUrl(uri) {
        var useCdn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var base = useCdn ? this.clientConfig.cdnUrl : this.clientConfig.url;
        return "".concat(base, "/").concat(uri.replace(/^\//, ""));
    },
    isPromiseAPI: function isPromiseAPI() {
        return this.clientConfig.isPromiseAPI;
    },
    _requestObservable: function _requestObservable(options) {
        var _this = this;
        var uri = options.url || options.uri; // If the `canUseCdn`-option is not set we detect it automatically based on the method + URL.
        // Only the /data endpoint is currently available through API-CDN.
        var canUseCdn = typeof options.canUseCdn === "undefined" ? [
            "GET",
            "HEAD"
        ].indexOf(options.method || "GET") >= 0 && uri.indexOf("/data/") === 0 : options.canUseCdn;
        var useCdn = this.clientConfig.useCdn && canUseCdn;
        var tag = options.tag && this.clientConfig.requestTagPrefix ? [
            this.clientConfig.requestTagPrefix,
            options.tag
        ].join(".") : options.tag || this.clientConfig.requestTagPrefix;
        if (tag) {
            options.query = _objectSpread({
                tag: validate.requestTag(tag)
            }, options.query);
        }
        var reqOptions = getRequestOptions(this.clientConfig, assign({}, options, {
            url: this.getUrl(uri, useCdn)
        }));
        return new Observable(function(subscriber) {
            return httpRequest(reqOptions, _this.clientConfig.requester).subscribe(subscriber);
        });
    },
    request: function request(options) {
        var observable = this._requestObservable(options).pipe(filter(function(event) {
            return event.type === "response";
        }), map(function(event) {
            return event.body;
        }));
        return this.isPromiseAPI() ? toPromise(observable) : observable;
    }
});
SanityClient.Patch = Patch;
SanityClient.Transaction = Transaction;
SanityClient.ClientError = httpRequest.ClientError;
SanityClient.ServerError = httpRequest.ServerError;
SanityClient.requester = httpRequest.defaultRequester;
module.exports = SanityClient;


/***/ }),

/***/ 1914:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var assign = __webpack_require__(1944);
function UsersClient(client) {
    this.client = client;
}
assign(UsersClient.prototype, {
    getById: function getById(id) {
        return this.client.request({
            uri: "/users/".concat(id)
        });
    }
});
module.exports = UsersClient;


/***/ }),

/***/ 2614:
/***/ ((module) => {

"use strict";

module.exports = function(obj, defaults) {
    return Object.keys(defaults).concat(Object.keys(obj)).reduce(function(target, prop) {
        target[prop] = typeof obj[prop] === "undefined" ? defaults[prop] : obj[prop];
        return target;
    }, {});
};


/***/ }),

/***/ 9025:
/***/ ((module) => {

"use strict";

module.exports = function getSelection(sel) {
    if (typeof sel === "string" || Array.isArray(sel)) {
        return {
            id: sel
        };
    }
    if (sel && sel.query) {
        return "params" in sel ? {
            query: sel.query,
            params: sel.params
        } : {
            query: sel.query
        };
    }
    var selectionOpts = [
        "* Document ID (<docId>)",
        "* Array of document IDs",
        "* Object containing `query`"
    ].join("\n");
    throw new Error("Unknown selection - must be one of:\n\n".concat(selectionOpts));
};


/***/ }),

/***/ 8178:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

//  Since `@sanity/client` doesn't offer ESM exports (yet) const {filter} = require('rxjs/operators') will cause the the whole of rxjs to be included in the bundle.
//  The internal import paths here is a stop-gap measure and will become less of a problem when @sanity/client export tree-shakeable esm bundles
var _require = __webpack_require__(9488), Observable = _require.Observable;
var _require2 = __webpack_require__(8982), filter = _require2.filter;
var _require3 = __webpack_require__(6646), map = _require3.map;
module.exports = {
    Observable: Observable,
    filter: filter,
    map: map
};


/***/ }),

/***/ 578:
/***/ ((module) => {

"use strict";

module.exports = function(fn) {
    var didCall = false;
    var returnValue;
    return function() {
        if (didCall) {
            return returnValue;
        }
        returnValue = fn.apply(void 0, arguments);
        didCall = true;
        return returnValue;
    };
};


/***/ }),

/***/ 2053:
/***/ ((module) => {

"use strict";

module.exports = function(obj, props) {
    return props.reduce(function(selection, prop) {
        if (typeof obj[prop] === "undefined") {
            return selection;
        }
        selection[prop] = obj[prop];
        return selection;
    }, {});
};


/***/ }),

/***/ 7118:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
}
var VALID_ASSET_TYPES = [
    "image",
    "file"
];
var VALID_INSERT_LOCATIONS = [
    "before",
    "after",
    "replace"
];
exports.dataset = function(name) {
    if (!/^(~[a-z0-9]{1}[-\w]{0,63}|[a-z0-9]{1}[-\w]{0,63})$/.test(name)) {
        throw new Error("Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters");
    }
};
exports.projectId = function(id) {
    if (!/^[-a-z0-9]+$/i.test(id)) {
        throw new Error("`projectId` can only contain only a-z, 0-9 and dashes");
    }
};
exports.validateAssetType = function(type) {
    if (VALID_ASSET_TYPES.indexOf(type) === -1) {
        throw new Error("Invalid asset type: ".concat(type, ". Must be one of ").concat(VALID_ASSET_TYPES.join(", ")));
    }
};
exports.validateObject = function(op, val) {
    if (val === null || _typeof(val) !== "object" || Array.isArray(val)) {
        throw new Error("".concat(op, "() takes an object of properties"));
    }
};
exports.requireDocumentId = function(op, doc) {
    if (!doc._id) {
        throw new Error("".concat(op, '() requires that the document contains an ID ("_id" property)'));
    }
    exports.validateDocumentId(op, doc._id);
};
exports.validateDocumentId = function(op, id) {
    if (typeof id !== "string" || !/^[a-z0-9_.-]+$/i.test(id)) {
        throw new Error("".concat(op, '(): "').concat(id, '" is not a valid document ID'));
    }
};
exports.validateInsert = function(at, selector, items) {
    var signature = "insert(at, selector, items)";
    if (VALID_INSERT_LOCATIONS.indexOf(at) === -1) {
        var valid = VALID_INSERT_LOCATIONS.map(function(loc) {
            return '"'.concat(loc, '"');
        }).join(", ");
        throw new Error("".concat(signature, ' takes an "at"-argument which is one of: ').concat(valid));
    }
    if (typeof selector !== "string") {
        throw new Error("".concat(signature, ' takes a "selector"-argument which must be a string'));
    }
    if (!Array.isArray(items)) {
        throw new Error("".concat(signature, ' takes an "items"-argument which must be an array'));
    }
};
exports.hasDataset = function(config) {
    if (!config.dataset) {
        throw new Error("`dataset` must be provided to perform queries");
    }
    return config.dataset || "";
};
exports.requestTag = function(tag) {
    if (typeof tag !== "string" || !/^[a-z0-9._-]{1,75}$/i.test(tag)) {
        throw new Error("Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.");
    }
    return tag;
};


/***/ }),

/***/ 220:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var generateHelpUrl = __webpack_require__(7781);
var once = __webpack_require__(578);
var createWarningPrinter = function createWarningPrinter(message) {
    return once(function() {
        var _console;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        return (_console = console).warn.apply(_console, [
            message.join(" ")
        ].concat(args));
    });
};
exports.printCdnWarning = createWarningPrinter([
    "You are not using the Sanity CDN. That means your data is always fresh, but the CDN is faster and",
    "cheaper. Think about it! For more info, see ".concat(generateHelpUrl("js-client-cdn-configuration"), "."),
    "To hide this warning, please set the `useCdn` option to either `true` or `false` when creating",
    "the client."
]);
exports.printBrowserTokenWarning = createWarningPrinter([
    "You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.",
    "See ".concat(generateHelpUrl("js-client-browser-token"), " for more information and how to hide this warning.")
]);
exports.printNoApiVersionSpecifiedWarning = createWarningPrinter([
    "Using the Sanity client without specifying an API version is deprecated.",
    "See ".concat(generateHelpUrl("js-client-api-version"))
]);


/***/ }),

/***/ 130:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = __webpack_require__(6860);


/***/ }),

/***/ 6860:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var parse = (__webpack_require__(7310).parse);
var events = __webpack_require__(2361);
var https = __webpack_require__(5687);
var http = __webpack_require__(3685);
var util = __webpack_require__(3849);
var httpsOptions = [
    "pfx",
    "key",
    "passphrase",
    "cert",
    "ca",
    "ciphers",
    "rejectUnauthorized",
    "secureProtocol",
    "servername",
    "checkServerIdentity"
];
var bom = [
    239,
    187,
    191
];
var colon = 58;
var space = 32;
var lineFeed = 10;
var carriageReturn = 13;
// Beyond 256KB we could not observe any gain in performance
var maxBufferAheadAllocation = 1024 * 256;
// Headers matching the pattern should be removed when redirecting to different origin
var reUnsafeHeader = /^(cookie|authorization)$/i;
function hasBom(buf) {
    return bom.every(function(charCode, index) {
        return buf[index] === charCode;
    });
}
/**
 * Creates a new EventSource object
 *
 * @param {String} url the URL to which to connect
 * @param {Object} [eventSourceInitDict] extra init params. See README for details.
 * @api public
 **/ function EventSource(url, eventSourceInitDict) {
    var readyState = EventSource.CONNECTING;
    var headers = eventSourceInitDict && eventSourceInitDict.headers;
    var hasNewOrigin = false;
    Object.defineProperty(this, "readyState", {
        get: function() {
            return readyState;
        }
    });
    Object.defineProperty(this, "url", {
        get: function() {
            return url;
        }
    });
    var self = this;
    self.reconnectInterval = 1000;
    self.connectionInProgress = false;
    function onConnectionClosed(message) {
        if (readyState === EventSource.CLOSED) return;
        readyState = EventSource.CONNECTING;
        _emit("error", new Event("error", {
            message: message
        }));
        // The url may have been changed by a temporary redirect. If that's the case,
        // revert it now, and flag that we are no longer pointing to a new origin
        if (reconnectUrl) {
            url = reconnectUrl;
            reconnectUrl = null;
            hasNewOrigin = false;
        }
        setTimeout(function() {
            if (readyState !== EventSource.CONNECTING || self.connectionInProgress) {
                return;
            }
            self.connectionInProgress = true;
            connect();
        }, self.reconnectInterval);
    }
    var req;
    var lastEventId = "";
    if (headers && headers["Last-Event-ID"]) {
        lastEventId = headers["Last-Event-ID"];
        delete headers["Last-Event-ID"];
    }
    var discardTrailingNewline = false;
    var data = "";
    var eventName = "";
    var reconnectUrl = null;
    function connect() {
        var options = parse(url);
        var isSecure = options.protocol === "https:";
        options.headers = {
            "Cache-Control": "no-cache",
            "Accept": "text/event-stream"
        };
        if (lastEventId) options.headers["Last-Event-ID"] = lastEventId;
        if (headers) {
            var reqHeaders = hasNewOrigin ? removeUnsafeHeaders(headers) : headers;
            for(var i in reqHeaders){
                var header = reqHeaders[i];
                if (header) {
                    options.headers[i] = header;
                }
            }
        }
        // Legacy: this should be specified as `eventSourceInitDict.https.rejectUnauthorized`,
        // but for now exists as a backwards-compatibility layer
        options.rejectUnauthorized = !(eventSourceInitDict && !eventSourceInitDict.rejectUnauthorized);
        if (eventSourceInitDict && eventSourceInitDict.createConnection !== undefined) {
            options.createConnection = eventSourceInitDict.createConnection;
        }
        // If specify http proxy, make the request to sent to the proxy server,
        // and include the original url in path and Host headers
        var useProxy = eventSourceInitDict && eventSourceInitDict.proxy;
        if (useProxy) {
            var proxy = parse(eventSourceInitDict.proxy);
            isSecure = proxy.protocol === "https:";
            options.protocol = isSecure ? "https:" : "http:";
            options.path = url;
            options.headers.Host = options.host;
            options.hostname = proxy.hostname;
            options.host = proxy.host;
            options.port = proxy.port;
        }
        // If https options are specified, merge them into the request options
        if (eventSourceInitDict && eventSourceInitDict.https) {
            for(var optName in eventSourceInitDict.https){
                if (httpsOptions.indexOf(optName) === -1) {
                    continue;
                }
                var option = eventSourceInitDict.https[optName];
                if (option !== undefined) {
                    options[optName] = option;
                }
            }
        }
        // Pass this on to the XHR
        if (eventSourceInitDict && eventSourceInitDict.withCredentials !== undefined) {
            options.withCredentials = eventSourceInitDict.withCredentials;
        }
        req = (isSecure ? https : http).request(options, function(res) {
            self.connectionInProgress = false;
            // Handle HTTP errors
            if (res.statusCode === 500 || res.statusCode === 502 || res.statusCode === 503 || res.statusCode === 504) {
                _emit("error", new Event("error", {
                    status: res.statusCode,
                    message: res.statusMessage
                }));
                onConnectionClosed();
                return;
            }
            // Handle HTTP redirects
            if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {
                var location = res.headers.location;
                if (!location) {
                    // Server sent redirect response without Location header.
                    _emit("error", new Event("error", {
                        status: res.statusCode,
                        message: res.statusMessage
                    }));
                    return;
                }
                var prevOrigin = new URL(url).origin;
                var nextOrigin = new URL(location).origin;
                hasNewOrigin = prevOrigin !== nextOrigin;
                if (res.statusCode === 307) reconnectUrl = url;
                url = location;
                process.nextTick(connect);
                return;
            }
            if (res.statusCode !== 200) {
                _emit("error", new Event("error", {
                    status: res.statusCode,
                    message: res.statusMessage
                }));
                return self.close();
            }
            readyState = EventSource.OPEN;
            res.on("close", function() {
                res.removeAllListeners("close");
                res.removeAllListeners("end");
                onConnectionClosed();
            });
            res.on("end", function() {
                res.removeAllListeners("close");
                res.removeAllListeners("end");
                onConnectionClosed();
            });
            _emit("open", new Event("open"));
            // text/event-stream parser adapted from webkit's
            // Source/WebCore/page/EventSource.cpp
            var buf;
            var newBuffer;
            var startingPos = 0;
            var startingFieldLength = -1;
            var newBufferSize = 0;
            var bytesUsed = 0;
            res.on("data", function(chunk) {
                if (!buf) {
                    buf = chunk;
                    if (hasBom(buf)) {
                        buf = buf.slice(bom.length);
                    }
                    bytesUsed = buf.length;
                } else {
                    if (chunk.length > buf.length - bytesUsed) {
                        newBufferSize = buf.length * 2 + chunk.length;
                        if (newBufferSize > maxBufferAheadAllocation) {
                            newBufferSize = buf.length + chunk.length + maxBufferAheadAllocation;
                        }
                        newBuffer = Buffer.alloc(newBufferSize);
                        buf.copy(newBuffer, 0, 0, bytesUsed);
                        buf = newBuffer;
                    }
                    chunk.copy(buf, bytesUsed);
                    bytesUsed += chunk.length;
                }
                var pos = 0;
                var length = bytesUsed;
                while(pos < length){
                    if (discardTrailingNewline) {
                        if (buf[pos] === lineFeed) {
                            ++pos;
                        }
                        discardTrailingNewline = false;
                    }
                    var lineLength = -1;
                    var fieldLength = startingFieldLength;
                    var c;
                    for(var i = startingPos; lineLength < 0 && i < length; ++i){
                        c = buf[i];
                        if (c === colon) {
                            if (fieldLength < 0) {
                                fieldLength = i - pos;
                            }
                        } else if (c === carriageReturn) {
                            discardTrailingNewline = true;
                            lineLength = i - pos;
                        } else if (c === lineFeed) {
                            lineLength = i - pos;
                        }
                    }
                    if (lineLength < 0) {
                        startingPos = length - pos;
                        startingFieldLength = fieldLength;
                        break;
                    } else {
                        startingPos = 0;
                        startingFieldLength = -1;
                    }
                    parseEventStreamLine(buf, pos, fieldLength, lineLength);
                    pos += lineLength + 1;
                }
                if (pos === length) {
                    buf = void 0;
                    bytesUsed = 0;
                } else if (pos > 0) {
                    buf = buf.slice(pos, bytesUsed);
                    bytesUsed = buf.length;
                }
            });
        });
        req.on("error", function(err) {
            self.connectionInProgress = false;
            onConnectionClosed(err.message);
        });
        if (req.setNoDelay) req.setNoDelay(true);
        req.end();
    }
    connect();
    function _emit() {
        if (self.listeners(arguments[0]).length > 0) {
            self.emit.apply(self, arguments);
        }
    }
    this._close = function() {
        if (readyState === EventSource.CLOSED) return;
        readyState = EventSource.CLOSED;
        if (req.abort) req.abort();
        if (req.xhr && req.xhr.abort) req.xhr.abort();
    };
    function parseEventStreamLine(buf, pos, fieldLength, lineLength) {
        if (lineLength === 0) {
            if (data.length > 0) {
                var type = eventName || "message";
                _emit(type, new MessageEvent(type, {
                    data: data.slice(0, -1),
                    lastEventId: lastEventId,
                    origin: new URL(url).origin
                }));
                data = "";
            }
            eventName = void 0;
        } else if (fieldLength > 0) {
            var noValue = fieldLength < 0;
            var step = 0;
            var field = buf.slice(pos, pos + (noValue ? lineLength : fieldLength)).toString();
            if (noValue) {
                step = lineLength;
            } else if (buf[pos + fieldLength + 1] !== space) {
                step = fieldLength + 1;
            } else {
                step = fieldLength + 2;
            }
            pos += step;
            var valueLength = lineLength - step;
            var value = buf.slice(pos, pos + valueLength).toString();
            if (field === "data") {
                data += value + "\n";
            } else if (field === "event") {
                eventName = value;
            } else if (field === "id") {
                lastEventId = value;
            } else if (field === "retry") {
                var retry = parseInt(value, 10);
                if (!Number.isNaN(retry)) {
                    self.reconnectInterval = retry;
                }
            }
        }
    }
}
module.exports = EventSource;
util.inherits(EventSource, events.EventEmitter);
EventSource.prototype.constructor = EventSource; // make stacktraces readable
[
    "open",
    "error",
    "message"
].forEach(function(method) {
    Object.defineProperty(EventSource.prototype, "on" + method, {
        /**
     * Returns the current listener
     *
     * @return {Mixed} the set function or undefined
     * @api private
     */ get: function get() {
            var listener = this.listeners(method)[0];
            return listener ? listener._listener ? listener._listener : listener : undefined;
        },
        /**
     * Start listening for events
     *
     * @param {Function} listener the listener
     * @return {Mixed} the set function or undefined
     * @api private
     */ set: function set(listener) {
            this.removeAllListeners(method);
            this.addEventListener(method, listener);
        }
    });
});
/**
 * Ready states
 */ Object.defineProperty(EventSource, "CONNECTING", {
    enumerable: true,
    value: 0
});
Object.defineProperty(EventSource, "OPEN", {
    enumerable: true,
    value: 1
});
Object.defineProperty(EventSource, "CLOSED", {
    enumerable: true,
    value: 2
});
EventSource.prototype.CONNECTING = 0;
EventSource.prototype.OPEN = 1;
EventSource.prototype.CLOSED = 2;
/**
 * Closes the connection, if one is made, and sets the readyState attribute to 2 (closed)
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventSource/close
 * @api public
 */ EventSource.prototype.close = function() {
    this._close();
};
/**
 * Emulates the W3C Browser based WebSocket interface using addEventListener.
 *
 * @param {String} type A string representing the event type to listen out for
 * @param {Function} listener callback
 * @see https://developer.mozilla.org/en/DOM/element.addEventListener
 * @see http://dev.w3.org/html5/websockets/#the-websocket-interface
 * @api public
 */ EventSource.prototype.addEventListener = function addEventListener(type, listener) {
    if (typeof listener === "function") {
        // store a reference so we can return the original function again
        listener._listener = listener;
        this.on(type, listener);
    }
};
/**
 * Emulates the W3C Browser based WebSocket interface using dispatchEvent.
 *
 * @param {Event} event An event to be dispatched
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent
 * @api public
 */ EventSource.prototype.dispatchEvent = function dispatchEvent(event) {
    if (!event.type) {
        throw new Error("UNSPECIFIED_EVENT_TYPE_ERR");
    }
    // if event is instance of an CustomEvent (or has 'details' property),
    // send the detail object as the payload for the event
    this.emit(event.type, event.detail);
};
/**
 * Emulates the W3C Browser based WebSocket interface using removeEventListener.
 *
 * @param {String} type A string representing the event type to remove
 * @param {Function} listener callback
 * @see https://developer.mozilla.org/en/DOM/element.removeEventListener
 * @see http://dev.w3.org/html5/websockets/#the-websocket-interface
 * @api public
 */ EventSource.prototype.removeEventListener = function removeEventListener(type, listener) {
    if (typeof listener === "function") {
        listener._listener = undefined;
        this.removeListener(type, listener);
    }
};
/**
 * W3C Event
 *
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#interface-Event
 * @api private
 */ function Event(type, optionalProperties) {
    Object.defineProperty(this, "type", {
        writable: false,
        value: type,
        enumerable: true
    });
    if (optionalProperties) {
        for(var f in optionalProperties){
            if (optionalProperties.hasOwnProperty(f)) {
                Object.defineProperty(this, f, {
                    writable: false,
                    value: optionalProperties[f],
                    enumerable: true
                });
            }
        }
    }
}
/**
 * W3C MessageEvent
 *
 * @see http://www.w3.org/TR/webmessaging/#event-definitions
 * @api private
 */ function MessageEvent(type, eventInitDict) {
    Object.defineProperty(this, "type", {
        writable: false,
        value: type,
        enumerable: true
    });
    for(var f in eventInitDict){
        if (eventInitDict.hasOwnProperty(f)) {
            Object.defineProperty(this, f, {
                writable: false,
                value: eventInitDict[f],
                enumerable: true
            });
        }
    }
}
/**
 * Returns a new object of headers that does not include any authorization and cookie headers
 *
 * @param {Object} headers An object of headers ({[headerName]: headerValue})
 * @return {Object} a new object of headers
 * @api private
 */ function removeUnsafeHeaders(headers) {
    var safe = {};
    for(var key in headers){
        if (reUnsafeHeader.test(key)) {
            continue;
        }
        safe[key] = headers[key];
    }
    return safe;
}


/***/ }),

/***/ 8354:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var EventSourcePolyfill = __webpack_require__(7995);
var groq = __webpack_require__(8061);
var deepEqual = __webpack_require__(9295);
var throttleDebounce = __webpack_require__(9179);
var groqJs = __webpack_require__(7649);
var mendoza = __webpack_require__(3806);
var split = __webpack_require__(1381);
var get = __webpack_require__(6166);
function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : {
        "default": e
    };
}
var EventSourcePolyfill__default = /*#__PURE__*/ _interopDefaultLegacy(EventSourcePolyfill);
var groq__default = /*#__PURE__*/ _interopDefaultLegacy(groq);
var deepEqual__default = /*#__PURE__*/ _interopDefaultLegacy(deepEqual);
var split__default = /*#__PURE__*/ _interopDefaultLegacy(split);
var get__default = /*#__PURE__*/ _interopDefaultLegacy(get);
function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
const isNativeBrowserEventSource = (eventSource)=> false && 0;
const addEventSourceListener = (eventSource, type, listener)=>{
    if (isNativeBrowserEventSource(eventSource)) {
        eventSource.addEventListener(type, listener, false);
    } // Polyfilled event source does not accept option parameter
    eventSource.addEventListener(type, listener);
};
function listen(EventSourceImpl, config, handlers) {
    const { projectId , dataset , token  } = config;
    const headers = token ? {
        Authorization: `Bearer ${token}`
    } : undefined;
    const url = `https://${projectId}.api.sanity.io/v1/data/listen/${dataset}?query=*&effectFormat=mendoza`;
    const es = new EventSourceImpl(url, {
        withCredentials: true,
        headers
    });
    addEventSourceListener(es, "welcome", handlers.open);
    addEventSourceListener(es, "mutation", getMutationParser(handlers.next));
    addEventSourceListener(es, "channelError", (msg)=>{
        es.close();
        let data;
        try {
            data = JSON.parse(msg.data);
        } catch (err) {
            handlers.error(new Error("Unknown error parsing listener message"));
            return;
        }
        handlers.error(new Error(data.message || data.error || `Listener returned HTTP ${data.statusCode}`));
    });
    addEventSourceListener(es, "error", (err)=>{
        const origin =  false && 0;
        const hintSuffix = origin ? `, and that the CORS-origin (${origin}) is allowed` : "";
        const errorMessage = isErrorLike(err) ? ` (${err.message})` : "";
        handlers.error(new Error(`Error establishing listener - check that the project ID and dataset are correct${hintSuffix}${errorMessage}`));
    });
    return {
        unsubscribe: ()=>Promise.resolve(es.close())
    };
}
function getMutationParser(cb) {
    return (msg)=>{
        let data;
        try {
            data = JSON.parse(msg.data);
        } catch (err) {
            // intentional noop
            return;
        }
        cb(data);
    };
}
function isErrorLike(err) {
    return typeof err === "object" && err !== null && "message" in err;
}
function isDraft(doc) {
    return doc._id.startsWith("drafts.");
}
function getPublishedId(document) {
    return isDraft(document) ? document._id.slice(7) : document._id;
}
function applyPatchWithoutRev(doc, patch) {
    const patchDoc = _extends({}, doc);
    delete patchDoc._rev;
    return mendoza.applyPatch(patchDoc, patch);
}
const DEBOUNCE_MS = 25;
function noop() {
    return Promise.resolve();
}
function getSyncingDataset(config, onNotifyUpdate, { getDocuments , EventSource  }) {
    const { projectId , dataset , listen: useListener , overlayDrafts , documentLimit , token  } = config;
    if (!useListener) {
        const loaded = getDocuments({
            projectId,
            dataset,
            documentLimit,
            token
        }).then(onUpdate).then(noop);
        return {
            unsubscribe: noop,
            loaded
        };
    }
    const indexedDocuments = new Map(); // undefined until the listener has been set up and the initial export is done
    let documents; // holds any mutations that happen while fetching documents so they can be applied after updates
    const buffer = []; // Return a promise we can resolve once we've established a listener and reconciled any mutations
    let onDoneLoading;
    let onLoadError;
    const loaded1 = new Promise((resolve, reject)=>{
        onDoneLoading = resolve;
        onLoadError = reject;
    }); // We don't want to flush updates while we're in the same transaction, so a normal
    // throttle/debounce wouldn't do it. We need to wait and see if the next mutation is
    // within the same transaction as the previous, and if not we can flush. Of course,
    // we can't wait forever, so an upper threshold of X ms should be counted as "ok to flush"
    let stagedDocs;
    let previousTrx;
    let flushTimeout;
    const listener = listen(EventSource, config, {
        next: onMutationReceived,
        open: onOpen,
        error: (error)=>onLoadError(error)
    });
    return {
        unsubscribe: listener.unsubscribe,
        loaded: loaded1
    };
    async function onOpen() {
        const initial = await getDocuments({
            projectId,
            dataset,
            documentLimit,
            token
        });
        documents = applyBufferedMutations(initial, buffer);
        documents.forEach((doc)=>indexedDocuments.set(doc._id, doc));
        onUpdate(documents);
        onDoneLoading();
    }
    function onMutationReceived(msg) {
        if (documents) {
            applyMutation(msg);
            scheduleUpdate(documents, msg);
        } else {
            buffer.push(msg);
        }
    }
    function scheduleUpdate(docs, msg) {
        clearTimeout(flushTimeout);
        if (previousTrx !== msg.transactionId && stagedDocs) {
            // This is a new transaction, meaning we can immediately flush any pending
            // doc updates if there are any
            onUpdate(stagedDocs);
            previousTrx = undefined;
        } else {
            previousTrx = msg.transactionId;
            stagedDocs = docs.slice();
        }
        flushTimeout = setTimeout(onUpdate, DEBOUNCE_MS, docs.slice());
    }
    function onUpdate(docs) {
        stagedDocs = undefined;
        flushTimeout = undefined;
        previousTrx = undefined;
        onNotifyUpdate(overlayDrafts ? overlay(docs) : docs);
    }
    function applyMutation(msg) {
        if (!msg.effects || msg.documentId.startsWith("_.")) {
            return;
        }
        const document = indexedDocuments.get(msg.documentId) || null;
        replaceDocument(msg.documentId, applyPatchWithoutRev(document, msg.effects.apply));
    }
    function replaceDocument(id, document) {
        const current = indexedDocuments.get(id);
        const docs = documents || [];
        const position = current ? docs.indexOf(current) : -1;
        if (position === -1 && document) {
            // Didn't exist previously, but was now created. Add it.
            docs.push(document);
            indexedDocuments.set(id, document);
        } else if (document) {
            // Existed previously and still does. Replace it.
            docs.splice(position, 1, document);
            indexedDocuments.set(id, document);
        } else {
            // Existed previously, but is now deleted. Remove it.
            docs.splice(position, 1);
            indexedDocuments.delete(id);
        }
    }
}
function applyBufferedMutations(documents, mutations) {
    // Group by document ID
    const groups = new Map();
    mutations.forEach((mutation)=>{
        const group = groups.get(mutation.documentId) || [];
        group.push(mutation);
        groups.set(mutation.documentId, group);
    }); // Discard all mutations that happened before our current document
    groups.forEach((group, id)=>{
        const document = documents.find((doc)=>doc._id === id);
        if (!document) {
            // @todo handle
            // eslint-disable-next-line no-console
            console.warn("Received mutation for missing document %s", id);
            return;
        } // Mutations are sorted by timestamp, apply any that arrived after
        // we fetched the initial documents
        let hasFoundRevision = false;
        let current = document;
        group.forEach((mutation)=>{
            hasFoundRevision = hasFoundRevision || mutation.previousRev === document._rev;
            if (!hasFoundRevision) {
                return;
            }
            if (mutation.effects) {
                current = applyPatchWithoutRev(current, mutation.effects.apply);
            }
        }); // Replace the indexed documents
        documents.splice(documents.indexOf(document), 1, current);
    });
    return documents;
}
function overlay(documents) {
    const overlayed = new Map();
    documents.forEach((doc)=>{
        const existing = overlayed.get(getPublishedId(doc));
        if (doc._id.startsWith("drafts.")) {
            // Drafts always overlay
            overlayed.set(getPublishedId(doc), pretendThatItsPublished(doc));
        } else if (!existing) {
            // Published documents only override if draft doesn't exist
            overlayed.set(doc._id, doc);
        }
    });
    return Array.from(overlayed.values());
} // Strictly speaking it would be better to allow groq-js to resolve `draft.<id>`,
// but for now this will have to do
function pretendThatItsPublished(doc) {
    return _extends({}, doc, {
        _id: getPublishedId(doc)
    });
}
function groqStore$1(config, envImplementations) {
    let documents = [];
    const executeThrottled = throttleDebounce.throttle(config.subscriptionThrottleMs || 50, executeAllSubscriptions);
    const activeSubscriptions = [];
    let dataset;
    async function loadDataset() {
        if (!dataset) {
            dataset = getSyncingDataset(config, (docs)=>{
                documents = docs;
                executeThrottled();
            }, envImplementations);
        }
        await dataset.loaded;
    }
    async function query(groqQuery, params) {
        await loadDataset();
        const tree = groqJs.parse(groqQuery, {
            params
        });
        const result = await groqJs.evaluate(tree, {
            dataset: documents,
            params
        });
        return result.get();
    }
    async function getDocument(documentId) {
        await loadDataset();
        return query(groq__default["default"]`*[_id == $id][0]`, {
            id: documentId
        });
    }
    async function getDocuments(documentIds) {
        await loadDataset();
        const subQueries = documentIds.map((id)=>`*[_id == "${id}"][0]`).join(",\n");
        return query(`[${subQueries}]`);
    }
    function subscribe(groqQuery, params, callback) {
        if (!config.listen) {
            throw new Error("Cannot use `subscribe()` without `listen: true`");
        } // @todo Execute the query against an empty dataset for validation purposes
        // Store the subscription so we can re-run the query on new data
        const subscription = {
            query: groqQuery,
            params,
            callback
        };
        activeSubscriptions.push(subscription);
        let unsubscribed = false;
        const unsubscribe = ()=>{
            if (unsubscribed) {
                return Promise.resolve();
            }
            unsubscribed = true;
            activeSubscriptions.splice(activeSubscriptions.indexOf(subscription), 1);
            return Promise.resolve();
        };
        executeQuerySubscription(subscription);
        return {
            unsubscribe
        };
    }
    function executeQuerySubscription(subscription) {
        return query(subscription.query, subscription.params).then((res)=>{
            if ("previousResult" in subscription && deepEqual__default["default"](subscription.previousResult, res)) {
                return;
            }
            subscription.previousResult = res;
            subscription.callback(undefined, res);
        }).catch((err)=>{
            subscription.callback(err);
        });
    }
    function executeAllSubscriptions() {
        activeSubscriptions.forEach(executeQuerySubscription);
    }
    function close() {
        executeThrottled.cancel();
        return dataset ? dataset.unsubscribe() : Promise.resolve();
    }
    return {
        query,
        getDocument,
        getDocuments,
        subscribe,
        close
    };
}
function isStreamError(result) {
    if (!result) {
        return false;
    }
    if (!("error" in result) || typeof result.error !== "object" || result.error === null) {
        return false;
    }
    return "description" in result.error && typeof result.error.description === "string" && !("_id" in result);
}
function getError(body) {
    if (typeof body === "object" && "error" in body && "message" in body) {
        return body.message || body.error;
    }
    return "<unknown error>";
}
function isRelevantDocument(doc) {
    return !doc._id.startsWith("_.");
}
const getDocuments = function getDocuments({ projectId , dataset , token , documentLimit  }) {
    const headers = token ? {
        Authorization: `Bearer ${token}`
    } : undefined;
    return new Promise((resolve, reject)=>{
        get__default["default"]({
            url: `https://${projectId}.api.sanity.io/v1/data/export/${dataset}`,
            headers
        }, (err, response)=>{
            if (err) {
                reject(err);
                return;
            }
            response.setEncoding("utf8");
            const chunks = [];
            if (response.statusCode !== 200) {
                response.on("data", (chunk)=>chunks.push(chunk)).on("end", ()=>{
                    const body = JSON.parse(Buffer.concat(chunks).toString("utf8"));
                    reject(new Error(`Error streaming dataset: ${getError(body)}`));
                });
                return;
            }
            const documents = [];
            response.pipe(split__default["default"](JSON.parse)).on("data", (doc)=>{
                if (isStreamError(doc)) {
                    reject(new Error(`Error streaming dataset: ${doc.error}`));
                    return;
                }
                if (doc && isRelevantDocument(doc)) {
                    documents.push(doc);
                }
                if (documentLimit && documents.length > documentLimit) {
                    reject(new Error(`Error streaming dataset: Reached limit of ${documentLimit} documents`));
                    response.destroy();
                }
            }).on("end", ()=>resolve(documents));
        });
    });
};
function assertEnvSupport() {
    const [major] = process.version.replace(/^v/, "").split(".", 1).map(Number);
    if (major < 10) {
        throw new Error("Node.js version 10 or higher required");
    }
}
/**
 * Note: Entry point for _browser_ build is in browser/index.ts
 */ function groqStore(config) {
    var _config$EventSource;
    assertEnvSupport();
    return groqStore$1(config, {
        EventSource: (_config$EventSource = config.EventSource) != null ? _config$EventSource : EventSourcePolyfill__default["default"],
        getDocuments
    });
}
Object.defineProperty(exports, "groq", ({
    enumerable: true,
    get: function() {
        return groq__default["default"];
    }
}));
exports.groqStore = groqStore; //# sourceMappingURL=groq-store.js.map


/***/ }),

/***/ 1102:
/***/ ((module) => {

"use strict";

module.exports = function(req, time) {
    if (req.timeoutTimer) {
        return req;
    }
    var delays = isNaN(time) ? time : {
        socket: time,
        connect: time
    };
    var hostHeader = req.getHeader("host");
    var host = hostHeader ? " to " + hostHeader : "";
    if (delays.connect !== undefined) {
        req.timeoutTimer = setTimeout(function timeoutHandler() {
            req.abort();
            var e = new Error("Connection timed out on request" + host);
            e.code = "ETIMEDOUT";
            req.emit("error", e);
        }, delays.connect);
    }
    // Clear the connection timeout timer once a socket is assigned to the
    // request and is connected.
    req.on("socket", function assign(socket) {
        // Socket may come from Agent pool and may be already connected.
        if (!(socket.connecting || socket._connecting)) {
            connect();
            return;
        }
        socket.once("connect", connect);
    });
    function clear() {
        if (req.timeoutTimer) {
            clearTimeout(req.timeoutTimer);
            req.timeoutTimer = null;
        }
    }
    function connect() {
        clear();
        if (delays.socket !== undefined) {
            // Abort the request if there is no activity on the socket for more
            // than `delays.socket` milliseconds.
            req.setTimeout(delays.socket, function socketTimeoutHandler() {
                req.abort();
                var e = new Error("Socket timed out on request" + host);
                e.code = "ESOCKETTIMEDOUT";
                req.emit("error", e);
            });
        }
    }
    return req.on("error", clear);
};


/***/ }),

/***/ 5106:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(arg) {
    if (Array.isArray) {
        return Array.isArray(arg);
    }
    return objectToString(arg) === "[object Array]";
}
exports.isArray = isArray;
function isBoolean(arg) {
    return typeof arg === "boolean";
}
exports.isBoolean = isBoolean;
function isNull(arg) {
    return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
    return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
    return typeof arg === "number";
}
exports.isNumber = isNumber;
function isString(arg) {
    return typeof arg === "string";
}
exports.isString = isString;
function isSymbol(arg) {
    return typeof arg === "symbol";
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
    return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
    return objectToString(re) === "[object RegExp]";
}
exports.isRegExp = isRegExp;
function isObject(arg) {
    return typeof arg === "object" && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
    return objectToString(d) === "[object Date]";
}
exports.isDate = isDate;
function isError(e) {
    return objectToString(e) === "[object Error]" || e instanceof Error;
}
exports.isError = isError;
function isFunction(arg) {
    return typeof arg === "function";
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
    return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
    typeof arg === "undefined";
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = __webpack_require__(4300).Buffer.isBuffer;
function objectToString(o) {
    return Object.prototype.toString.call(o);
}


/***/ }),

/***/ 3474:
/***/ ((module, exports, __webpack_require__) => {

"use strict";
/* eslint-env browser */ /**
 * This is the web browser implementation of `debug()`.
 */ 
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (()=>{
    let warned = false;
    return ()=>{
        if (!warned) {
            warned = true;
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
    };
})();
/**
 * Colors.
 */ exports.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */ // eslint-disable-next-line complexity
function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (false) {}
    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
    }
    // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
     false && (0) || // Is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
    typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
    if (!this.useColors) {
        return;
    }
    const c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match)=>{
        if (match === "%%") {
            return;
        }
        index++;
        if (match === "%c") {
            // We only are interested in the *last* %c
            // (the user may have provided their own)
            lastC = index;
        }
    });
    args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */ exports.log = console.debug || console.log || (()=>{});
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    try {
        if (namespaces) {
            exports.storage.setItem("debug", namespaces);
        } else {
            exports.storage.removeItem("debug");
        }
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    let r;
    try {
        r = exports.storage.getItem("debug");
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
    }
    return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */ function localstorage() {
    try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage;
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
module.exports = __webpack_require__(6377)(exports);
const { formatters  } = module.exports;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */ formatters.j = function(v) {
    try {
        return JSON.stringify(v);
    } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
    }
};


/***/ }),

/***/ 6377:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */ 
function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = __webpack_require__(7518);
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key)=>{
        createDebug[key] = env[key];
    });
    /**
	* The currently active debug mode names, and names to skip.
	*/ createDebug.names = [];
    createDebug.skips = [];
    /**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/ createDebug.formatters = {};
    /**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/ function selectColor(namespace) {
        let hash = 0;
        for(let i = 0; i < namespace.length; i++){
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    /**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/ function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
            // Disabled?
            if (!debug.enabled) {
                return;
            }
            const self = debug;
            // Set `diff` timestamp
            const curr = Number(new Date());
            const ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== "string") {
                // Anything else let's inspect with %O
                args.unshift("%O");
            }
            // Apply any `formatters` transformations
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format)=>{
                // If we encounter an escaped % then don't increase the array index
                if (match === "%%") {
                    return "%";
                }
                index++;
                const formatter = createDebug.formatters[format];
                if (typeof formatter === "function") {
                    const val = args[index];
                    match = formatter.call(self, val);
                    // Now we need to remove `args[index]` since it's inlined in the `format`
                    args.splice(index, 1);
                    index--;
                }
                return match;
            });
            // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args);
            const logFn = self.log || createDebug.log;
            logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.
        Object.defineProperty(debug, "enabled", {
            enumerable: true,
            configurable: false,
            get: ()=>{
                if (enableOverride !== null) {
                    return enableOverride;
                }
                if (namespacesCache !== createDebug.namespaces) {
                    namespacesCache = createDebug.namespaces;
                    enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
            },
            set: (v)=>{
                enableOverride = v;
            }
        });
        // Env-specific initialization logic for debug instances
        if (typeof createDebug.init === "function") {
            createDebug.init(debug);
        }
        return debug;
    }
    function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
    }
    /**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/ function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for(i = 0; i < len; i++){
            if (!split[i]) {
                continue;
            }
            namespaces = split[i].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") {
                createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
            } else {
                createDebug.names.push(new RegExp("^" + namespaces + "$"));
            }
        }
    }
    /**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/ function disable() {
        const namespaces = [
            ...createDebug.names.map(toNamespace),
            ...createDebug.skips.map(toNamespace).map((namespace)=>"-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
    }
    /**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/ function enabled(name) {
        if (name[name.length - 1] === "*") {
            return true;
        }
        let i;
        let len;
        for(i = 0, len = createDebug.skips.length; i < len; i++){
            if (createDebug.skips[i].test(name)) {
                return false;
            }
        }
        for(i = 0, len = createDebug.names.length; i < len; i++){
            if (createDebug.names[i].test(name)) {
                return true;
            }
        }
        return false;
    }
    /**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/ function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    /**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/ function coerce(val) {
        if (val instanceof Error) {
            return val.stack || val.message;
        }
        return val;
    }
    /**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/ function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
}
module.exports = setup;


/***/ }),

/***/ 3550:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */ 
if (typeof process === "undefined" || process.type === "renderer" || false === true || process.__nwjs) {
    module.exports = __webpack_require__(3474);
} else {
    module.exports = __webpack_require__(5932);
}


/***/ }),

/***/ 5932:
/***/ ((module, exports, __webpack_require__) => {

"use strict";
/**
 * Module dependencies.
 */ 
const tty = __webpack_require__(6224);
const util = __webpack_require__(3849);
/**
 * This is the Node.js implementation of `debug()`.
 */ exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util.deprecate(()=>{}, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
/**
 * Colors.
 */ exports.colors = [
    6,
    2,
    3,
    4,
    5,
    1
];
try {
    // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
    // eslint-disable-next-line import/no-extraneous-dependencies
    const supportsColor = __webpack_require__(3406);
    if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
            20,
            21,
            26,
            27,
            32,
            33,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            56,
            57,
            62,
            63,
            68,
            69,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            92,
            93,
            98,
            99,
            112,
            113,
            128,
            129,
            134,
            135,
            148,
            149,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            178,
            179,
            184,
            185,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            214,
            215,
            220,
            221
        ];
    }
} catch (error) {
// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}
/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */ exports.inspectOpts = Object.keys(process.env).filter((key)=>{
    return /^debug_/i.test(key);
}).reduce((obj, key)=>{
    // Camel-case
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k)=>{
        return k.toUpperCase();
    });
    // Coerce string value into JS value
    let val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
    } else if (val === "null") {
        val = null;
    } else {
        val = Number(val);
    }
    obj[prop] = val;
    return obj;
}, {});
/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */ function useColors() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
}
/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    const { namespace: name , useColors  } = this;
    if (useColors) {
        const c = this.color;
        const colorCode = "\x1b[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \u001B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "\x1b[0m");
    } else {
        args[0] = getDate() + name + " " + args[0];
    }
}
function getDate() {
    if (exports.inspectOpts.hideDate) {
        return "";
    }
    return new Date().toISOString() + " ";
}
/**
 * Invokes `util.format()` with the specified arguments and writes to stderr.
 */ function log(...args) {
    return process.stderr.write(util.format(...args) + "\n");
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    if (namespaces) {
        process.env.DEBUG = namespaces;
    } else {
        // If you set a process.env field to null or undefined, it gets cast to the
        // string 'null' or 'undefined'. Just delete instead.
        delete process.env.DEBUG;
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    return process.env.DEBUG;
}
/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */ function init(debug) {
    debug.inspectOpts = {};
    const keys = Object.keys(exports.inspectOpts);
    for(let i = 0; i < keys.length; i++){
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
}
module.exports = __webpack_require__(6377)(exports);
const { formatters  } = module.exports;
/**
 * Map %o to `util.inspect()`, all on a single line.
 */ formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split("\n").map((str)=>str.trim()).join(" ");
};
/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */ formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
};


/***/ }),

/***/ 4167:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const { Transform , PassThrough  } = __webpack_require__(2781);
const zlib = __webpack_require__(9796);
const mimicResponse = __webpack_require__(4700);
module.exports = (response)=>{
    const contentEncoding = (response.headers["content-encoding"] || "").toLowerCase();
    if (![
        "gzip",
        "deflate",
        "br"
    ].includes(contentEncoding)) {
        return response;
    }
    // TODO: Remove this when targeting Node.js 12.
    const isBrotli = contentEncoding === "br";
    if (isBrotli && typeof zlib.createBrotliDecompress !== "function") {
        response.destroy(new Error("Brotli is not supported on Node.js < 12"));
        return response;
    }
    let isEmpty = true;
    const checker = new Transform({
        transform (data, _encoding, callback) {
            isEmpty = false;
            callback(null, data);
        },
        flush (callback) {
            callback();
        }
    });
    const finalStream = new PassThrough({
        autoDestroy: false,
        destroy (error, callback) {
            response.destroy();
            callback(error);
        }
    });
    const decompressStream = isBrotli ? zlib.createBrotliDecompress() : zlib.createUnzip();
    decompressStream.once("error", (error)=>{
        if (isEmpty && !response.readable) {
            finalStream.end();
            return;
        }
        finalStream.destroy(error);
    });
    mimicResponse(response, finalStream);
    response.pipe(checker).pipe(decompressStream).pipe(finalStream);
    return finalStream;
};


/***/ }),

/***/ 7995:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var parse = (__webpack_require__(7310).parse);
var events = __webpack_require__(2361);
var https = __webpack_require__(5687);
var http = __webpack_require__(3685);
var util = __webpack_require__(3849);
var httpsOptions = [
    "pfx",
    "key",
    "passphrase",
    "cert",
    "ca",
    "ciphers",
    "rejectUnauthorized",
    "secureProtocol",
    "servername",
    "checkServerIdentity"
];
var bom = [
    239,
    187,
    191
];
var colon = 58;
var space = 32;
var lineFeed = 10;
var carriageReturn = 13;
function hasBom(buf) {
    return bom.every(function(charCode, index) {
        return buf[index] === charCode;
    });
}
/**
 * Creates a new EventSource object
 *
 * @param {String} url the URL to which to connect
 * @param {Object} [eventSourceInitDict] extra init params. See README for details.
 * @api public
 **/ function EventSource(url, eventSourceInitDict) {
    var readyState = EventSource.CONNECTING;
    var headers = eventSourceInitDict && eventSourceInitDict.headers;
    var hasNewOrigin = false;
    Object.defineProperty(this, "readyState", {
        get: function() {
            return readyState;
        }
    });
    Object.defineProperty(this, "url", {
        get: function() {
            return url;
        }
    });
    var self = this;
    self.reconnectInterval = 1000;
    self.connectionInProgress = false;
    function onConnectionClosed(message) {
        if (readyState === EventSource.CLOSED) return;
        readyState = EventSource.CONNECTING;
        _emit("error", new Event("error", {
            message: message
        }));
        // The url may have been changed by a temporary redirect. If that's the case,
        // revert it now, and flag that we are no longer pointing to a new origin
        if (reconnectUrl) {
            url = reconnectUrl;
            reconnectUrl = null;
            hasNewOrigin = false;
        }
        setTimeout(function() {
            if (readyState !== EventSource.CONNECTING || self.connectionInProgress) {
                return;
            }
            self.connectionInProgress = true;
            connect();
        }, self.reconnectInterval);
    }
    var req;
    var lastEventId = "";
    if (headers && headers["Last-Event-ID"]) {
        lastEventId = headers["Last-Event-ID"];
        delete headers["Last-Event-ID"];
    }
    var discardTrailingNewline = false;
    var data = "";
    var eventName = "";
    var reconnectUrl = null;
    function connect() {
        var options = parse(url);
        var isSecure = options.protocol === "https:";
        options.headers = {
            "Cache-Control": "no-cache",
            "Accept": "text/event-stream"
        };
        if (lastEventId) options.headers["Last-Event-ID"] = lastEventId;
        if (headers) {
            var reqHeaders = hasNewOrigin ? removeUnsafeHeaders(headers) : headers;
            for(var i in reqHeaders){
                var header = reqHeaders[i];
                if (header) {
                    options.headers[i] = header;
                }
            }
        }
        // Legacy: this should be specified as `eventSourceInitDict.https.rejectUnauthorized`,
        // but for now exists as a backwards-compatibility layer
        options.rejectUnauthorized = !(eventSourceInitDict && !eventSourceInitDict.rejectUnauthorized);
        if (eventSourceInitDict && eventSourceInitDict.createConnection !== undefined) {
            options.createConnection = eventSourceInitDict.createConnection;
        }
        // If specify http proxy, make the request to sent to the proxy server,
        // and include the original url in path and Host headers
        var useProxy = eventSourceInitDict && eventSourceInitDict.proxy;
        if (useProxy) {
            var proxy = parse(eventSourceInitDict.proxy);
            isSecure = proxy.protocol === "https:";
            options.protocol = isSecure ? "https:" : "http:";
            options.path = url;
            options.headers.Host = options.host;
            options.hostname = proxy.hostname;
            options.host = proxy.host;
            options.port = proxy.port;
        }
        // If https options are specified, merge them into the request options
        if (eventSourceInitDict && eventSourceInitDict.https) {
            for(var optName in eventSourceInitDict.https){
                if (httpsOptions.indexOf(optName) === -1) {
                    continue;
                }
                var option = eventSourceInitDict.https[optName];
                if (option !== undefined) {
                    options[optName] = option;
                }
            }
        }
        // Pass this on to the XHR
        if (eventSourceInitDict && eventSourceInitDict.withCredentials !== undefined) {
            options.withCredentials = eventSourceInitDict.withCredentials;
        }
        req = (isSecure ? https : http).request(options, function(res) {
            self.connectionInProgress = false;
            // Handle HTTP errors
            if (res.statusCode === 500 || res.statusCode === 502 || res.statusCode === 503 || res.statusCode === 504) {
                _emit("error", new Event("error", {
                    status: res.statusCode,
                    message: res.statusMessage
                }));
                onConnectionClosed();
                return;
            }
            // Handle HTTP redirects
            if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {
                var location = res.headers.location;
                if (!location) {
                    // Server sent redirect response without Location header.
                    _emit("error", new Event("error", {
                        status: res.statusCode,
                        message: res.statusMessage
                    }));
                    return;
                }
                var prevOrigin = getOrigin(url);
                var nextOrigin = getOrigin(location);
                hasNewOrigin = prevOrigin !== nextOrigin;
                if (res.statusCode === 307) reconnectUrl = url;
                url = location;
                process.nextTick(connect);
                return;
            }
            if (res.statusCode !== 200) {
                _emit("error", new Event("error", {
                    status: res.statusCode,
                    message: res.statusMessage
                }));
                return self.close();
            }
            readyState = EventSource.OPEN;
            res.on("close", function() {
                res.removeAllListeners("close");
                res.removeAllListeners("end");
                onConnectionClosed();
            });
            res.on("end", function() {
                res.removeAllListeners("close");
                res.removeAllListeners("end");
                onConnectionClosed();
            });
            _emit("open", new Event("open"));
            // text/event-stream parser adapted from webkit's
            // Source/WebCore/page/EventSource.cpp
            var isFirst = true;
            var buf;
            var startingPos = 0;
            var startingFieldLength = -1;
            res.on("data", function(chunk) {
                buf = buf ? Buffer.concat([
                    buf,
                    chunk
                ]) : chunk;
                if (isFirst && hasBom(buf)) {
                    buf = buf.slice(bom.length);
                }
                isFirst = false;
                var pos = 0;
                var length = buf.length;
                while(pos < length){
                    if (discardTrailingNewline) {
                        if (buf[pos] === lineFeed) {
                            ++pos;
                        }
                        discardTrailingNewline = false;
                    }
                    var lineLength = -1;
                    var fieldLength = startingFieldLength;
                    var c;
                    for(var i = startingPos; lineLength < 0 && i < length; ++i){
                        c = buf[i];
                        if (c === colon) {
                            if (fieldLength < 0) {
                                fieldLength = i - pos;
                            }
                        } else if (c === carriageReturn) {
                            discardTrailingNewline = true;
                            lineLength = i - pos;
                        } else if (c === lineFeed) {
                            lineLength = i - pos;
                        }
                    }
                    if (lineLength < 0) {
                        startingPos = length - pos;
                        startingFieldLength = fieldLength;
                        break;
                    } else {
                        startingPos = 0;
                        startingFieldLength = -1;
                    }
                    parseEventStreamLine(buf, pos, fieldLength, lineLength);
                    pos += lineLength + 1;
                }
                if (pos === length) {
                    buf = void 0;
                } else if (pos > 0) {
                    buf = buf.slice(pos);
                }
            });
        });
        req.on("error", function(err) {
            self.connectionInProgress = false;
            onConnectionClosed(err.message);
        });
        if (req.setNoDelay) req.setNoDelay(true);
        req.end();
    }
    connect();
    function _emit() {
        if (self.listeners(arguments[0]).length > 0) {
            self.emit.apply(self, arguments);
        }
    }
    this._close = function() {
        if (readyState === EventSource.CLOSED) return;
        readyState = EventSource.CLOSED;
        if (req.abort) req.abort();
        if (req.xhr && req.xhr.abort) req.xhr.abort();
    };
    function parseEventStreamLine(buf, pos, fieldLength, lineLength) {
        if (lineLength === 0) {
            if (data.length > 0) {
                var type = eventName || "message";
                _emit(type, new MessageEvent(type, {
                    data: data.slice(0, -1),
                    lastEventId: lastEventId,
                    origin: getOrigin(url)
                }));
                data = "";
            }
            eventName = void 0;
        } else if (fieldLength > 0) {
            var noValue = fieldLength < 0;
            var step = 0;
            var field = buf.slice(pos, pos + (noValue ? lineLength : fieldLength)).toString();
            if (noValue) {
                step = lineLength;
            } else if (buf[pos + fieldLength + 1] !== space) {
                step = fieldLength + 1;
            } else {
                step = fieldLength + 2;
            }
            pos += step;
            var valueLength = lineLength - step;
            var value = buf.slice(pos, pos + valueLength).toString();
            if (field === "data") {
                data += value + "\n";
            } else if (field === "event") {
                eventName = value;
            } else if (field === "id") {
                lastEventId = value;
            } else if (field === "retry") {
                var retry = parseInt(value, 10);
                if (!Number.isNaN(retry)) {
                    self.reconnectInterval = retry;
                }
            }
        }
    }
}
module.exports = EventSource;
util.inherits(EventSource, events.EventEmitter);
EventSource.prototype.constructor = EventSource; // make stacktraces readable
[
    "open",
    "error",
    "message"
].forEach(function(method) {
    Object.defineProperty(EventSource.prototype, "on" + method, {
        /**
     * Returns the current listener
     *
     * @return {Mixed} the set function or undefined
     * @api private
     */ get: function get() {
            var listener = this.listeners(method)[0];
            return listener ? listener._listener ? listener._listener : listener : undefined;
        },
        /**
     * Start listening for events
     *
     * @param {Function} listener the listener
     * @return {Mixed} the set function or undefined
     * @api private
     */ set: function set(listener) {
            this.removeAllListeners(method);
            this.addEventListener(method, listener);
        }
    });
});
/**
 * Ready states
 */ Object.defineProperty(EventSource, "CONNECTING", {
    enumerable: true,
    value: 0
});
Object.defineProperty(EventSource, "OPEN", {
    enumerable: true,
    value: 1
});
Object.defineProperty(EventSource, "CLOSED", {
    enumerable: true,
    value: 2
});
EventSource.prototype.CONNECTING = 0;
EventSource.prototype.OPEN = 1;
EventSource.prototype.CLOSED = 2;
/**
 * Closes the connection, if one is made, and sets the readyState attribute to 2 (closed)
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventSource/close
 * @api public
 */ EventSource.prototype.close = function() {
    this._close();
};
/**
 * Emulates the W3C Browser based WebSocket interface using addEventListener.
 *
 * @param {String} type A string representing the event type to listen out for
 * @param {Function} listener callback
 * @see https://developer.mozilla.org/en/DOM/element.addEventListener
 * @see http://dev.w3.org/html5/websockets/#the-websocket-interface
 * @api public
 */ EventSource.prototype.addEventListener = function addEventListener(type, listener) {
    if (typeof listener === "function") {
        // store a reference so we can return the original function again
        listener._listener = listener;
        this.on(type, listener);
    }
};
/**
 * Emulates the W3C Browser based WebSocket interface using dispatchEvent.
 *
 * @param {Event} event An event to be dispatched
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent
 * @api public
 */ EventSource.prototype.dispatchEvent = function dispatchEvent(event) {
    if (!event.type) {
        throw new Error("UNSPECIFIED_EVENT_TYPE_ERR");
    }
    // if event is instance of an CustomEvent (or has 'details' property),
    // send the detail object as the payload for the event
    this.emit(event.type, event.detail);
};
/**
 * Emulates the W3C Browser based WebSocket interface using removeEventListener.
 *
 * @param {String} type A string representing the event type to remove
 * @param {Function} listener callback
 * @see https://developer.mozilla.org/en/DOM/element.removeEventListener
 * @see http://dev.w3.org/html5/websockets/#the-websocket-interface
 * @api public
 */ EventSource.prototype.removeEventListener = function removeEventListener(type, listener) {
    if (typeof listener === "function") {
        listener._listener = undefined;
        this.removeListener(type, listener);
    }
};
/**
 * W3C Event
 *
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#interface-Event
 * @api private
 */ function Event(type, optionalProperties) {
    Object.defineProperty(this, "type", {
        writable: false,
        value: type,
        enumerable: true
    });
    if (optionalProperties) {
        for(var f in optionalProperties){
            if (optionalProperties.hasOwnProperty(f)) {
                Object.defineProperty(this, f, {
                    writable: false,
                    value: optionalProperties[f],
                    enumerable: true
                });
            }
        }
    }
}
/**
 * W3C MessageEvent
 *
 * @see http://www.w3.org/TR/webmessaging/#event-definitions
 * @api private
 */ function MessageEvent(type, eventInitDict) {
    Object.defineProperty(this, "type", {
        writable: false,
        value: type,
        enumerable: true
    });
    for(var f in eventInitDict){
        if (eventInitDict.hasOwnProperty(f)) {
            Object.defineProperty(this, f, {
                writable: false,
                value: eventInitDict[f],
                enumerable: true
            });
        }
    }
}
/**
 * Returns a new object of headers that does not include any authorization and cookie headers
 *
 * @param {Object} headers An object of headers ({[headerName]: headerValue})
 * @return {Object} a new object of headers
 * @api private
 */ function removeUnsafeHeaders(headers) {
    var safe = {};
    for(var key in headers){
        if (/^(cookie|authorization)$/i.test(key)) {
            continue;
        }
        safe[key] = headers[key];
    }
    return safe;
}
/**
 * Transform an URL to a valid origin value.
 *
 * @param {String|Object} url URL to transform to it's origin.
 * @returns {String} The origin.
 * @api private
 */ function getOrigin(url) {
    if (typeof url === "string") url = parse(url);
    if (!url.protocol || !url.hostname) return "null";
    return (url.protocol + "//" + url.host).toLowerCase();
}


/***/ }),

/***/ 9295:
/***/ ((module) => {

"use strict";

// do not edit .js files directly - edit src/index.jst
module.exports = function equal(a, b) {
    if (a === b) return true;
    if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length) return false;
            for(i = length; i-- !== 0;)if (!equal(a[i], b[i])) return false;
            return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for(i = length; i-- !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        for(i = length; i-- !== 0;){
            var key = keys[i];
            if (!equal(a[key], b[key])) return false;
        }
        return true;
    }
    // true if both NaN, false otherwise
    return a !== a && b !== b;
};


/***/ }),

/***/ 5098:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var debug;
module.exports = function() {
    if (!debug) {
        try {
            /* eslint global-require: off */ debug = __webpack_require__(3550)("follow-redirects");
        } catch (error) {}
        if (typeof debug !== "function") {
            debug = function() {};
        }
    }
    debug.apply(null, arguments);
};


/***/ }),

/***/ 2934:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var url = __webpack_require__(7310);
var URL = url.URL;
var http = __webpack_require__(3685);
var https = __webpack_require__(5687);
var Writable = (__webpack_require__(2781).Writable);
var assert = __webpack_require__(9491);
var debug = __webpack_require__(5098);
// Create handlers that pass events from native requests
var events = [
    "abort",
    "aborted",
    "connect",
    "error",
    "socket",
    "timeout"
];
var eventHandlers = Object.create(null);
events.forEach(function(event) {
    eventHandlers[event] = function(arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
    };
});
var InvalidUrlError = createErrorType("ERR_INVALID_URL", "Invalid URL", TypeError);
// Error types with codes
var RedirectionError = createErrorType("ERR_FR_REDIRECTION_FAILURE", "Redirected request failed");
var TooManyRedirectsError = createErrorType("ERR_FR_TOO_MANY_REDIRECTS", "Maximum number of redirects exceeded");
var MaxBodyLengthExceededError = createErrorType("ERR_FR_MAX_BODY_LENGTH_EXCEEDED", "Request body larger than maxBodyLength limit");
var WriteAfterEndError = createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
// An HTTP(S) request that can be redirected
function RedirectableRequest(options, responseCallback) {
    // Initialize the request
    Writable.call(this);
    this._sanitizeOptions(options);
    this._options = options;
    this._ended = false;
    this._ending = false;
    this._redirectCount = 0;
    this._redirects = [];
    this._requestBodyLength = 0;
    this._requestBodyBuffers = [];
    // Attach a callback if passed
    if (responseCallback) {
        this.on("response", responseCallback);
    }
    // React to responses of native requests
    var self = this;
    this._onNativeResponse = function(response) {
        self._processResponse(response);
    };
    // Perform the first request
    this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);
RedirectableRequest.prototype.abort = function() {
    abortRequest(this._currentRequest);
    this.emit("abort");
};
// Writes buffered data to the current native request
RedirectableRequest.prototype.write = function(data, encoding, callback) {
    // Writing is not allowed if end has been called
    if (this._ending) {
        throw new WriteAfterEndError();
    }
    // Validate input and shift parameters if necessary
    if (!isString(data) && !isBuffer(data)) {
        throw new TypeError("data should be a string, Buffer or Uint8Array");
    }
    if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
    }
    // Ignore empty buffers, since writing them doesn't invoke the callback
    // https://github.com/nodejs/node/issues/22066
    if (data.length === 0) {
        if (callback) {
            callback();
        }
        return;
    }
    // Only write when we don't exceed the maximum body length
    if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({
            data: data,
            encoding: encoding
        });
        this._currentRequest.write(data, encoding, callback);
    } else {
        this.emit("error", new MaxBodyLengthExceededError());
        this.abort();
    }
};
// Ends the current native request
RedirectableRequest.prototype.end = function(data, encoding, callback) {
    // Shift parameters if necessary
    if (isFunction(data)) {
        callback = data;
        data = encoding = null;
    } else if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
    }
    // Write data if needed and end
    if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
    } else {
        var self = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function() {
            self._ended = true;
            currentRequest.end(null, null, callback);
        });
        this._ending = true;
    }
};
// Sets a header value on the current native request
RedirectableRequest.prototype.setHeader = function(name, value) {
    this._options.headers[name] = value;
    this._currentRequest.setHeader(name, value);
};
// Clears a header value on the current native request
RedirectableRequest.prototype.removeHeader = function(name) {
    delete this._options.headers[name];
    this._currentRequest.removeHeader(name);
};
// Global timeout for all underlying requests
RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
    var self = this;
    // Destroys the socket on timeout
    function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener("timeout", socket.destroy);
        socket.addListener("timeout", socket.destroy);
    }
    // Sets up a timer to trigger a timeout event
    function startTimer(socket) {
        if (self._timeout) {
            clearTimeout(self._timeout);
        }
        self._timeout = setTimeout(function() {
            self.emit("timeout");
            clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
    }
    // Stops a timeout from triggering
    function clearTimer() {
        // Clear the timeout
        if (self._timeout) {
            clearTimeout(self._timeout);
            self._timeout = null;
        }
        // Clean up all attached listeners
        self.removeListener("abort", clearTimer);
        self.removeListener("error", clearTimer);
        self.removeListener("response", clearTimer);
        if (callback) {
            self.removeListener("timeout", callback);
        }
        if (!self.socket) {
            self._currentRequest.removeListener("socket", startTimer);
        }
    }
    // Attach callback if passed
    if (callback) {
        this.on("timeout", callback);
    }
    // Start the timer if or when the socket is opened
    if (this.socket) {
        startTimer(this.socket);
    } else {
        this._currentRequest.once("socket", startTimer);
    }
    // Clean up on events
    this.on("socket", destroyOnTimeout);
    this.on("abort", clearTimer);
    this.on("error", clearTimer);
    this.on("response", clearTimer);
    return this;
};
// Proxy all other public ClientRequest methods
[
    "flushHeaders",
    "getHeader",
    "setNoDelay",
    "setSocketKeepAlive"
].forEach(function(method) {
    RedirectableRequest.prototype[method] = function(a, b) {
        return this._currentRequest[method](a, b);
    };
});
// Proxy all public ClientRequest properties
[
    "aborted",
    "connection",
    "socket"
].forEach(function(property) {
    Object.defineProperty(RedirectableRequest.prototype, property, {
        get: function() {
            return this._currentRequest[property];
        }
    });
});
RedirectableRequest.prototype._sanitizeOptions = function(options) {
    // Ensure headers are always present
    if (!options.headers) {
        options.headers = {};
    }
    // Since http.request treats host as an alias of hostname,
    // but the url module interprets host as hostname plus port,
    // eliminate the host property to avoid confusion.
    if (options.host) {
        // Use hostname if set, because it has precedence
        if (!options.hostname) {
            options.hostname = options.host;
        }
        delete options.host;
    }
    // Complete the URL object when necessary
    if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf("?");
        if (searchPos < 0) {
            options.pathname = options.path;
        } else {
            options.pathname = options.path.substring(0, searchPos);
            options.search = options.path.substring(searchPos);
        }
    }
};
// Executes the next native request (initial or redirect)
RedirectableRequest.prototype._performRequest = function() {
    // Load the native protocol
    var protocol = this._options.protocol;
    var nativeProtocol = this._options.nativeProtocols[protocol];
    if (!nativeProtocol) {
        this.emit("error", new TypeError("Unsupported protocol " + protocol));
        return;
    }
    // If specified, use the agent corresponding to the protocol
    // (HTTP and HTTPS use different types of agents)
    if (this._options.agents) {
        var scheme = protocol.slice(0, -1);
        this._options.agent = this._options.agents[scheme];
    }
    // Create the native request and set up its event handlers
    var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
    request._redirectable = this;
    for (var event of events){
        request.on(event, eventHandlers[event]);
    }
    // RFC7230§5.3.1: When making a request directly to an origin server, […]
    // a client MUST send only the absolute path […] as the request-target.
    this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) : // When making a request to a proxy, […]
    // a client MUST send the target URI in absolute-form […].
    this._options.path;
    // End a redirected request
    // (The first request must be ended explicitly with RedirectableRequest#end)
    if (this._isRedirect) {
        // Write the request entity and end
        var i = 0;
        var self = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error) {
            // Only write if this request has not been redirected yet
            /* istanbul ignore else */ if (request === self._currentRequest) {
                // Report any write errors
                /* istanbul ignore if */ if (error) {
                    self.emit("error", error);
                } else if (i < buffers.length) {
                    var buffer = buffers[i++];
                    /* istanbul ignore else */ if (!request.finished) {
                        request.write(buffer.data, buffer.encoding, writeNext);
                    }
                } else if (self._ended) {
                    request.end();
                }
            }
        })();
    }
};
// Processes a response from the current native request
RedirectableRequest.prototype._processResponse = function(response) {
    // Store the redirected response
    var statusCode = response.statusCode;
    if (this._options.trackRedirects) {
        this._redirects.push({
            url: this._currentUrl,
            headers: response.headers,
            statusCode: statusCode
        });
    }
    // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
    // that further action needs to be taken by the user agent in order to
    // fulfill the request. If a Location header field is provided,
    // the user agent MAY automatically redirect its request to the URI
    // referenced by the Location field value,
    // even if the specific status code is not understood.
    // If the response is not a redirect; return it as-is
    var location = response.headers.location;
    if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit("response", response);
        // Clean up
        this._requestBodyBuffers = [];
        return;
    }
    // The response is a redirect, so abort the current request
    abortRequest(this._currentRequest);
    // Discard the remainder of the response to avoid waiting for data
    response.destroy();
    // RFC7231§6.4: A client SHOULD detect and intervene
    // in cyclical redirections (i.e., "infinite" redirection loops).
    if (++this._redirectCount > this._options.maxRedirects) {
        this.emit("error", new TooManyRedirectsError());
        return;
    }
    // Store the request headers if applicable
    var requestHeaders;
    var beforeRedirect = this._options.beforeRedirect;
    if (beforeRedirect) {
        requestHeaders = Object.assign({
            // The Host header was set by nativeProtocol.request
            Host: response.req.getHeader("host")
        }, this._options.headers);
    }
    // RFC7231§6.4: Automatic redirection needs to done with
    // care for methods not known to be safe, […]
    // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
    // the request method from POST to GET for the subsequent request.
    var method = this._options.method;
    if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
    // the server is redirecting the user agent to a different resource […]
    // A user agent can perform a retrieval request targeting that URI
    // (a GET or HEAD request if using HTTP) […]
    statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
        this._options.method = "GET";
        // Drop a possible entity and headers related to it
        this._requestBodyBuffers = [];
        removeMatchingHeaders(/^content-/i, this._options.headers);
    }
    // Drop the Host header, as the redirect might lead to a different host
    var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
    // If the redirect is relative, carry over the host of the last request
    var currentUrlParts = url.parse(this._currentUrl);
    var currentHost = currentHostHeader || currentUrlParts.host;
    var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, {
        host: currentHost
    }));
    // Determine the URL of the redirection
    var redirectUrl;
    try {
        redirectUrl = url.resolve(currentUrl, location);
    } catch (cause) {
        this.emit("error", new RedirectionError({
            cause: cause
        }));
        return;
    }
    // Create the redirected request
    debug("redirecting to", redirectUrl);
    this._isRedirect = true;
    var redirectUrlParts = url.parse(redirectUrl);
    Object.assign(this._options, redirectUrlParts);
    // Drop confidential headers when redirecting to a less secure protocol
    // or to a different domain that is not a superdomain
    if (redirectUrlParts.protocol !== currentUrlParts.protocol && redirectUrlParts.protocol !== "https:" || redirectUrlParts.host !== currentHost && !isSubdomain(redirectUrlParts.host, currentHost)) {
        removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
    }
    // Evaluate the beforeRedirect callback
    if (isFunction(beforeRedirect)) {
        var responseDetails = {
            headers: response.headers,
            statusCode: statusCode
        };
        var requestDetails = {
            url: currentUrl,
            method: method,
            headers: requestHeaders
        };
        try {
            beforeRedirect(this._options, responseDetails, requestDetails);
        } catch (err) {
            this.emit("error", err);
            return;
        }
        this._sanitizeOptions(this._options);
    }
    // Perform the redirected request
    try {
        this._performRequest();
    } catch (cause1) {
        this.emit("error", new RedirectionError({
            cause: cause1
        }));
    }
};
// Wraps the key/value object of protocols with redirect functionality
function wrap(protocols) {
    // Default settings
    var exports = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024
    };
    // Wrap each protocol
    var nativeProtocols = {};
    Object.keys(protocols).forEach(function(scheme) {
        var protocol = scheme + ":";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);
        // Executes a request, following redirects
        function request(input, options, callback) {
            // Parse parameters
            if (isString(input)) {
                var parsed;
                try {
                    parsed = urlToOptions(new URL(input));
                } catch (err) {
                    /* istanbul ignore next */ parsed = url.parse(input);
                }
                if (!isString(parsed.protocol)) {
                    throw new InvalidUrlError({
                        input
                    });
                }
                input = parsed;
            } else if (URL && input instanceof URL) {
                input = urlToOptions(input);
            } else {
                callback = options;
                options = input;
                input = {
                    protocol: protocol
                };
            }
            if (isFunction(options)) {
                callback = options;
                options = null;
            }
            // Set defaults
            options = Object.assign({
                maxRedirects: exports.maxRedirects,
                maxBodyLength: exports.maxBodyLength
            }, input, options);
            options.nativeProtocols = nativeProtocols;
            if (!isString(options.host) && !isString(options.hostname)) {
                options.hostname = "::1";
            }
            assert.equal(options.protocol, protocol, "protocol mismatch");
            debug("options", options);
            return new RedirectableRequest(options, callback);
        }
        // Executes a GET request, following redirects
        function get(input, options, callback) {
            var wrappedRequest = wrappedProtocol.request(input, options, callback);
            wrappedRequest.end();
            return wrappedRequest;
        }
        // Expose the properties on the wrapped protocol
        Object.defineProperties(wrappedProtocol, {
            request: {
                value: request,
                configurable: true,
                enumerable: true,
                writable: true
            },
            get: {
                value: get,
                configurable: true,
                enumerable: true,
                writable: true
            }
        });
    });
    return exports;
}
/* istanbul ignore next */ function noop() {}
// from https://github.com/nodejs/node/blob/master/lib/internal/url.js
function urlToOptions(urlObject) {
    var options = {
        protocol: urlObject.protocol,
        hostname: urlObject.hostname.startsWith("[") ? /* istanbul ignore next */ urlObject.hostname.slice(1, -1) : urlObject.hostname,
        hash: urlObject.hash,
        search: urlObject.search,
        pathname: urlObject.pathname,
        path: urlObject.pathname + urlObject.search,
        href: urlObject.href
    };
    if (urlObject.port !== "") {
        options.port = Number(urlObject.port);
    }
    return options;
}
function removeMatchingHeaders(regex, headers) {
    var lastValue;
    for(var header in headers){
        if (regex.test(header)) {
            lastValue = headers[header];
            delete headers[header];
        }
    }
    return lastValue === null || typeof lastValue === "undefined" ? undefined : String(lastValue).trim();
}
function createErrorType(code, message, baseClass) {
    // Create constructor
    function CustomError(properties) {
        Error.captureStackTrace(this, this.constructor);
        Object.assign(this, properties || {});
        this.code = code;
        this.message = this.cause ? message + ": " + this.cause.message : message;
    }
    // Attach constructor and set default properties
    CustomError.prototype = new (baseClass || Error)();
    CustomError.prototype.constructor = CustomError;
    CustomError.prototype.name = "Error [" + code + "]";
    return CustomError;
}
function abortRequest(request) {
    for (var event of events){
        request.removeListener(event, eventHandlers[event]);
    }
    request.on("error", noop);
    request.abort();
}
function isSubdomain(subdomain, domain) {
    assert(isString(subdomain) && isString(domain));
    var dot = subdomain.length - domain.length - 1;
    return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
}
function isString(value) {
    return typeof value === "string" || value instanceof String;
}
function isFunction(value) {
    return typeof value === "function";
}
function isBuffer(value) {
    return typeof value === "object" && "length" in value;
}
// Exports
module.exports = wrap({
    http: http,
    https: https
});
module.exports.wrap = wrap;


/***/ }),

/***/ 9139:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var Readable = (__webpack_require__(5635).Readable);
var inherits = __webpack_require__(4765);
module.exports = from2;
from2.ctor = ctor;
from2.obj = obj;
var Proto = ctor();
function toFunction(list) {
    list = list.slice();
    return function(_, cb) {
        var err = null;
        var item = list.length ? list.shift() : null;
        if (item instanceof Error) {
            err = item;
            item = null;
        }
        cb(err, item);
    };
}
function from2(opts, read) {
    if (typeof opts !== "object" || Array.isArray(opts)) {
        read = opts;
        opts = {};
    }
    var rs = new Proto(opts);
    rs._from = Array.isArray(read) ? toFunction(read) : read || noop;
    return rs;
}
function ctor(opts, read) {
    if (typeof opts === "function") {
        read = opts;
        opts = {};
    }
    opts = defaults(opts);
    inherits(Class, Readable);
    function Class(override) {
        if (!(this instanceof Class)) return new Class(override);
        this._reading = false;
        this._callback = check;
        this.destroyed = false;
        Readable.call(this, override || opts);
        var self = this;
        var hwm = this._readableState.highWaterMark;
        function check(err, data) {
            if (self.destroyed) return;
            if (err) return self.destroy(err);
            if (data === null) return self.push(null);
            self._reading = false;
            if (self.push(data)) self._read(hwm);
        }
    }
    Class.prototype._from = read || noop;
    Class.prototype._read = function(size) {
        if (this._reading || this.destroyed) return;
        this._reading = true;
        this._from(size, this._callback);
    };
    Class.prototype.destroy = function(err) {
        if (this.destroyed) return;
        this.destroyed = true;
        var self = this;
        process.nextTick(function() {
            if (err) self.emit("error", err);
            self.emit("close");
        });
    };
    return Class;
}
function obj(opts, read) {
    if (typeof opts === "function" || Array.isArray(opts)) {
        read = opts;
        opts = {};
    }
    opts = defaults(opts);
    opts.objectMode = true;
    opts.highWaterMark = 16;
    return from2(opts, read);
}
function noop() {}
function defaults(opts) {
    opts = opts || {};
    return opts;
}


/***/ }),

/***/ 7069:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = __webpack_require__(3641);


/***/ }),

/***/ 3641:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const pubsub = __webpack_require__(3057);
const middlewareReducer = __webpack_require__(338);
const processOptions = __webpack_require__(9453);
const validateOptions = __webpack_require__(8144);
const httpRequester = __webpack_require__(5188); // node-request in node, browser-request in browsers
const channelNames = [
    "request",
    "response",
    "progress",
    "error",
    "abort"
];
const middlehooks = [
    "processOptions",
    "validateOptions",
    "interceptRequest",
    "finalizeOptions",
    "onRequest",
    "onResponse",
    "onError",
    "onReturn",
    "onHeaders"
];
module.exports = function createRequester(initMiddleware = [], httpRequest = httpRequester) {
    const loadedMiddleware = [];
    const middleware = middlehooks.reduce((ware, name)=>{
        ware[name] = ware[name] || [];
        return ware;
    }, {
        processOptions: [
            processOptions
        ],
        validateOptions: [
            validateOptions
        ]
    });
    function request(opts) {
        const channels = channelNames.reduce((target, name)=>{
            target[name] = pubsub();
            return target;
        }, {}); // Prepare a middleware reducer that can be reused throughout the lifecycle
        const applyMiddleware = middlewareReducer(middleware); // Parse the passed options
        const options = applyMiddleware("processOptions", opts); // Validate the options
        applyMiddleware("validateOptions", options); // Build a context object we can pass to child handlers
        const context = {
            options,
            channels,
            applyMiddleware
        }; // We need to hold a reference to the current, ongoing request,
        // in order to allow cancellation. In the case of the retry middleware,
        // a new request might be triggered
        let ongoingRequest = null;
        const unsubscribe = channels.request.subscribe((ctx)=>{
            // Let request adapters (node/browser) perform the actual request
            ongoingRequest = httpRequest(ctx, (err, res)=>onResponse(err, res, ctx));
        }); // If we abort the request, prevent further requests from happening,
        // and be sure to cancel any ongoing request (obviously)
        channels.abort.subscribe(()=>{
            unsubscribe();
            if (ongoingRequest) {
                ongoingRequest.abort();
            }
        }); // See if any middleware wants to modify the return value - for instance
        // the promise or observable middlewares
        const returnValue = applyMiddleware("onReturn", channels, context); // If return value has been modified by a middleware, we expect the middleware
        // to publish on the 'request' channel. If it hasn't been modified, we want to
        // trigger it right away
        if (returnValue === channels) {
            channels.request.publish(context);
        }
        return returnValue;
        function onResponse(reqErr, res, ctx) {
            let error = reqErr;
            let response = res; // We're processing non-errors first, in case a middleware converts the
            // response into an error (for instance, status >= 400 == HttpError)
            if (!error) {
                try {
                    response = applyMiddleware("onResponse", res, ctx);
                } catch (err) {
                    response = null;
                    error = err;
                }
            } // Apply error middleware - if middleware return the same (or a different) error,
            // publish as an error event. If we *don't* return an error, assume it has been handled
            error = error && applyMiddleware("onError", error, ctx); // Figure out if we should publish on error/response channels
            if (error) {
                channels.error.publish(error);
            } else if (response) {
                channels.response.publish(response);
            }
        }
    }
    request.use = function use(newMiddleware) {
        if (!newMiddleware) {
            throw new Error("Tried to add middleware that resolved to falsey value");
        }
        if (typeof newMiddleware === "function") {
            throw new Error("Tried to add middleware that was a function. It probably expects you to pass options to it.");
        }
        if (newMiddleware.onReturn && middleware.onReturn.length > 0) {
            throw new Error("Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event");
        }
        middlehooks.forEach((key)=>{
            if (newMiddleware[key]) {
                middleware[key].push(newMiddleware[key]);
            }
        });
        loadedMiddleware.push(newMiddleware);
        return request;
    };
    request.clone = function clone() {
        return createRequester(loadedMiddleware);
    };
    initMiddleware.forEach(request.use);
    return request;
}; //# sourceMappingURL=index.js.map


/***/ }),

/***/ 4784:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const debugIt = __webpack_require__(1258);
const SENSITIVE_HEADERS = [
    "cookie",
    "authorization"
];
const hasOwn = Object.prototype.hasOwnProperty;
const redactKeys = (source, redacted)=>{
    const target = {};
    for(const key in source){
        if (hasOwn.call(source, key)) {
            target[key] = redacted.indexOf(key.toLowerCase()) > -1 ? "<redacted>" : source[key];
        }
    }
    return target;
};
module.exports = (opts = {})=>{
    const verbose = opts.verbose;
    const namespace = opts.namespace || "get-it";
    const defaultLogger = debugIt(namespace);
    const log = opts.log || defaultLogger;
    const shortCircuit = log === defaultLogger && !debugIt.enabled(namespace);
    let requestId = 0;
    return {
        processOptions: (options)=>{
            options.debug = log;
            options.requestId = options.requestId || ++requestId;
            return options;
        },
        onRequest: (event)=>{
            // Short-circuit if not enabled, to save some CPU cycles with formatting stuff
            if (shortCircuit || !event) {
                return event;
            }
            const options = event.options;
            log("[%s] HTTP %s %s", options.requestId, options.method, options.url);
            if (verbose && options.body && typeof options.body === "string") {
                log("[%s] Request body: %s", options.requestId, options.body);
            }
            if (verbose && options.headers) {
                const headers = opts.redactSensitiveHeaders === false ? options.headers : redactKeys(options.headers, SENSITIVE_HEADERS);
                log("[%s] Request headers: %s", options.requestId, JSON.stringify(headers, null, 2));
            }
            return event;
        },
        onResponse: (res, context)=>{
            // Short-circuit if not enabled, to save some CPU cycles with formatting stuff
            if (shortCircuit || !res) {
                return res;
            }
            const reqId = context.options.requestId;
            log("[%s] Response code: %s %s", reqId, res.statusCode, res.statusMessage);
            if (verbose && res.body) {
                log("[%s] Response body: %s", reqId, stringifyBody(res));
            }
            return res;
        },
        onError: (err, context)=>{
            const reqId = context.options.requestId;
            if (!err) {
                log("[%s] Error encountered, but handled by an earlier middleware", reqId);
                return err;
            }
            log("[%s] ERROR: %s", reqId, err.message);
            return err;
        }
    };
};
function stringifyBody(res) {
    const contentType = (res.headers["content-type"] || "").toLowerCase();
    const isJson = contentType.indexOf("application/json") !== -1;
    return isJson ? tryFormat(res.body) : res.body;
} // Attempt pretty-formatting JSON
function tryFormat(body) {
    try {
        const parsed = typeof body === "string" ? JSON.parse(body) : body;
        return JSON.stringify(parsed, null, 2);
    } catch (err) {
        return body;
    }
} //# sourceMappingURL=debug.js.map


/***/ }),

/***/ 9453:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const objectAssign = __webpack_require__(1944);
const urlParse = __webpack_require__(2686);
const isReactNative = typeof navigator === "undefined" ? false : navigator.product === "ReactNative";
const has = Object.prototype.hasOwnProperty;
const defaultOptions = {
    timeout: isReactNative ? 60000 : 120000
};
module.exports = (opts)=>{
    const options = typeof opts === "string" ? objectAssign({
        url: opts
    }, defaultOptions) : objectAssign({}, defaultOptions, opts); // Parse URL into parts
    const url = urlParse(options.url, {}, true // Parse query strings
    ); // Normalize timeouts
    options.timeout = normalizeTimeout(options.timeout); // Shallow-merge (override) existing query params
    if (options.query) {
        url.query = objectAssign({}, url.query, removeUndefined(options.query));
    } // Implicit POST if we have not specified a method but have a body
    options.method = options.body && !options.method ? "POST" : (options.method || "GET").toUpperCase(); // Stringify URL
    options.url = url.toString(stringifyQueryString);
    return options;
};
function stringifyQueryString(obj) {
    const pairs = [];
    for(const key in obj){
        if (has.call(obj, key)) {
            push(key, obj[key]);
        }
    }
    return pairs.length ? pairs.join("&") : "";
    function push(key, val) {
        if (Array.isArray(val)) {
            val.forEach((item)=>push(key, item));
        } else {
            pairs.push([
                key,
                val
            ].map(encodeURIComponent).join("="));
        }
    }
}
function normalizeTimeout(time) {
    if (time === false || time === 0) {
        return false;
    }
    if (time.connect || time.socket) {
        return time;
    }
    const delay = Number(time);
    if (isNaN(delay)) {
        return normalizeTimeout(defaultOptions.timeout);
    }
    return {
        connect: delay,
        socket: delay
    };
}
function removeUndefined(obj) {
    const target = {};
    for(const key in obj){
        if (obj[key] !== undefined) {
            target[key] = obj[key];
        }
    }
    return target;
} //# sourceMappingURL=defaultOptionsProcessor.js.map


/***/ }),

/***/ 8144:
/***/ ((module) => {

"use strict";

const validUrl = /^https?:\/\//i;
module.exports = (options)=>{
    if (!validUrl.test(options.url)) {
        throw new Error(`"${options.url}" is not a valid URL`);
    }
}; //# sourceMappingURL=defaultOptionsValidator.js.map


/***/ }),

/***/ 4174:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const objectAssign = __webpack_require__(1944);
module.exports = (headers, opts = {})=>({
        processOptions: (options)=>{
            const existing = options.headers || {};
            options.headers = opts.override ? objectAssign({}, existing, headers) : objectAssign({}, headers, existing);
            return options;
        }
    }); //# sourceMappingURL=headers.js.map


/***/ }),

/***/ 6643:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const objectAssign = __webpack_require__(1944);
const defaultShouldRetry = __webpack_require__(9774);
const isStream = (stream)=>stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
const retry = (opts = {})=>{
    const maxRetries = opts.maxRetries || 5;
    const retryDelay = opts.retryDelay || getRetryDelay;
    const allowRetry = opts.shouldRetry || defaultShouldRetry;
    return {
        onError: (err, context)=>{
            const options = context.options;
            const max = options.maxRetries || maxRetries;
            const shouldRetry = options.shouldRetry || allowRetry;
            const attemptNumber = options.attemptNumber || 0; // We can't retry if body is a stream, since it'll be drained
            if (isStream(options.body)) {
                return err;
            } // Give up?
            if (!shouldRetry(err, attemptNumber, options) || attemptNumber >= max) {
                return err;
            } // Create a new context with an increased attempt number, so we can exit if we reach a limit
            const newContext = objectAssign({}, context, {
                options: objectAssign({}, options, {
                    attemptNumber: attemptNumber + 1
                })
            }); // Wait a given amount of time before doing the request again
            setTimeout(()=>context.channels.request.publish(newContext), retryDelay(attemptNumber)); // Signal that we've handled the error and that it should not propagate further
            return null;
        }
    };
};
retry.shouldRetry = defaultShouldRetry;
module.exports = retry;
function getRetryDelay(attemptNum) {
    return 100 * Math.pow(2, attemptNum) + Math.random() * 100;
} //# sourceMappingURL=retry.js.map


/***/ }),

/***/ 5188:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = __webpack_require__(5499); //# sourceMappingURL=index.js.map


/***/ }),

/***/ 5499:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/* eslint-disable no-process-env */ const qs = __webpack_require__(3477);
const url = __webpack_require__(7310);
const http = __webpack_require__(3685);
const https = __webpack_require__(5687);
const concat = __webpack_require__(8120);
const follow = __webpack_require__(2934);
const timedOut = __webpack_require__(1102);
const isStream = __webpack_require__(2509);
const toStream = __webpack_require__(1999);
const objectAssign = __webpack_require__(1944);
const progressStream = __webpack_require__(6521);
const decompressResponse = __webpack_require__(4167);
const { getProxyOptions , rewriteUriForProxy  } = __webpack_require__(2979);
const tunneling = __webpack_require__(4250);
const adapter = "node"; // Reduce a fully fledged node-style response object to
// something that works in both browser and node environment
const reduceResponse = (res, reqUrl, method, body)=>({
        body,
        url: reqUrl,
        method: method,
        headers: res.headers,
        statusCode: res.statusCode,
        statusMessage: res.statusMessage
    });
module.exports = (context, cb)=>{
    const options = context.options;
    const uri = objectAssign({}, url.parse(options.url));
    const bodyType = isStream(options.body) ? "stream" : typeof options.body;
    if (bodyType !== "undefined" && bodyType !== "stream" && bodyType !== "string" && !Buffer.isBuffer(options.body)) {
        throw new Error(`Request body must be a string, buffer or stream, got ${bodyType}`);
    }
    const lengthHeader = {};
    if (options.bodySize) {
        lengthHeader["content-length"] = options.bodySize;
    } else if (options.body && bodyType !== "stream") {
        lengthHeader["content-length"] = Buffer.byteLength(options.body);
    } // Make sure callback is not called in the event of a cancellation
    let aborted = false;
    const callback = (err, res)=>!aborted && cb(err, res);
    context.channels.abort.subscribe(()=>{
        aborted = true;
    }); // Create a reduced subset of options meant for the http.request() method
    let reqOpts = objectAssign({}, uri, {
        method: options.method,
        headers: objectAssign({}, lowerCaseHeaders(options.headers), lengthHeader),
        maxRedirects: options.maxRedirects
    }); // Figure out proxying/tunnel options
    const proxy = getProxyOptions(options);
    const tunnel = proxy && tunneling.shouldEnable(options); // Allow middleware to inject a response, for instance in the case of caching or mocking
    const injectedResponse = context.applyMiddleware("interceptRequest", undefined, {
        adapter,
        context
    }); // If middleware injected a response, treat it as we normally would and return it
    // Do note that the injected response has to be reduced to a cross-environment friendly response
    if (injectedResponse) {
        const cbTimer = setImmediate(callback, null, injectedResponse);
        const abort = ()=>clearImmediate(cbTimer);
        return {
            abort
        };
    } // We're using the follow-redirects module to transparently follow redirects
    if (options.maxRedirects !== 0) {
        reqOpts.maxRedirects = options.maxRedirects || 5;
    } // Apply currect options for proxy tunneling, if enabled
    if (proxy && tunnel) {
        reqOpts = tunneling.applyAgent(reqOpts, proxy);
    } else if (proxy && !tunnel) {
        reqOpts = rewriteUriForProxy(reqOpts, uri, proxy);
    } // Handle proxy authorization if present
    if (!tunnel && proxy && proxy.auth && !reqOpts.headers["proxy-authorization"]) {
        const [username, password] = proxy.auth.username ? [
            proxy.auth.username,
            proxy.auth.password
        ] : proxy.auth.split(":").map((item)=>qs.unescape(item));
        const auth = Buffer.from(`${username}:${password}`, "utf8");
        const authBase64 = auth.toString("base64");
        reqOpts.headers["proxy-authorization"] = `Basic ${authBase64}`;
    } // Figure out transport (http/https, forwarding/non-forwarding agent)
    const transport = getRequestTransport(reqOpts, proxy, tunnel);
    if (typeof options.debug === "function" && proxy) {
        options.debug("Proxying using %s", reqOpts.agent ? "tunnel agent" : `${reqOpts.host}:${reqOpts.port}`);
    } // See if we should try to request a compressed response (and decompress on return)
    const tryCompressed = reqOpts.method !== "HEAD";
    if (tryCompressed && !reqOpts.headers["accept-encoding"] && options.compress !== false) {
        reqOpts.headers["accept-encoding"] = "br, gzip, deflate";
    }
    const finalOptions = context.applyMiddleware("finalizeOptions", reqOpts);
    const request = transport.request(finalOptions, (response)=>{
        const res = tryCompressed ? decompressResponse(response) : response;
        const resStream = context.applyMiddleware("onHeaders", res, {
            headers: response.headers,
            adapter,
            context
        }); // On redirects, `responseUrl` is set
        const reqUrl = response.responseUrl || options.url;
        if (options.stream) {
            callback(null, reduceResponse(res, reqUrl, reqOpts.method, resStream));
            return;
        } // Concatenate the response body, then parse the response with middlewares
        concat(resStream, (err, data)=>{
            if (err) {
                return callback(err);
            }
            const body = options.rawBody ? data : data.toString();
            const reduced = reduceResponse(res, reqUrl, reqOpts.method, body);
            return callback(null, reduced);
        });
    });
    if (options.timeout) {
        timedOut(request, options.timeout);
    }
    request.once("error", callback); // Cheating a bit here; since we're not concerned about the "bundle size" in node,
    // and modifying the body stream would be sorta tricky, we're just always going
    // to put a progress stream in the middle here. Note that
    const { bodyStream , progress  } = getProgressStream(options); // Let middleware know we're about to do a request
    context.applyMiddleware("onRequest", {
        options,
        adapter,
        request,
        context,
        progress
    });
    if (bodyStream) {
        bodyStream.pipe(request);
    } else {
        request.end(options.body);
    }
    return {
        abort: ()=>request.abort()
    };
};
function getProgressStream(options) {
    if (!options.body) {
        return {};
    }
    const bodyIsStream = isStream(options.body);
    const length = options.bodySize || (bodyIsStream ? null : Buffer.byteLength(options.body));
    if (!length) {
        return bodyIsStream ? {
            bodyStream: options.body
        } : {};
    }
    const progress = progressStream({
        time: 16,
        length
    });
    const bodyStream = bodyIsStream ? options.body : toStream(options.body);
    return {
        bodyStream: bodyStream.pipe(progress),
        progress
    };
}
function getRequestTransport(reqOpts, proxy, tunnel) {
    const isHttpsRequest = reqOpts.protocol === "https:";
    const transports = reqOpts.maxRedirects === 0 ? {
        http: http,
        https: https
    } : {
        http: follow.http,
        https: follow.https
    };
    if (!proxy || tunnel) {
        return isHttpsRequest ? transports.https : transports.http;
    } // Assume the proxy is an HTTPS proxy if port is 443, or if there is a
    // `protocol` option set that starts with https
    let isHttpsProxy = proxy.port === 443;
    if (proxy.protocol) {
        isHttpsProxy = /^https:?/.test(proxy.protocol);
    }
    return isHttpsProxy ? transports.https : transports.http;
}
function lowerCaseHeaders(headers) {
    return Object.keys(headers || {}).reduce((acc, header)=>{
        acc[header.toLowerCase()] = headers[header];
        return acc;
    }, {});
} //# sourceMappingURL=node-request.js.map


/***/ }),

/***/ 2979:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Code borrowed from https://github.com/request/request
 * Apache License 2.0
 */ /* eslint-disable no-process-env */ const url = __webpack_require__(7310);
const objectAssign = __webpack_require__(1944);
function formatHostname(hostname) {
    // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'
    return hostname.replace(/^\.*/, ".").toLowerCase();
}
function parseNoProxyZone(zoneStr) {
    const zone = zoneStr.trim().toLowerCase();
    const zoneParts = zone.split(":", 2);
    const zoneHost = formatHostname(zoneParts[0]);
    const zonePort = zoneParts[1];
    const hasPort = zone.indexOf(":") > -1;
    return {
        hostname: zoneHost,
        port: zonePort,
        hasPort: hasPort
    };
}
function uriInNoProxy(uri, noProxy) {
    const port = uri.port || (uri.protocol === "https:" ? "443" : "80");
    const hostname = formatHostname(uri.hostname);
    const noProxyList = noProxy.split(","); // iterate through the noProxyList until it finds a match.
    return noProxyList.map(parseNoProxyZone).some((noProxyZone)=>{
        const isMatchedAt = hostname.indexOf(noProxyZone.hostname);
        const hostnameMatched = isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length;
        if (noProxyZone.hasPort) {
            return port === noProxyZone.port && hostnameMatched;
        }
        return hostnameMatched;
    });
}
function getProxyFromUri(uri) {
    // Decide the proper request proxy to use based on the request URI object and the
    // environmental variables (NO_PROXY, HTTP_PROXY, etc.)
    // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)
    const noProxy = process.env.NO_PROXY || process.env.no_proxy || ""; // if the noProxy is a wildcard then return null
    if (noProxy === "*") {
        return null;
    } // if the noProxy is not empty and the uri is found return null
    if (noProxy !== "" && uriInNoProxy(uri, noProxy)) {
        return null;
    } // Check for HTTP or HTTPS Proxy in environment, else default to null
    if (uri.protocol === "http:") {
        return process.env.HTTP_PROXY || process.env.http_proxy || null;
    }
    if (uri.protocol === "https:") {
        return process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null;
    } // if none of that works, return null
    // (What uri protocol are you using then?)
    return null;
}
function getHostFromUri(uri) {
    let host = uri.host; // Drop :port suffix from Host header if known protocol.
    if (uri.port) {
        if (uri.port === "80" && uri.protocol === "http:" || uri.port === "443" && uri.protocol === "https:") {
            host = uri.hostname;
        }
    }
    return host;
}
function getHostHeaderWithPort(uri) {
    const port = uri.port || (uri.protocol === "https:" ? "443" : "80");
    return `${uri.hostname}:${port}`;
}
function rewriteUriForProxy(reqOpts, uri, proxy) {
    const headers = reqOpts.headers || {};
    const options = objectAssign({}, reqOpts, {
        headers
    });
    headers.host = headers.host || getHostHeaderWithPort(uri);
    options.protocol = proxy.protocol || options.protocol;
    options.hostname = proxy.host.replace(/:\d+/, "");
    options.port = proxy.port;
    options.host = getHostFromUri(objectAssign({}, uri, proxy));
    options.href = `${options.protocol}//${options.host}${options.path}`;
    options.path = url.format(uri);
    return options;
}
function getProxyOptions(options) {
    let proxy;
    if (options.hasOwnProperty("proxy")) {
        proxy = options.proxy;
    } else {
        const uri = url.parse(options.url);
        proxy = getProxyFromUri(uri);
    }
    return typeof proxy === "string" ? url.parse(proxy) : proxy;
}
exports.rewriteUriForProxy = rewriteUriForProxy;
exports.getProxyOptions = getProxyOptions; //# sourceMappingURL=proxy.js.map


/***/ }),

/***/ 4250:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Code borrowed from https://github.com/request/request
 * Modified to be less request-specific, more functional
 * Apache License 2.0
 */ const url = __webpack_require__(7310);
const tunnel = __webpack_require__(6869);
const objectAssign = __webpack_require__(1944);
const uriParts = [
    "protocol",
    "slashes",
    "auth",
    "host",
    "port",
    "hostname",
    "hash",
    "search",
    "query",
    "pathname",
    "path",
    "href"
];
const defaultProxyHeaderWhiteList = [
    "accept",
    "accept-charset",
    "accept-encoding",
    "accept-language",
    "accept-ranges",
    "cache-control",
    "content-encoding",
    "content-language",
    "content-location",
    "content-md5",
    "content-range",
    "content-type",
    "connection",
    "date",
    "expect",
    "max-forwards",
    "pragma",
    "referer",
    "te",
    "user-agent",
    "via"
];
const defaultProxyHeaderExclusiveList = [
    "proxy-authorization"
];
exports.shouldEnable = (options, tunnelOption)=>{
    // Tunnel HTTPS by default. Allow the user to override this setting.
    // If user has specified a specific tunnel override...
    if (typeof options.tunnel !== "undefined") {
        return Boolean(options.tunnel);
    } // If the destination is HTTPS, tunnel.
    const uri = url.parse(options.url);
    if (uri.protocol === "https:") {
        return true;
    } // Otherwise, do not use tunnel.
    return false;
};
exports.applyAgent = (opts = {}, proxy)=>{
    const options = objectAssign({}, opts); // Setup proxy header exclusive list and whitelist
    const proxyHeaderWhiteList = defaultProxyHeaderWhiteList.concat(options.proxyHeaderWhiteList || []).map((header)=>header.toLowerCase());
    const proxyHeaderExclusiveList = defaultProxyHeaderExclusiveList.concat(options.proxyHeaderExclusiveList || []).map((header)=>header.toLowerCase()); // Get the headers we should send to the proxy
    const proxyHeaders = getAllowedProxyHeaders(options.headers, proxyHeaderWhiteList);
    proxyHeaders.host = constructProxyHost(options); // Reduce headers to the ones not exclusive for the proxy
    options.headers = Object.keys(options.headers || {}).reduce((headers, header)=>{
        const isAllowed = proxyHeaderExclusiveList.indexOf(header.toLowerCase()) === -1;
        if (isAllowed) {
            headers[header] = options.headers[header];
        }
        return headers;
    }, {});
    const tunnelFn = getTunnelFn(options, proxy);
    const tunnelOptions = constructTunnelOptions(options, proxy, proxyHeaders);
    options.agent = tunnelFn(tunnelOptions);
    return options;
};
function getTunnelFn(options, proxy) {
    const uri = getUriParts(options);
    const tunnelFnName = constructTunnelFnName(uri, proxy);
    return tunnel[tunnelFnName];
}
function getUriParts(options) {
    return uriParts.reduce((uri, part)=>{
        uri[part] = options[part];
        return uri;
    }, {});
}
function constructTunnelFnName(uri, proxy) {
    const uriProtocol = uri.protocol === "https:" ? "https" : "http";
    const proxyProtocol = proxy.protocol === "https:" ? "Https" : "Http";
    return [
        uriProtocol,
        proxyProtocol
    ].join("Over");
}
function constructProxyHost(uri) {
    const port = uri.port;
    const protocol = uri.protocol;
    let proxyHost = `${uri.hostname}:`;
    if (port) {
        proxyHost += port;
    } else if (protocol === "https:") {
        proxyHost += "443";
    } else {
        proxyHost += "80";
    }
    return proxyHost;
}
function getAllowedProxyHeaders(headers, whiteList) {
    return Object.keys(headers).filter((header)=>whiteList.indexOf(header.toLowerCase()) !== -1).reduce((set, header)=>{
        set[header] = headers[header];
        return set;
    }, {});
}
function constructTunnelOptions(options, proxy, proxyHeaders) {
    return {
        proxy: {
            host: proxy.hostname,
            port: +proxy.port,
            proxyAuth: proxy.auth,
            headers: proxyHeaders
        },
        headers: options.headers,
        ca: options.ca,
        cert: options.cert,
        key: options.key,
        passphrase: options.passphrase,
        pfx: options.pfx,
        ciphers: options.ciphers,
        rejectUnauthorized: options.rejectUnauthorized,
        secureOptions: options.secureOptions,
        secureProtocol: options.secureProtocol
    };
} //# sourceMappingURL=tunnel.js.map


/***/ }),

/***/ 338:
/***/ ((module) => {

"use strict";

module.exports = (middleware)=>{
    const applyMiddleware = (hook, defaultValue, ...args)=>{
        const bailEarly = hook === "onError";
        let value = defaultValue;
        for(let i = 0; i < middleware[hook].length; i++){
            const handler = middleware[hook][i];
            value = handler(value, ...args);
            if (bailEarly && !value) {
                break;
            }
        }
        return value;
    };
    return applyMiddleware;
}; //# sourceMappingURL=middlewareReducer.js.map


/***/ }),

/***/ 9774:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const allowed = __webpack_require__(1327);
module.exports = (err, num, options)=>{
    if (options.method !== "GET" && options.method !== "HEAD") {
        return false;
    } // Don't allow retries if we get any http status code by default
    if (err.response && err.response.statusCode) {
        return false;
    }
    return allowed(err);
}; //# sourceMappingURL=node-shouldRetry.js.map


/***/ }),

/***/ 1965:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
}
var objectAssign = __webpack_require__(1944);
var isPlainObject = __webpack_require__(3037);
var serializeTypes = [
    "boolean",
    "string",
    "number"
];
var isBuffer = function isBuffer(obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
};
module.exports = function() {
    return {
        processOptions: function processOptions(options) {
            var body = options.body;
            if (!body) {
                return options;
            }
            var isStream = typeof body.pipe === "function";
            var shouldSerialize = !isStream && !isBuffer(body) && (serializeTypes.indexOf(_typeof(body)) !== -1 || Array.isArray(body) || isPlainObject(body));
            if (!shouldSerialize) {
                return options;
            }
            return objectAssign({}, options, {
                body: JSON.stringify(options.body),
                headers: objectAssign({}, options.headers, {
                    "Content-Type": "application/json"
                })
            });
        }
    };
}; //# sourceMappingURL=jsonRequest.js.map


/***/ }),

/***/ 6537:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var objectAssign = __webpack_require__(1944);
module.exports = function(opts) {
    return {
        onResponse: function onResponse(response) {
            var contentType = response.headers["content-type"] || "";
            var shouldDecode = opts && opts.force || contentType.indexOf("application/json") !== -1;
            if (!response.body || !contentType || !shouldDecode) {
                return response;
            }
            return objectAssign({}, response, {
                body: tryParse(response.body)
            });
        },
        processOptions: function processOptions(options) {
            return objectAssign({}, options, {
                headers: objectAssign({
                    Accept: "application/json"
                }, options.headers)
            });
        }
    };
};
function tryParse(body) {
    try {
        return JSON.parse(body);
    } catch (err) {
        err.message = "Failed to parsed response body as JSON: ".concat(err.message);
        throw err;
    }
} //# sourceMappingURL=jsonResponse.js.map


/***/ }),

/***/ 5092:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var global = __webpack_require__(4634);
var objectAssign = __webpack_require__(1944);
module.exports = function() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var Observable = opts.implementation || global.Observable;
    if (!Observable) {
        throw new Error("`Observable` is not available in global scope, and no implementation was passed");
    }
    return {
        onReturn: function onReturn(channels, context) {
            return new Observable(function(observer) {
                channels.error.subscribe(function(err) {
                    return observer.error(err);
                });
                channels.progress.subscribe(function(event) {
                    return observer.next(objectAssign({
                        type: "progress"
                    }, event));
                });
                channels.response.subscribe(function(response) {
                    observer.next(objectAssign({
                        type: "response"
                    }, response));
                    observer.complete();
                });
                channels.request.publish(context);
                return function() {
                    return channels.abort.publish();
                };
            });
        }
    };
}; //# sourceMappingURL=observable.js.map


/***/ }),

/***/ 5646:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = __webpack_require__(8369); //# sourceMappingURL=index.js.map


/***/ }),

/***/ 8369:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var progressStream = __webpack_require__(6521);
function normalizer(stage) {
    return function(prog) {
        return {
            stage: stage,
            percent: prog.percentage,
            total: prog.length,
            loaded: prog.transferred,
            lengthComputable: !(prog.length === 0 && prog.percentage === 0)
        };
    };
}
module.exports = function() {
    return {
        onHeaders: function onHeaders(response, evt) {
            var progress = progressStream({
                time: 16
            });
            var normalize = normalizer("download"); // This is supposed to be handled automatically, but it has a bug,
            // see https://github.com/freeall/progress-stream/pull/22
            var contentLength = response.headers["content-length"];
            var length = contentLength && Number(contentLength);
            if (!isNaN(length) && length > 0) {
                progress.setLength(length);
            }
            progress.on("progress", function(prog) {
                return evt.context.channels.progress.publish(normalize(prog));
            });
            return response.pipe(progress);
        },
        onRequest: function onRequest(evt) {
            if (!evt.progress) {
                return;
            }
            var normalize = normalizer("upload");
            evt.progress.on("progress", function(prog) {
                return evt.context.channels.progress.publish(normalize(prog));
            });
        }
    };
}; //# sourceMappingURL=node-progress.js.map


/***/ }),

/***/ 4634:
/***/ ((module) => {

"use strict";

/* global globalThis */ /* eslint-disable no-negated-condition */ if (typeof globalThis !== "undefined") {
    module.exports = globalThis;
} else if (false) {} else if (typeof global !== "undefined") {
    module.exports = global;
} else if (typeof self !== "undefined") {
    module.exports = self;
} else {
    module.exports = {};
} //# sourceMappingURL=global.js.map


/***/ }),

/***/ 7132:
/***/ ((module, exports, __webpack_require__) => {

"use strict";
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */ 
exports = module.exports = __webpack_require__(7451);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = "undefined" != typeof chrome && "undefined" != typeof chrome.storage ? chrome.storage.local : localstorage();
/**
 * Colors.
 */ exports.colors = [
    "lightseagreen",
    "forestgreen",
    "goldenrod",
    "dodgerblue",
    "darkorchid",
    "crimson"
];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */ function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (false) {}
    // is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
     false && (0) || // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
    typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */ exports.formatters.j = function(v) {
    try {
        return JSON.stringify(v);
    } catch (err) {
        return "[UnexpectedJSONParseError]: " + err.message;
    }
};
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    var useColors = this.useColors;
    args[0] = (useColors ? "%c" : "") + this.namespace + (useColors ? " %c" : " ") + args[0] + (useColors ? "%c " : " ") + "+" + exports.humanize(this.diff);
    if (!useColors) return;
    var c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    // the final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
        if ("%%" === match) return;
        index++;
        if ("%c" === match) {
            // we only are interested in the *last* %c
            // (the user may have provided their own)
            lastC = index;
        }
    });
    args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */ function log() {
    // this hackery is required for IE8/9, where
    // the `console.log` function doesn't have 'apply'
    return "object" === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    try {
        if (null == namespaces) {
            exports.storage.removeItem("debug");
        } else {
            exports.storage.debug = namespaces;
        }
    } catch (e) {}
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    var r;
    try {
        r = exports.storage.debug;
    } catch (e) {}
    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
    }
    return r;
}
/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */ exports.enable(load());
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */ function localstorage() {
    try {
        return window.localStorage;
    } catch (e) {}
}


/***/ }),

/***/ 7451:
/***/ ((module, exports, __webpack_require__) => {

"use strict";
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */ 
exports = module.exports = createDebug.debug = createDebug["default"] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(7366);
/**
 * The currently active debug mode names, and names to skip.
 */ exports.names = [];
exports.skips = [];
/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */ exports.formatters = {};
/**
 * Previous log timestamp.
 */ var prevTime;
/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */ function selectColor(namespace) {
    var hash = 0, i;
    for(i in namespace){
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0; // Convert to 32bit integer
    }
    return exports.colors[Math.abs(hash) % exports.colors.length];
}
/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */ function createDebug(namespace) {
    function debug() {
        // disabled?
        if (!debug.enabled) return;
        var self = debug;
        // set `diff` timestamp
        var curr = +new Date();
        var ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr;
        // turn the `arguments` into a proper Array
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++){
            args[i] = arguments[i];
        }
        args[0] = exports.coerce(args[0]);
        if ("string" !== typeof args[0]) {
            // anything else let's inspect with %O
            args.unshift("%O");
        }
        // apply any `formatters` transformations
        var index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
            // if we encounter an escaped % then don't increase the array index
            if (match === "%%") return match;
            index++;
            var formatter = exports.formatters[format];
            if ("function" === typeof formatter) {
                var val = args[index];
                match = formatter.call(self, val);
                // now we need to remove `args[index]` since it's inlined in the `format`
                args.splice(index, 1);
                index--;
            }
            return match;
        });
        // apply env-specific formatting (colors, etc.)
        exports.formatArgs.call(self, args);
        var logFn = debug.log || exports.log || console.log.bind(console);
        logFn.apply(self, args);
    }
    debug.namespace = namespace;
    debug.enabled = exports.enabled(namespace);
    debug.useColors = exports.useColors();
    debug.color = selectColor(namespace);
    // env-specific initialization logic for debug instances
    if ("function" === typeof exports.init) {
        exports.init(debug);
    }
    return debug;
}
/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */ function enable(namespaces) {
    exports.save(namespaces);
    exports.names = [];
    exports.skips = [];
    var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
    var len = split.length;
    for(var i = 0; i < len; i++){
        if (!split[i]) continue; // ignore empty strings
        namespaces = split[i].replace(/\*/g, ".*?");
        if (namespaces[0] === "-") {
            exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
        } else {
            exports.names.push(new RegExp("^" + namespaces + "$"));
        }
    }
}
/**
 * Disable debug output.
 *
 * @api public
 */ function disable() {
    exports.enable("");
}
/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */ function enabled(name) {
    var i, len;
    for(i = 0, len = exports.skips.length; i < len; i++){
        if (exports.skips[i].test(name)) {
            return false;
        }
    }
    for(i = 0, len = exports.names.length; i < len; i++){
        if (exports.names[i].test(name)) {
            return true;
        }
    }
    return false;
}
/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */ function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
}


/***/ }),

/***/ 1258:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Detect Electron renderer process, which is node, but we should
 * treat as a browser.
 */ 
if (typeof process !== "undefined" && process.type === "renderer") {
    module.exports = __webpack_require__(7132);
} else {
    module.exports = __webpack_require__(9548);
}


/***/ }),

/***/ 9548:
/***/ ((module, exports, __webpack_require__) => {

"use strict";
/**
 * Module dependencies.
 */ 
var tty = __webpack_require__(6224);
var util = __webpack_require__(3849);
/**
 * This is the Node.js implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */ exports = module.exports = __webpack_require__(7451);
exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
/**
 * Colors.
 */ exports.colors = [
    6,
    2,
    3,
    4,
    5,
    1
];
/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */ exports.inspectOpts = Object.keys(process.env).filter(function(key) {
    return /^debug_/i.test(key);
}).reduce(function(obj, key) {
    // camel-case
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
        return k.toUpperCase();
    });
    // coerce string value into JS value
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
    else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
    else if (val === "null") val = null;
    else val = Number(val);
    obj[prop] = val;
    return obj;
}, {});
/**
 * The file descriptor to write the `debug()` calls to.
 * Set the `DEBUG_FD` env variable to override with another value. i.e.:
 *
 *   $ DEBUG_FD=3 node script.js 3>debug.log
 */ var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
if (1 !== fd && 2 !== fd) {
    util.deprecate(function() {}, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
}
var stream = 1 === fd ? process.stdout : 2 === fd ? process.stderr : createWritableStdioStream(fd);
/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */ function useColors() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
}
/**
 * Map %o to `util.inspect()`, all on a single line.
 */ exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
        return str.trim();
    }).join(" ");
};
/**
 * Map %o to `util.inspect()`, allowing multiple lines if needed.
 */ exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
};
/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    var name = this.namespace;
    var useColors = this.useColors;
    if (useColors) {
        var c = this.color;
        var prefix = "  \x1b[3" + c + ";1m" + name + " " + "\x1b[0m";
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push("\x1b[3" + c + "m+" + exports.humanize(this.diff) + "\x1b[0m");
    } else {
        args[0] = new Date().toUTCString() + " " + name + " " + args[0];
    }
}
/**
 * Invokes `util.format()` with the specified arguments and writes to `stream`.
 */ function log() {
    return stream.write(util.format.apply(util, arguments) + "\n");
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    if (null == namespaces) {
        // If you set a process.env field to null or undefined, it gets cast to the
        // string 'null' or 'undefined'. Just delete instead.
        delete process.env.DEBUG;
    } else {
        process.env.DEBUG = namespaces;
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    return process.env.DEBUG;
}
/**
 * Copied from `node/src/node.js`.
 *
 * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
 * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
 */ function createWritableStdioStream(fd) {
    var stream;
    var tty_wrap = process.binding("tty_wrap");
    // Note stream._type is used for test-module-load-list.js
    switch(tty_wrap.guessHandleType(fd)){
        case "TTY":
            stream = new tty.WriteStream(fd);
            stream._type = "tty";
            // Hack to have stream not keep the event loop alive.
            // See https://github.com/joyent/node/issues/1726
            if (stream._handle && stream._handle.unref) {
                stream._handle.unref();
            }
            break;
        case "FILE":
            var fs = __webpack_require__(7147);
            stream = new fs.SyncWriteStream(fd, {
                autoClose: false
            });
            stream._type = "fs";
            break;
        case "PIPE":
        case "TCP":
            var net = __webpack_require__(1808);
            stream = new net.Socket({
                fd: fd,
                readable: false,
                writable: true
            });
            // FIXME Should probably have an option in net.Socket to create a
            // stream from an existing fd which is writable only. But for now
            // we'll just add this hack and set the `readable` member to false.
            // Test: ./node test/fixtures/echo.js < /etc/passwd
            stream.readable = false;
            stream.read = null;
            stream._type = "pipe";
            // FIXME Hack to have stream not keep the event loop alive.
            // See https://github.com/joyent/node/issues/1726
            if (stream._handle && stream._handle.unref) {
                stream._handle.unref();
            }
            break;
        default:
            // Probably an error on in uv_guess_handle()
            throw new Error("Implement me. Unknown stream file type!");
    }
    // For supporting legacy API we put the FD here.
    stream.fd = fd;
    stream._isStdio = true;
    return stream;
}
/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */ function init(debug) {
    debug.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);
    for(var i = 0; i < keys.length; i++){
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
}
/**
 * Enable namespaces listed in `process.env.DEBUG` initially.
 */ exports.enable(load());


/***/ }),

/***/ 7366:
/***/ ((module) => {

"use strict";
/**
 * Helpers.
 */ 
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */ module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
        return parse(val);
    } else if (type === "number" && isNaN(val) === false) {
        return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */ function parse(str) {
    str = String(str);
    if (str.length > 100) {
        return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
        return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch(type){
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
            return n * y;
        case "days":
        case "day":
        case "d":
            return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
            return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
            return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
            return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
            return n;
        default:
            return undefined;
    }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtShort(ms) {
    if (ms >= d) {
        return Math.round(ms / d) + "d";
    }
    if (ms >= h) {
        return Math.round(ms / h) + "h";
    }
    if (ms >= m) {
        return Math.round(ms / m) + "m";
    }
    if (ms >= s) {
        return Math.round(ms / s) + "s";
    }
    return ms + "ms";
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtLong(ms) {
    return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
}
/**
 * Pluralization helper.
 */ function plural(ms, n, name) {
    if (ms < n) {
        return;
    }
    if (ms < n * 1.5) {
        return Math.floor(ms / n) + " " + name;
    }
    return Math.ceil(ms / n) + " " + name + "s";
}


/***/ }),

/***/ 8061:
/***/ ((module) => {

"use strict";

/* eslint-disable @typescript-eslint/no-var-requires */ module.exports = function groq(strings) {
    for(var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        keys[_key - 1] = arguments[_key];
    }
    var lastIndex = strings.length - 1;
    return strings.slice(0, lastIndex).reduce(function(acc, str, i) {
        return acc + str + keys[i];
    }, "") + strings[lastIndex];
};


/***/ }),

/***/ 1670:
/***/ ((module) => {

"use strict";

module.exports = (flag, argv = process.argv)=>{
    const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
    const position = argv.indexOf(prefix + flag);
    const terminatorPosition = argv.indexOf("--");
    return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
};


/***/ }),

/***/ 4765:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

try {
    var util = __webpack_require__(3849);
    /* istanbul ignore next */ if (typeof util.inherits !== "function") throw "";
    module.exports = util.inherits;
} catch (e) {
    /* istanbul ignore next */ module.exports = __webpack_require__(3539);
}


/***/ }),

/***/ 3539:
/***/ ((module) => {

"use strict";

if (typeof Object.create === "function") {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                    value: ctor,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
        }
    };
} else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {};
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
        }
    };
}


/***/ }),

/***/ 1999:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const from = __webpack_require__(9139);
const pIsPromise = __webpack_require__(8134);
module.exports = (x)=>{
    if (Array.isArray(x)) {
        x = x.slice();
    }
    let promise;
    let iterator;
    prepare(x);
    function prepare(value) {
        x = value;
        promise = pIsPromise(x) ? x : null;
        // we don't iterate on strings and buffers since slicing them is ~7x faster
        const shouldIterate = !promise && x[Symbol.iterator] && typeof x !== "string" && !Buffer.isBuffer(x);
        iterator = shouldIterate ? x[Symbol.iterator]() : null;
    }
    return from(function reader(size, cb) {
        if (promise) {
            promise.then(prepare).then(()=>reader.call(this, size, cb), cb);
            return;
        }
        if (iterator) {
            const obj = iterator.next();
            setImmediate(cb, null, obj.done ? null : obj.value);
            return;
        }
        if (x.length === 0) {
            setImmediate(cb, null, null);
            return;
        }
        const chunk = x.slice(0, size);
        x = x.slice(size);
        setImmediate(cb, null, chunk);
    });
};
module.exports.obj = (x)=>{
    if (Array.isArray(x)) {
        x = x.slice();
    }
    let promise;
    let iterator;
    prepare(x);
    function prepare(value) {
        x = value;
        promise = pIsPromise(x) ? x : null;
        iterator = !promise && x[Symbol.iterator] ? x[Symbol.iterator]() : null;
    }
    return from.obj(function reader(size, cb) {
        if (promise) {
            promise.then(prepare).then(()=>reader.call(this, size, cb), cb);
            return;
        }
        if (iterator) {
            const obj = iterator.next();
            setImmediate(cb, null, obj.done ? null : obj.value);
            return;
        }
        this.push(x);
        setImmediate(cb, null, null);
    });
};


/***/ }),

/***/ 3037:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */ 
var isObject = __webpack_require__(6264);
function isObjectObject(o) {
    return isObject(o) === true && Object.prototype.toString.call(o) === "[object Object]";
}
module.exports = function isPlainObject(o) {
    var ctor, prot;
    if (isObjectObject(o) === false) return false;
    // If has modified constructor
    ctor = o.constructor;
    if (typeof ctor !== "function") return false;
    // If has modified prototype
    prot = ctor.prototype;
    if (isObjectObject(prot) === false) return false;
    // If constructor does not have an Object-specific method
    if (prot.hasOwnProperty("isPrototypeOf") === false) {
        return false;
    }
    // Most likely a plain Object
    return true;
};


/***/ }),

/***/ 1327:
/***/ ((module) => {

"use strict";

var WHITELIST = [
    "ETIMEDOUT",
    "ECONNRESET",
    "EADDRINUSE",
    "ESOCKETTIMEDOUT",
    "ECONNREFUSED",
    "EPIPE",
    "EHOSTUNREACH",
    "EAI_AGAIN"
];
var BLACKLIST = [
    "ENOTFOUND",
    "ENETUNREACH",
    // SSL errors from https://github.com/nodejs/node/blob/ed3d8b13ee9a705d89f9e0397d9e96519e7e47ac/src/node_crypto.cc#L1950
    "UNABLE_TO_GET_ISSUER_CERT",
    "UNABLE_TO_GET_CRL",
    "UNABLE_TO_DECRYPT_CERT_SIGNATURE",
    "UNABLE_TO_DECRYPT_CRL_SIGNATURE",
    "UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY",
    "CERT_SIGNATURE_FAILURE",
    "CRL_SIGNATURE_FAILURE",
    "CERT_NOT_YET_VALID",
    "CERT_HAS_EXPIRED",
    "CRL_NOT_YET_VALID",
    "CRL_HAS_EXPIRED",
    "ERROR_IN_CERT_NOT_BEFORE_FIELD",
    "ERROR_IN_CERT_NOT_AFTER_FIELD",
    "ERROR_IN_CRL_LAST_UPDATE_FIELD",
    "ERROR_IN_CRL_NEXT_UPDATE_FIELD",
    "OUT_OF_MEM",
    "DEPTH_ZERO_SELF_SIGNED_CERT",
    "SELF_SIGNED_CERT_IN_CHAIN",
    "UNABLE_TO_GET_ISSUER_CERT_LOCALLY",
    "UNABLE_TO_VERIFY_LEAF_SIGNATURE",
    "CERT_CHAIN_TOO_LONG",
    "CERT_REVOKED",
    "INVALID_CA",
    "PATH_LENGTH_EXCEEDED",
    "INVALID_PURPOSE",
    "CERT_UNTRUSTED",
    "CERT_REJECTED"
];
module.exports = function(err) {
    if (!err || !err.code) {
        return true;
    }
    if (WHITELIST.indexOf(err.code) !== -1) {
        return true;
    }
    if (BLACKLIST.indexOf(err.code) !== -1) {
        return false;
    }
    return true;
};


/***/ }),

/***/ 2509:
/***/ ((module) => {

"use strict";

var isStream = module.exports = function(stream) {
    return stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
};
isStream.writable = function(stream) {
    return isStream(stream) && stream.writable !== false && typeof stream._write === "function" && typeof stream._writableState === "object";
};
isStream.readable = function(stream) {
    return isStream(stream) && stream.readable !== false && typeof stream._read === "function" && typeof stream._readableState === "object";
};
isStream.duplex = function(stream) {
    return isStream.writable(stream) && isStream.readable(stream);
};
isStream.transform = function(stream) {
    return isStream.duplex(stream) && typeof stream._transform === "function" && typeof stream._transformState === "object";
};


/***/ }),

/***/ 443:
/***/ ((module) => {

"use strict";

var toString = {}.toString;
module.exports = Array.isArray || function(arr) {
    return toString.call(arr) == "[object Array]";
};


/***/ }),

/***/ 6264:
/***/ ((module) => {

"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */ 
module.exports = function isObject(val) {
    return val != null && typeof val === "object" && Array.isArray(val) === false;
};


/***/ }),

/***/ 9637:
/***/ ((module, exports) => {

"use strict";
// ISC @ Julien Fontanet

// ===================================================================
var construct = typeof Reflect !== "undefined" ? Reflect.construct : undefined;
var defineProperty = Object.defineProperty;
// -------------------------------------------------------------------
var captureStackTrace = Error.captureStackTrace;
if (captureStackTrace === undefined) {
    captureStackTrace = function captureStackTrace(error) {
        var container = new Error();
        defineProperty(error, "stack", {
            configurable: true,
            get: function getStack() {
                var stack = container.stack;
                // Replace property with value for faster future accesses.
                defineProperty(this, "stack", {
                    configurable: true,
                    value: stack,
                    writable: true
                });
                return stack;
            },
            set: function setStack(stack) {
                defineProperty(error, "stack", {
                    configurable: true,
                    value: stack,
                    writable: true
                });
            }
        });
    };
}
// -------------------------------------------------------------------
function BaseError(message) {
    if (message !== undefined) {
        defineProperty(this, "message", {
            configurable: true,
            value: message,
            writable: true
        });
    }
    var cname = this.constructor.name;
    if (cname !== undefined && cname !== this.name) {
        defineProperty(this, "name", {
            configurable: true,
            value: cname,
            writable: true
        });
    }
    captureStackTrace(this, this.constructor);
}
BaseError.prototype = Object.create(Error.prototype, {
    // See: https://github.com/JsCommunity/make-error/issues/4
    constructor: {
        configurable: true,
        value: BaseError,
        writable: true
    }
});
// -------------------------------------------------------------------
// Sets the name of a function if possible (depends of the JS engine).
var setFunctionName = function() {
    function setFunctionName(fn, name) {
        return defineProperty(fn, "name", {
            configurable: true,
            value: name
        });
    }
    try {
        var f = function() {};
        setFunctionName(f, "foo");
        if (f.name === "foo") {
            return setFunctionName;
        }
    } catch (_) {}
}();
// -------------------------------------------------------------------
function makeError(constructor, super_) {
    if (super_ == null || super_ === Error) {
        super_ = BaseError;
    } else if (typeof super_ !== "function") {
        throw new TypeError("super_ should be a function");
    }
    var name;
    if (typeof constructor === "string") {
        name = constructor;
        constructor = construct !== undefined ? function() {
            return construct(super_, arguments, this.constructor);
        } : function() {
            super_.apply(this, arguments);
        };
        // If the name can be set, do it once and for all.
        if (setFunctionName !== undefined) {
            setFunctionName(constructor, name);
            name = undefined;
        }
    } else if (typeof constructor !== "function") {
        throw new TypeError("constructor should be either a string or a function");
    }
    // Also register the super constructor also as `constructor.super_` just
    // like Node's `util.inherits()`.
    //
    // eslint-disable-next-line dot-notation
    constructor.super_ = constructor["super"] = super_;
    var properties = {
        constructor: {
            configurable: true,
            value: constructor,
            writable: true
        }
    };
    // If the name could not be set on the constructor, set it on the
    // prototype.
    if (name !== undefined) {
        properties.name = {
            configurable: true,
            value: name,
            writable: true
        };
    }
    constructor.prototype = Object.create(super_.prototype, properties);
    return constructor;
}
exports = module.exports = makeError;
exports.BaseError = BaseError;


/***/ }),

/***/ 6851:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.applyPatch = exports.rebaseValue = exports.getType = exports.unwrap = exports.wrap = void 0;
var internal_patcher_1 = __webpack_require__(2126);
var utf8_1 = __webpack_require__(3583);
var Model = /** @class */ function() {
    function Model(meta) {
        this.meta = meta;
    }
    Model.prototype.wrap = function(data) {
        return this.wrapWithMeta(data, this.meta, this.meta);
    };
    Model.prototype.wrapWithMeta = function(data, startMeta, endMeta) {
        if (endMeta === void 0) {
            endMeta = this.meta;
        }
        return {
            data: data,
            startMeta: startMeta,
            endMeta: endMeta
        };
    };
    Model.prototype.asObject = function(value) {
        if (!value.content) {
            var fields = {};
            for(var _i = 0, _a = Object.entries(value.data); _i < _a.length; _i++){
                var _b = _a[_i], key = _b[0], val = _b[1];
                fields[key] = this.wrapWithMeta(val, value.startMeta);
            }
            value.content = {
                type: "object",
                fields: fields
            };
        }
        return value.content;
    };
    Model.prototype.asArray = function(value) {
        var _this = this;
        if (!value.content) {
            var elements = value.data.map(function(item) {
                return _this.wrapWithMeta(item, value.startMeta);
            });
            var metas = elements.map(function() {
                return _this.meta;
            });
            value.content = {
                type: "array",
                elements: elements,
                metas: metas
            };
        }
        return value.content;
    };
    Model.prototype.asString = function(value) {
        if (!value.content) {
            var str = value.data;
            var part = {
                value: str,
                utf8size: utf8_1.utf8stringSize(str),
                uses: [],
                startMeta: value.startMeta,
                endMeta: value.endMeta
            };
            value.content = this.stringFromParts([
                part
            ]);
        }
        return value.content;
    };
    Model.prototype.stringFromParts = function(parts) {
        var str = {
            type: "string",
            parts: parts
        };
        for(var _i = 0, parts_1 = parts; _i < parts_1.length; _i++){
            var part = parts_1[_i];
            part.uses.push(str);
        }
        return str;
    };
    Model.prototype.objectGetKeys = function(value) {
        if (value.content) {
            return Object.keys(value.content.fields);
        } else {
            return Object.keys(value.data);
        }
    };
    Model.prototype.objectGetField = function(value, key) {
        var obj = this.asObject(value);
        return obj.fields[key];
    };
    Model.prototype.arrayGetElement = function(value, idx) {
        var arr = this.asArray(value);
        return arr.elements[idx];
    };
    Model.prototype.finalize = function(content) {
        this.updateEndMeta(content);
        return {
            content: content,
            startMeta: this.meta,
            endMeta: this.meta
        };
    };
    Model.prototype.markChanged = function(value) {
        return this.wrap(unwrap(value));
    };
    Model.prototype.updateEndMeta = function(content) {
        if (content.type == "string") {
            for(var _i = 0, _a = content.parts; _i < _a.length; _i++){
                var part = _a[_i];
                part.endMeta = this.meta;
            }
        } else {
            if (content.type === "array") {
                for(var _b = 0, _c = content.elements; _b < _c.length; _b++){
                    var val = _c[_b];
                    if (val.content && val.endMeta !== this.meta) {
                        this.updateEndMeta(val.content);
                    }
                    val.endMeta = this.meta;
                }
            } else {
                for(var _d = 0, _e = Object.values(content.fields); _d < _e.length; _d++){
                    var val = _e[_d];
                    if (val.content && val.endMeta !== this.meta) {
                        this.updateEndMeta(val.content);
                    }
                    val.endMeta = this.meta;
                }
            }
        }
    };
    Model.prototype.copyString = function(value) {
        if (value) {
            var other = this.asString(value);
            return this.stringFromParts(other.parts.slice());
        } else {
            return {
                type: "string",
                parts: []
            };
        }
    };
    Model.prototype.copyObject = function(value) {
        var obj = {
            type: "object",
            fields: {}
        };
        if (value) {
            var other = this.asObject(value);
            Object.assign(obj.fields, other.fields);
        }
        return obj;
    };
    Model.prototype.copyArray = function(value) {
        var arr = value ? this.asArray(value) : null;
        var elements = arr ? arr.elements : [];
        var metas = arr ? arr.metas : [];
        return {
            type: "array",
            elements: elements,
            metas: metas
        };
    };
    Model.prototype.objectSetField = function(target, key, value) {
        target.fields[key] = value;
    };
    Model.prototype.objectDeleteField = function(target, key) {
        delete target.fields[key];
    };
    Model.prototype.arrayAppendValue = function(target, value) {
        target.elements.push(value);
        target.metas.push(this.meta);
    };
    Model.prototype.arrayAppendSlice = function(target, source, left, right) {
        var _a, _b;
        var arr = this.asArray(source);
        var samePosition = arr.elements.length === left;
        (_a = target.elements).push.apply(_a, arr.elements.slice(left, right));
        if (samePosition) {
            (_b = target.metas).push.apply(_b, arr.metas.slice(left, right));
        } else {
            for(var i = left; i < right; i++){
                target.metas.push(this.meta);
            }
        }
    };
    Model.prototype.stringAppendValue = function(target, value) {
        var str = this.asString(value);
        for(var _i = 0, _a = str.parts; _i < _a.length; _i++){
            var part = _a[_i];
            this.stringAppendPart(target, part);
        }
    };
    Model.prototype.stringAppendPart = function(target, part) {
        target.parts.push(part);
        part.uses.push(target);
    };
    Model.prototype.resolveStringPart = function(str, from, len) {
        if (len === 0) return from;
        for(var i = from; i < str.parts.length; i++){
            var part = str.parts[i];
            if (len === part.utf8size) {
                // Matches perfect!
                return i + 1;
            }
            if (len < part.utf8size) {
                // It's a part of this chunk. We now need to split it up.
                this.splitString(part, len);
                return i + 1;
            }
            len -= part.utf8size;
        }
        throw new Error("splitting string out of bounds");
    };
    Model.prototype.splitString = function(part, idx) {
        var leftValue;
        var rightValue;
        var leftSize = idx;
        var rightSize = part.utf8size - leftSize;
        // idx is here in UTF-8 index, not codepoint index.
        // This means we might to adjust for multi-byte characters.
        if (part.utf8size !== part.value.length) {
            var byteCount = 0;
            for(idx = 0; byteCount < leftSize; idx++){
                var code = part.value.codePointAt(idx);
                var size = utf8_1.utf8charSize(code);
                if (size === 4) idx++; // Surrogate pair.
                byteCount += size;
            }
        }
        leftValue = part.value.slice(0, idx);
        rightValue = part.value.slice(idx);
        var newPart = {
            value: rightValue,
            utf8size: rightSize,
            uses: part.uses.slice(),
            startMeta: part.startMeta,
            endMeta: part.endMeta
        };
        part.value = leftValue;
        part.utf8size = leftSize;
        for(var _i = 0, _a = part.uses; _i < _a.length; _i++){
            var use = _a[_i];
            // Insert the new part.
            var idx_1 = use.parts.indexOf(part);
            if (idx_1 === -1) throw new Error("bug: mismatch between string parts and use.");
            use.parts.splice(idx_1 + 1, 0, newPart);
        }
    };
    Model.prototype.stringAppendSlice = function(target, source, left, right) {
        var str = this.asString(source);
        var firstPart = this.resolveStringPart(str, 0, left);
        var lastPart = this.resolveStringPart(str, firstPart, right - left);
        for(var i = firstPart; i < lastPart; i++){
            var part = str.parts[i];
            this.stringAppendPart(target, part);
        }
    };
    return Model;
}();
// Turns a native JavaScript object into a Value with a given origin.
function wrap(data, meta) {
    return {
        data: data,
        startMeta: meta,
        endMeta: meta
    };
}
exports.wrap = wrap;
// Converts a Value into a native JavaScript type.
function unwrap(value) {
    if (typeof value.data !== "undefined") return value.data;
    var result;
    var content = value.content;
    switch(content.type){
        case "string":
            result = content.parts.map(function(part) {
                return part.value;
            }).join("");
            break;
        case "array":
            result = content.elements.map(function(val) {
                return unwrap(val);
            });
            break;
        case "object":
            {
                result = {};
                for(var _i = 0, _a = Object.entries(content.fields); _i < _a.length; _i++){
                    var _b = _a[_i], key = _b[0], val = _b[1];
                    result[key] = unwrap(val);
                }
            }
    }
    value.data = result;
    return result;
}
exports.unwrap = unwrap;
// Returns the type of a Value.
function getType(value) {
    if (value.content) return value.content.type;
    if (Array.isArray(value.data)) return "array";
    if (value.data === null) return "null";
    return typeof value.data;
}
exports.getType = getType;
// Updates the `right` value such that it reuses as much as possible from the `left` value.
function rebaseValue(left, right) {
    var leftType = getType(left);
    var rightType = getType(right);
    if (leftType !== rightType) return right;
    var leftModel = new Model(left.endMeta);
    var rightModel = new Model(right.endMeta);
    switch(leftType){
        case "object":
            {
                var leftObj = leftModel.asObject(left);
                var rightObj = rightModel.asObject(right);
                // Number of fields which are identical in left and right.
                var identicalFieldCount = 0;
                var leftFieldCount = Object.keys(leftObj.fields).length;
                var rightFieldCount = Object.keys(rightObj.fields).length;
                for(var _i = 0, _a = Object.entries(rightObj.fields); _i < _a.length; _i++){
                    var _b = _a[_i], key = _b[0], rightVal = _b[1];
                    var leftVal = leftObj.fields[key];
                    if (leftVal) {
                        rightObj.fields[key] = rebaseValue(leftVal, rightVal);
                        if (rightObj.fields[key] === leftVal) {
                            identicalFieldCount++;
                        }
                    }
                }
                var isIdentical = leftFieldCount === rightFieldCount && leftFieldCount === identicalFieldCount;
                return isIdentical ? left : right;
            }
        case "array":
            {
                var leftArr = leftModel.asArray(left);
                var rightArr = rightModel.asArray(right);
                if (leftArr.elements.length !== rightArr.elements.length) {
                    break;
                }
                var numRebased = 0;
                for(var i = 0; i < rightArr.elements.length; i++){
                    rightArr.elements[i] = rebaseValue(leftArr.elements[i], rightArr.elements[i]);
                    if (rightArr.elements[i] !== leftArr.elements[i]) {
                        numRebased++;
                    }
                }
                return numRebased === 0 ? left : right;
            }
        case "null":
        case "boolean":
        case "number":
            {
                if (unwrap(left) === unwrap(right)) return left;
                break;
            }
        case "string":
            {
                var leftRaw = unwrap(left);
                var rightRaw = unwrap(right);
                if (leftRaw === rightRaw) return left;
                var result = rightModel.copyString(null);
                var prefix = utf8_1.commonPrefix(leftRaw, rightRaw);
                var suffix = utf8_1.commonSuffix(leftRaw, rightRaw, prefix);
                var rightLen = utf8_1.utf8stringSize(rightRaw);
                var leftLen = utf8_1.utf8stringSize(leftRaw);
                if (0 < prefix) {
                    rightModel.stringAppendSlice(result, left, 0, prefix);
                }
                if (prefix < rightLen - suffix) {
                    rightModel.stringAppendSlice(result, right, prefix, rightLen - suffix);
                }
                if (leftLen - suffix < leftLen) {
                    rightModel.stringAppendSlice(result, left, leftLen - suffix, leftLen);
                }
                var value = rightModel.finalize(result);
                if (unwrap(value) !== rightRaw) throw new Error("incorrect string rebase");
                return value;
            }
    }
    return right;
}
exports.rebaseValue = rebaseValue;
function applyPatch(left, patch, startMeta) {
    var model = new Model(startMeta);
    var patcher = new internal_patcher_1.Patcher(model, left, patch);
    return patcher.process();
}
exports.applyPatch = applyPatch; //# sourceMappingURL=incremental-patcher.js.map


/***/ }),

/***/ 3806:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = (void 0) && (void 0).__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.incremental = __importStar(__webpack_require__(6851));
var simple_patcher_1 = __webpack_require__(2001);
Object.defineProperty(exports, "applyPatch", ({
    enumerable: true,
    get: function() {
        return simple_patcher_1.applyPatch;
    }
})); //# sourceMappingURL=index.js.map


/***/ }),

/***/ 2126:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Patcher = void 0;
var OPS = [
    "Value",
    "Copy",
    "Blank",
    "ReturnIntoArray",
    "ReturnIntoObject",
    "ReturnIntoObjectSameKey",
    "PushField",
    "PushElement",
    "PushParent",
    "Pop",
    "PushFieldCopy",
    "PushFieldBlank",
    "PushElementCopy",
    "PushElementBlank",
    "ReturnIntoObjectPop",
    "ReturnIntoObjectSameKeyPop",
    "ReturnIntoArrayPop",
    "ObjectSetFieldValue",
    "ObjectCopyField",
    "ObjectDeleteField",
    "ArrayAppendValue",
    "ArrayAppendSlice",
    "StringAppendString",
    "StringAppendSlice"
];
var Patcher = /** @class */ function() {
    function Patcher(model, root, patch) {
        this.i = 0;
        this.inputStack = [];
        this.outputStack = [];
        this.model = model;
        this.root = root;
        this.patch = patch;
    }
    Patcher.prototype.read = function() {
        return this.patch[this.i++];
    };
    Patcher.prototype.process = function() {
        this.inputStack.push({
            value: this.root
        });
        this.outputStack.push({
            value: this.root
        });
        for(; this.i < this.patch.length;){
            var opcode = this.read();
            var op = OPS[opcode];
            if (!op) throw new Error("Unknown opcode: " + opcode);
            var processor = "process" + op;
            this[processor].apply(this);
        }
        var entry = this.outputStack.pop();
        return this.finalizeOutput(entry);
    };
    Patcher.prototype.inputEntry = function() {
        return this.inputStack[this.inputStack.length - 1];
    };
    Patcher.prototype.inputKey = function(entry, idx) {
        if (!entry.keys) {
            entry.keys = this.model.objectGetKeys(entry.value).sort();
        }
        return entry.keys[idx];
    };
    Patcher.prototype.outputEntry = function() {
        return this.outputStack[this.outputStack.length - 1];
    };
    Patcher.prototype.outputArray = function() {
        var entry = this.outputEntry();
        if (!entry.writeValue) {
            entry.writeValue = this.model.copyArray(entry.value);
        }
        return entry.writeValue;
    };
    Patcher.prototype.outputObject = function() {
        var entry = this.outputEntry();
        if (!entry.writeValue) {
            entry.writeValue = this.model.copyObject(entry.value);
        }
        return entry.writeValue;
    };
    Patcher.prototype.outputString = function() {
        var entry = this.outputEntry();
        if (!entry.writeValue) {
            entry.writeValue = this.model.copyString(entry.value);
        }
        return entry.writeValue;
    };
    Patcher.prototype.finalizeOutput = function(entry) {
        if (entry.writeValue) {
            return this.model.finalize(entry.writeValue);
        } else {
            return entry.value;
        }
    };
    // Processors:
    Patcher.prototype.processValue = function() {
        var value = this.model.wrap(this.read());
        this.outputStack.push({
            value: value
        });
    };
    Patcher.prototype.processCopy = function() {
        var input = this.inputEntry();
        this.outputStack.push({
            value: input.value
        });
    };
    Patcher.prototype.processBlank = function() {
        this.outputStack.push({
            value: null
        });
    };
    Patcher.prototype.processReturnIntoArray = function() {
        var entry = this.outputStack.pop();
        var result = this.finalizeOutput(entry);
        var arr = this.outputArray();
        this.model.arrayAppendValue(arr, result);
    };
    Patcher.prototype.processReturnIntoObject = function() {
        var key = this.read();
        var entry = this.outputStack.pop();
        var result = this.finalizeOutput(entry);
        result = this.model.markChanged(result);
        var obj = this.outputObject();
        this.model.objectSetField(obj, key, result);
    };
    Patcher.prototype.processReturnIntoObjectSameKey = function() {
        var input = this.inputEntry();
        var entry = this.outputStack.pop();
        var result = this.finalizeOutput(entry);
        var obj = this.outputObject();
        this.model.objectSetField(obj, input.key, result);
    };
    Patcher.prototype.processPushField = function() {
        var idx = this.read();
        var entry = this.inputEntry();
        var key = this.inputKey(entry, idx);
        var value = this.model.objectGetField(entry.value, key);
        this.inputStack.push({
            value: value,
            key: key
        });
    };
    Patcher.prototype.processPushElement = function() {
        var idx = this.read();
        var entry = this.inputEntry();
        var value = this.model.arrayGetElement(entry.value, idx);
        this.inputStack.push({
            value: value
        });
    };
    Patcher.prototype.processPop = function() {
        this.inputStack.pop();
    };
    Patcher.prototype.processPushFieldCopy = function() {
        this.processPushField();
        this.processCopy();
    };
    Patcher.prototype.processPushFieldBlank = function() {
        this.processPushField();
        this.processBlank();
    };
    Patcher.prototype.processPushElementCopy = function() {
        this.processPushElement();
        this.processCopy();
    };
    Patcher.prototype.processPushElementBlank = function() {
        this.processPushElement();
        this.processBlank();
    };
    Patcher.prototype.processReturnIntoObjectPop = function() {
        this.processReturnIntoObject();
        this.processPop();
    };
    Patcher.prototype.processReturnIntoObjectSameKeyPop = function() {
        this.processReturnIntoObjectSameKey();
        this.processPop();
    };
    Patcher.prototype.processReturnIntoArrayPop = function() {
        this.processReturnIntoArray();
        this.processPop();
    };
    Patcher.prototype.processObjectSetFieldValue = function() {
        this.processValue();
        this.processReturnIntoObject();
    };
    Patcher.prototype.processObjectCopyField = function() {
        this.processPushField();
        this.processCopy();
        this.processReturnIntoObjectSameKey();
        this.processPop();
    };
    Patcher.prototype.processObjectDeleteField = function() {
        var idx = this.read();
        var entry = this.inputEntry();
        var key = this.inputKey(entry, idx);
        var obj = this.outputObject();
        this.model.objectDeleteField(obj, key);
    };
    Patcher.prototype.processArrayAppendValue = function() {
        var value = this.model.wrap(this.read());
        var arr = this.outputArray();
        this.model.arrayAppendValue(arr, value);
    };
    Patcher.prototype.processArrayAppendSlice = function() {
        var left = this.read();
        var right = this.read();
        var str = this.outputArray();
        var val = this.inputEntry().value;
        this.model.arrayAppendSlice(str, val, left, right);
    };
    Patcher.prototype.processStringAppendString = function() {
        var value = this.model.wrap(this.read());
        var str = this.outputString();
        this.model.stringAppendValue(str, value);
    };
    Patcher.prototype.processStringAppendSlice = function() {
        var left = this.read();
        var right = this.read();
        var str = this.outputString();
        var val = this.inputEntry().value;
        this.model.stringAppendSlice(str, val, left, right);
    };
    return Patcher;
}();
exports.Patcher = Patcher; //# sourceMappingURL=internal-patcher.js.map


/***/ }),

/***/ 2001:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.applyPatch = void 0;
var internal_patcher_1 = __webpack_require__(2126);
var utf8_1 = __webpack_require__(3583);
var Model = {
    wrap: function(data) {
        return data;
    },
    finalize: function(b) {
        if (Array.isArray(b)) {
            return b;
        } else {
            return b.data;
        }
    },
    markChanged: function(value) {
        return value;
    },
    objectGetKeys: function(value) {
        return Object.keys(value);
    },
    objectGetField: function(value, key) {
        return value[key];
    },
    arrayGetElement: function(value, idx) {
        return value[idx];
    },
    copyObject: function(value) {
        var res = {
            type: "object",
            data: {}
        };
        if (value !== null) {
            for(var _i = 0, _a = Object.entries(value); _i < _a.length; _i++){
                var _b = _a[_i], key = _b[0], val = _b[1];
                res.data[key] = val;
            }
        }
        return res;
    },
    copyArray: function(value) {
        if (value === null) return [];
        return value.slice();
    },
    copyString: function(value) {
        return {
            type: "string",
            data: value === null ? "" : value
        };
    },
    objectSetField: function(target, key, value) {
        target.data[key] = value;
    },
    objectDeleteField: function(target, key) {
        delete target.data[key];
    },
    arrayAppendValue: function(target, value) {
        target.push(value);
    },
    arrayAppendSlice: function(target, source, left, right) {
        target.push.apply(target, source.slice(left, right));
    },
    stringAppendSlice: function(target, source, left, right) {
        var sourceString = source;
        var leftPos = utf8_1.utf8resolveIndex(sourceString, left);
        var rightPos = utf8_1.utf8resolveIndex(sourceString, right, leftPos);
        target.data += sourceString.slice(leftPos, rightPos);
    },
    stringAppendValue: function(target, value) {
        target.data += value;
    }
};
// Applies a patch on a JavaScript object.
function applyPatch(left, patch) {
    var root = left; // No need to wrap because the representation is the same.
    var patcher = new internal_patcher_1.Patcher(Model, root, patch);
    return patcher.process();
}
exports.applyPatch = applyPatch; //# sourceMappingURL=simple-patcher.js.map


/***/ }),

/***/ 3583:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.commonSuffix = exports.commonPrefix = exports.utf8resolveIndex = exports.utf8stringSize = exports.utf8charSize = void 0;
function utf8charSize(code) {
    if (code >> 16) {
        return 4;
    } else if (code >> 11) {
        return 3;
    } else if (code >> 7) {
        return 2;
    } else {
        return 1;
    }
}
exports.utf8charSize = utf8charSize;
function utf8stringSize(str) {
    var b = 0;
    for(var i = 0; i < str.length; i++){
        var code = str.codePointAt(i);
        var size = utf8charSize(code);
        if (size == 4) i++;
        b += size;
    }
    return b;
}
exports.utf8stringSize = utf8stringSize;
/** Converts an UTF-8 byte index into a UCS-2 index. */ function utf8resolveIndex(str, idx, start) {
    if (start === void 0) {
        start = 0;
    }
    var byteCount = start;
    var ucsIdx = 0;
    for(ucsIdx = start; byteCount < idx; ucsIdx++){
        var code = str.codePointAt(ucsIdx);
        var size = utf8charSize(code);
        if (size === 4) ucsIdx++; // Surrogate pair.
        byteCount += size;
    }
    return ucsIdx;
}
exports.utf8resolveIndex = utf8resolveIndex;
function commonPrefix(str, str2) {
    var len = Math.min(str.length, str2.length);
    var b = 0;
    for(var i = 0; i < len;){
        var aPoint = str.codePointAt(i);
        var bPoint = str2.codePointAt(i);
        if (aPoint !== bPoint) return b;
        var size = utf8charSize(aPoint);
        b += size;
        i += size === 4 ? 2 : 1;
    }
    return b;
}
exports.commonPrefix = commonPrefix;
function commonSuffix(str, str2, prefix) {
    if (prefix === void 0) {
        prefix = 0;
    }
    var len = Math.min(str.length, str2.length) - prefix;
    var b = 0;
    for(var i = 0; i < len;){
        var aPoint = str.codePointAt(str.length - 1 - i);
        var bPoint = str2.codePointAt(str2.length - 1 - i);
        if (aPoint !== bPoint) return b;
        var size = utf8charSize(aPoint);
        b += size;
        i += size === 4 ? 2 : 1;
    }
    return b;
}
exports.commonSuffix = commonSuffix; //# sourceMappingURL=utf8.js.map


/***/ }),

/***/ 4700:
/***/ ((module) => {

"use strict";

// We define these manually to ensure they're always copied
// even if they would move up the prototype chain
// https://nodejs.org/api/http.html#http_class_http_incomingmessage
const knownProperties = [
    "aborted",
    "complete",
    "headers",
    "httpVersion",
    "httpVersionMinor",
    "httpVersionMajor",
    "method",
    "rawHeaders",
    "rawTrailers",
    "setTimeout",
    "socket",
    "statusCode",
    "statusMessage",
    "trailers",
    "url"
];
module.exports = (fromStream, toStream)=>{
    if (toStream._readableState.autoDestroy) {
        throw new Error("The second stream must have the `autoDestroy` option set to `false`");
    }
    const fromProperties = new Set(Object.keys(fromStream).concat(knownProperties));
    const properties = {};
    for (const property of fromProperties){
        // Don't overwrite existing properties.
        if (property in toStream) {
            continue;
        }
        properties[property] = {
            get () {
                const value = fromStream[property];
                const isFunction = typeof value === "function";
                return isFunction ? value.bind(fromStream) : value;
            },
            set (value) {
                fromStream[property] = value;
            },
            enumerable: true,
            configurable: false
        };
    }
    Object.defineProperties(toStream, properties);
    fromStream.once("aborted", ()=>{
        toStream.destroy();
        toStream.emit("aborted");
    });
    fromStream.once("close", ()=>{
        if (fromStream.complete) {
            if (toStream.readable) {
                toStream.once("end", ()=>{
                    toStream.emit("close");
                });
            } else {
                toStream.emit("close");
            }
        } else {
            toStream.emit("close");
        }
    });
    return toStream;
};


/***/ }),

/***/ 7518:
/***/ ((module) => {

"use strict";
/**
 * Helpers.
 */ 
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */ module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
        return parse(val);
    } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */ function parse(str) {
    str = String(str);
    if (str.length > 100) {
        return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
        return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch(type){
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
            return n * y;
        case "weeks":
        case "week":
        case "w":
            return n * w;
        case "days":
        case "day":
        case "d":
            return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
            return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
            return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
            return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
            return n;
        default:
            return undefined;
    }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return Math.round(ms / d) + "d";
    }
    if (msAbs >= h) {
        return Math.round(ms / h) + "h";
    }
    if (msAbs >= m) {
        return Math.round(ms / m) + "m";
    }
    if (msAbs >= s) {
        return Math.round(ms / s) + "s";
    }
    return ms + "ms";
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
    }
    if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
    }
    if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
    }
    if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
    }
    return ms + " ms";
}
/**
 * Pluralization helper.
 */ function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
}


/***/ }),

/***/ 3057:
/***/ ((module) => {

"use strict";

module.exports = function Pubsub() {
    var subscribers = [];
    return {
        subscribe: subscribe,
        publish: publish
    };
    function subscribe(subscriber) {
        subscribers.push(subscriber);
        return function unsubscribe() {
            var idx = subscribers.indexOf(subscriber);
            if (idx > -1) {
                subscribers.splice(idx, 1);
            }
        };
    }
    function publish() {
        for(var i = 0; i < subscribers.length; i++){
            subscribers[i].apply(null, arguments);
        }
    }
};


/***/ }),

/***/ 5858:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;

__webpack_unused_export__ = ({
    value: true
});
var sanityClient = __webpack_require__(6772);
var react = __webpack_require__(5468);
var groq = __webpack_require__(8061);
function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : {
        "default": e
    };
}
function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function(k) {
            if (k !== "default") {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function() {
                        return e[k];
                    }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}
var sanityClient__default = /*#__PURE__*/ _interopDefaultLegacy(sanityClient);
var groq__default = /*#__PURE__*/ _interopDefaultLegacy(groq);
function createClient(config) {
    return sanityClient__default["default"](config);
}
class MockAbortController {
    constructor(){
        this._signal = {
            aborted: false
        };
    }
    get signal() {
        return this._signal;
    }
    abort() {
        this._signal.aborted = true;
    }
}
function getAborter() {
    return typeof AbortController === "undefined" ? new MockAbortController() : new AbortController();
}
function createCurrentUserHook(_ref) {
    let { projectId  } = _ref;
    return ()=>useCurrentUser(projectId);
}
function getCurrentUser(projectId, abort, token) {
    const headers = token ? {
        Authorization: "Bearer ".concat(token)
    } : void 0;
    return fetch("https://".concat(projectId, ".api.sanity.io/v1/users/me"), {
        credentials: "include",
        signal: abort.signal,
        headers
    }).then((res)=>res.json()).then((res)=>(res == null ? void 0 : res.id) ? res : null);
}
function useCurrentUser(projectId) {
    const [data, setUser] = react.useState();
    const [error, setError] = react.useState();
    react.useEffect(()=>{
        const aborter = getAborter();
        getCurrentUser(projectId, aborter).then(setUser).catch((err)=>err.name !== "AbortError" && setError(err));
        return ()=>{
            aborter.abort();
        };
    }, [
        projectId
    ]);
    return {
        data,
        error,
        loading: data !== null || !error
    };
}
const EMPTY_PARAMS = {};
function createPreviewSubscriptionHook(_ref2) {
    let { projectId , dataset , token , EventSource , documentLimit =3e3  } = _ref2;
    let store;
    return function usePreviewSubscription(query) {
        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const { params =EMPTY_PARAMS , initialData , enabled  } = options;
        return useQuerySubscription({
            getStore,
            projectId,
            query,
            params,
            initialData,
            enabled: enabled ? "undefined" !== "undefined" : false,
            token
        });
    };
    function getStore(abort) {
        if (!store) {
            store = Promise.resolve().then(function() {
                return /*#__PURE__*/ _interopNamespace(__webpack_require__(8354));
            }).then((_ref3)=>{
                let { groqStore  } = _ref3;
                if (abort.signal.aborted) {
                    const error = new Error("Cancelling groq store creation");
                    error.name = "AbortError";
                    return Promise.reject(error);
                }
                return groqStore({
                    projectId,
                    dataset,
                    documentLimit,
                    token,
                    EventSource,
                    listen: true,
                    overlayDrafts: true,
                    subscriptionThrottleMs: 10
                });
            });
        }
        return store;
    }
}
function useQuerySubscription(options) {
    const { getStore , projectId , query , initialData , enabled =false , token  } = options;
    const [error, setError] = react.useState();
    const [loading, setLoading] = react.useState(false);
    const [data, setData] = react.useState();
    const params = useParams(options.params);
    react.useEffect(()=>{
        if (!enabled) {
            return;
        }
        setLoading(true);
        const aborter = getAborter();
        let subscription;
        getCurrentUser(projectId, aborter, token).then((user)=>{
            if (user) {
                return;
            }
            console.warn("Not authenticated - preview not available");
            throw new Error("Not authenticated - preview not available");
        }).then(()=>getStore(aborter)).then((store)=>{
            subscription = store.subscribe(query, params, (err, result)=>{
                if (err) {
                    setError(err);
                } else {
                    setData(result);
                }
            });
        }).catch((err)=>err.name === "AbortError" ? null : setError(err)).finally(()=>setLoading(false));
        return ()=>{
            if (subscription) {
                subscription.unsubscribe();
            }
            aborter.abort();
        };
    }, [
        getStore,
        query,
        params,
        enabled,
        projectId,
        token
    ]);
    return {
        data: typeof data === "undefined" ? initialData : data,
        loading,
        error
    };
}
function useParams(params) {
    const stringifiedParams = react.useMemo(()=>JSON.stringify(params), [
        params
    ]);
    return react.useMemo(()=>JSON.parse(stringifiedParams), [
        stringifiedParams
    ]);
}
__webpack_unused_export__ = ({
    enumerable: true,
    get: function() {
        return groq__default["default"];
    }
});
exports.eI = createClient;
exports.Iy = createCurrentUserHook;
exports.KF = createPreviewSubscriptionHook; //# sourceMappingURL=index.js.map


/***/ }),

/***/ 6259:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* __next_internal_client_entry_do_not_use__ */ 
const { createProxy  } = __webpack_require__(4353);
module.exports = createProxy("/Users/simon/Code/blog/web/node_modules/next/dist/client/link.js");
 //# sourceMappingURL=link.js.map


/***/ }),

/***/ 2890:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = __webpack_require__(6259);


/***/ }),

/***/ 1944:
/***/ ((module) => {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
    }
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) {
            return false;
        }
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = new String("abc"); // eslint-disable-line no-new-wrappers
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
        }
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {};
        for(var i = 0; i < 10; i++){
            test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join("") !== "0123456789") {
            return false;
        }
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
        }
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from){
            if (hasOwnProperty.call(from, key)) {
                to[key] = from[key];
            }
        }
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++){
                if (propIsEnumerable.call(from, symbols[i])) {
                    to[symbols[i]] = from[symbols[i]];
                }
            }
        }
    }
    return to;
};


/***/ }),

/***/ 3248:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var wrappy = __webpack_require__(529);
module.exports = wrappy(once);
module.exports.strict = wrappy(onceStrict);
once.proto = once(function() {
    Object.defineProperty(Function.prototype, "once", {
        value: function() {
            return once(this);
        },
        configurable: true
    });
    Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
            return onceStrict(this);
        },
        configurable: true
    });
});
function once(fn) {
    var f = function() {
        if (f.called) return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
    };
    f.called = false;
    return f;
}
function onceStrict(fn) {
    var f = function() {
        if (f.called) throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
    };
    var name = fn.name || "Function wrapped with `once`";
    f.onceError = name + " shouldn't be called more than once";
    f.called = false;
    return f;
}


/***/ }),

/***/ 8134:
/***/ ((module) => {

"use strict";

module.exports = (x)=>x instanceof Promise || x !== null && typeof x === "object" && typeof x.then === "function" && typeof x.catch === "function";


/***/ }),

/***/ 4135:
/***/ ((module) => {

"use strict";

if (typeof process === "undefined" || !process.version || process.version.indexOf("v0.") === 0 || process.version.indexOf("v1.") === 0 && process.version.indexOf("v1.8.") !== 0) {
    module.exports = {
        nextTick: nextTick
    };
} else {
    module.exports = process;
}
function nextTick(fn, arg1, arg2, arg3) {
    if (typeof fn !== "function") {
        throw new TypeError('"callback" argument must be a function');
    }
    var len = arguments.length;
    var args, i;
    switch(len){
        case 0:
        case 1:
            return process.nextTick(fn);
        case 2:
            return process.nextTick(function afterTickOne() {
                fn.call(null, arg1);
            });
        case 3:
            return process.nextTick(function afterTickTwo() {
                fn.call(null, arg1, arg2);
            });
        case 4:
            return process.nextTick(function afterTickThree() {
                fn.call(null, arg1, arg2, arg3);
            });
        default:
            args = new Array(len - 1);
            i = 0;
            while(i < args.length){
                args[i++] = arguments[i];
            }
            return process.nextTick(function afterTick() {
                fn.apply(null, args);
            });
    }
}


/***/ }),

/***/ 6521:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var through = __webpack_require__(340);
var speedometer = __webpack_require__(3829);
module.exports = function(options, onprogress) {
    if (typeof options === "function") return module.exports(null, options);
    options = options || {};
    var length = options.length || 0;
    var time = options.time || 0;
    var drain = options.drain || false;
    var transferred = options.transferred || 0;
    var nextUpdate = Date.now() + time;
    var delta = 0;
    var speed = speedometer(options.speed || 5000);
    var startTime = Date.now();
    var update = {
        percentage: 0,
        transferred: transferred,
        length: length,
        remaining: length,
        eta: 0,
        runtime: 0
    };
    var emit = function(ended) {
        update.delta = delta;
        update.percentage = ended ? 100 : length ? transferred / length * 100 : 0;
        update.speed = speed(delta);
        update.eta = Math.round(update.remaining / update.speed);
        update.runtime = parseInt((Date.now() - startTime) / 1000);
        nextUpdate = Date.now() + time;
        delta = 0;
        tr.emit("progress", update);
    };
    var write = function(chunk, enc, callback) {
        var len = options.objectMode ? 1 : chunk.length;
        transferred += len;
        delta += len;
        update.transferred = transferred;
        update.remaining = length >= transferred ? length - transferred : 0;
        if (Date.now() >= nextUpdate) emit(false);
        callback(null, chunk);
    };
    var end = function(callback) {
        emit(true);
        callback();
    };
    var tr = through(options.objectMode ? {
        objectMode: true,
        highWaterMark: 16
    } : {}, write, end);
    var onlength = function(newLength) {
        length = newLength;
        update.length = length;
        update.remaining = length - update.transferred;
        tr.emit("length", length);
    };
    // Expose `onlength()` handler as `setLength()` to support custom use cases where length
    // is not known until after a few chunks have already been pumped, or is
    // calculated on the fly.
    tr.setLength = onlength;
    tr.on("pipe", function(stream) {
        if (typeof length === "number") return;
        // Support http module
        if (stream.readable && !stream.writable && stream.headers) {
            return onlength(parseInt(stream.headers["content-length"] || 0));
        }
        // Support streams with a length property
        if (typeof stream.length === "number") {
            return onlength(stream.length);
        }
        // Support request module
        stream.on("response", function(res) {
            if (!res || !res.headers) return;
            if (res.headers["content-encoding"] === "gzip") return;
            if (res.headers["content-length"]) {
                return onlength(parseInt(res.headers["content-length"]));
            }
        });
    });
    if (drain) tr.resume();
    if (onprogress) tr.on("progress", onprogress);
    tr.progress = function() {
        update.speed = speed(0);
        update.eta = Math.round(update.remaining / update.speed);
        return update;
    };
    return tr;
};


/***/ }),

/***/ 3659:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
var ReactPropTypesSecret = __webpack_require__(586);
function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;
module.exports = function() {
    function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
            // It is still safe when called from React.
            return;
        }
        var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. " + "Use PropTypes.checkPropTypes() to call them. " + "Read more at http://fb.me/use-check-prop-types");
        err.name = "Invariant Violation";
        throw err;
    }
    ;
    shim.isRequired = shim;
    function getShim() {
        return shim;
    }
    ;
    // Important!
    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
    var ReactPropTypes = {
        array: shim,
        bigint: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,
        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,
        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};


/***/ }),

/***/ 996:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
if (false) { var throwOnDirectAccess, ReactIs; } else {
    // By explicitly using `prop-types` you are opting into new production behavior.
    // http://fb.me/prop-types-in-prod
    module.exports = __webpack_require__(3659)();
}


/***/ }),

/***/ 586:
/***/ ((module) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
module.exports = ReactPropTypesSecret;


/***/ }),

/***/ 8138:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

var has = Object.prototype.hasOwnProperty, undef;
/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String|Null} The decoded string.
 * @api private
 */ function decode(input) {
    try {
        return decodeURIComponent(input.replace(/\+/g, " "));
    } catch (e) {
        return null;
    }
}
/**
 * Attempts to encode a given input.
 *
 * @param {String} input The string that needs to be encoded.
 * @returns {String|Null} The encoded string.
 * @api private
 */ function encode(input) {
    try {
        return encodeURIComponent(input);
    } catch (e) {
        return null;
    }
}
/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */ function querystring(query) {
    var parser = /([^=?#&]+)=?([^&]*)/g, result = {}, part;
    while(part = parser.exec(query)){
        var key = decode(part[1]), value = decode(part[2]);
        //
        // Prevent overriding of existing properties. This ensures that build-in
        // methods like `toString` or __proto__ are not overriden by malicious
        // querystrings.
        //
        // In the case if failed decoding, we want to omit the key/value pairs
        // from the result.
        //
        if (key === null || value === null || key in result) continue;
        result[key] = value;
    }
    return result;
}
/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */ function querystringify(obj, prefix) {
    prefix = prefix || "";
    var pairs = [], value, key;
    //
    // Optionally prefix with a '?' if needed
    //
    if ("string" !== typeof prefix) prefix = "?";
    for(key in obj){
        if (has.call(obj, key)) {
            value = obj[key];
            //
            // Edge cases where we actually want to encode the value to an empty
            // string instead of the stringified value.
            //
            if (!value && (value === null || value === undef || isNaN(value))) {
                value = "";
            }
            key = encode(key);
            value = encode(value);
            //
            // If we failed to encode the strings, we should bail out as we don't
            // want to add invalid strings to the query.
            //
            if (key === null || value === null) continue;
            pairs.push(key + "=" + value);
        }
    }
    return pairs.length ? prefix + pairs.join("&") : "";
}
//
// Expose the module.
//
exports.stringify = querystringify;
exports.parse = querystring;


/***/ }),

/***/ 7872:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;

__webpack_unused_export__ = ({
    value: true
});
function _interopDefault(ex) {
    return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
}
var React = __webpack_require__(5468);
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(__webpack_require__(996));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
var Activity = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "22 12 18 12 15 21 9 3 6 12 2 12"
    }));
});
Activity.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Activity.displayName = "Activity";
var Airplay = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"
    }), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "12 15 17 21 7 21 12 15"
    }));
});
Airplay.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Airplay.displayName = "Airplay";
var AlertCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "8",
        x2: "12",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "16",
        x2: "12.01",
        y2: "16"
    }));
});
AlertCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
AlertCircle.displayName = "AlertCircle";
var AlertOctagon = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "8",
        x2: "12",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "16",
        x2: "12.01",
        y2: "16"
    }));
});
AlertOctagon.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
AlertOctagon.displayName = "AlertOctagon";
var AlertTriangle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "9",
        x2: "12",
        y2: "13"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "17",
        x2: "12.01",
        y2: "17"
    }));
});
AlertTriangle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
AlertTriangle.displayName = "AlertTriangle";
var AlignCenter = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "18",
        y1: "10",
        x2: "6",
        y2: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "6",
        x2: "3",
        y2: "6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "14",
        x2: "3",
        y2: "14"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "18",
        y1: "18",
        x2: "6",
        y2: "18"
    }));
});
AlignCenter.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
AlignCenter.displayName = "AlignCenter";
var AlignJustify = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "10",
        x2: "3",
        y2: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "6",
        x2: "3",
        y2: "6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "14",
        x2: "3",
        y2: "14"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "18",
        x2: "3",
        y2: "18"
    }));
});
AlignJustify.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
AlignJustify.displayName = "AlignJustify";
var AlignLeft = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "17",
        y1: "10",
        x2: "3",
        y2: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "6",
        x2: "3",
        y2: "6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "14",
        x2: "3",
        y2: "14"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "17",
        y1: "18",
        x2: "3",
        y2: "18"
    }));
});
AlignLeft.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
AlignLeft.displayName = "AlignLeft";
var AlignRight = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "10",
        x2: "7",
        y2: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "6",
        x2: "3",
        y2: "6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "14",
        x2: "3",
        y2: "14"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "18",
        x2: "7",
        y2: "18"
    }));
});
AlignRight.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
AlignRight.displayName = "AlignRight";
var Anchor = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "5",
        r: "3"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "22",
        x2: "12",
        y2: "8"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M5 12H2a10 10 0 0 0 20 0h-3"
    }));
});
Anchor.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Anchor.displayName = "Anchor";
var Aperture = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "14.31",
        y1: "8",
        x2: "20.05",
        y2: "17.94"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9.69",
        y1: "8",
        x2: "21.17",
        y2: "8"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "7.38",
        y1: "12",
        x2: "13.12",
        y2: "2.06"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9.69",
        y1: "16",
        x2: "3.95",
        y2: "6.06"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "14.31",
        y1: "16",
        x2: "2.83",
        y2: "16"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16.62",
        y1: "12",
        x2: "10.88",
        y2: "21.94"
    }));
});
Aperture.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Aperture.displayName = "Aperture";
var Archive = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "21 8 21 21 3 21 3 8"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "1",
        y: "3",
        width: "22",
        height: "5"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "10",
        y1: "12",
        x2: "14",
        y2: "12"
    }));
});
Archive.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Archive.displayName = "Archive";
var ArrowDownCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "8 12 12 16 16 12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "8",
        x2: "12",
        y2: "16"
    }));
});
ArrowDownCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ArrowDownCircle.displayName = "ArrowDownCircle";
var ArrowDownLeft = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "17",
        y1: "7",
        x2: "7",
        y2: "17"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "17 17 7 17 7 7"
    }));
});
ArrowDownLeft.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ArrowDownLeft.displayName = "ArrowDownLeft";
var ArrowDownRight = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "7",
        y1: "7",
        x2: "17",
        y2: "17"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "17 7 17 17 7 17"
    }));
});
ArrowDownRight.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ArrowDownRight.displayName = "ArrowDownRight";
var ArrowDown = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "5",
        x2: "12",
        y2: "19"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "19 12 12 19 5 12"
    }));
});
ArrowDown.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ArrowDown.displayName = "ArrowDown";
var ArrowLeftCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "12 8 8 12 12 16"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16",
        y1: "12",
        x2: "8",
        y2: "12"
    }));
});
ArrowLeftCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ArrowLeftCircle.displayName = "ArrowLeftCircle";
var ArrowLeft = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "19",
        y1: "12",
        x2: "5",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "12 19 5 12 12 5"
    }));
});
ArrowLeft.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ArrowLeft.displayName = "ArrowLeft";
var ArrowRightCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "12 16 16 12 12 8"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "12",
        x2: "16",
        y2: "12"
    }));
});
ArrowRightCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ArrowRightCircle.displayName = "ArrowRightCircle";
var ArrowRight = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "5",
        y1: "12",
        x2: "19",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "12 5 19 12 12 19"
    }));
});
ArrowRight.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ArrowRight.displayName = "ArrowRight";
var ArrowUpCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "16 12 12 8 8 12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "16",
        x2: "12",
        y2: "8"
    }));
});
ArrowUpCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ArrowUpCircle.displayName = "ArrowUpCircle";
var ArrowUpLeft = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "17",
        y1: "17",
        x2: "7",
        y2: "7"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "7 17 7 7 17 7"
    }));
});
ArrowUpLeft.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ArrowUpLeft.displayName = "ArrowUpLeft";
var ArrowUpRight = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "7",
        y1: "17",
        x2: "17",
        y2: "7"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "7 7 17 7 17 17"
    }));
});
ArrowUpRight.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ArrowUpRight.displayName = "ArrowUpRight";
var ArrowUp = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "19",
        x2: "12",
        y2: "5"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "5 12 12 5 19 12"
    }));
});
ArrowUp.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ArrowUp.displayName = "ArrowUp";
var AtSign = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "4"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"
    }));
});
AtSign.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
AtSign.displayName = "AtSign";
var Award = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "8",
        r: "7"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "8.21 13.89 7 23 12 20 17 23 15.79 13.88"
    }));
});
Award.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Award.displayName = "Award";
var BarChart2 = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "18",
        y1: "20",
        x2: "18",
        y2: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "20",
        x2: "12",
        y2: "4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "6",
        y1: "20",
        x2: "6",
        y2: "14"
    }));
});
BarChart2.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
BarChart2.displayName = "BarChart2";
var BarChart = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "20",
        x2: "12",
        y2: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "18",
        y1: "20",
        x2: "18",
        y2: "4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "6",
        y1: "20",
        x2: "6",
        y2: "16"
    }));
});
BarChart.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
BarChart.displayName = "BarChart";
var BatteryCharging = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "23",
        y1: "13",
        x2: "23",
        y2: "11"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "11 6 7 12 13 12 9 18"
    }));
});
BatteryCharging.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
BatteryCharging.displayName = "BatteryCharging";
var Battery = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "1",
        y: "6",
        width: "18",
        height: "12",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "23",
        y1: "13",
        x2: "23",
        y2: "11"
    }));
});
Battery.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Battery.displayName = "Battery";
var BellOff = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M13.73 21a2 2 0 0 1-3.46 0"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M18.63 13A17.89 17.89 0 0 1 18 8"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M6.26 6.26A5.86 5.86 0 0 0 6 8c0 7-3 9-3 9h14"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M18 8a6 6 0 0 0-9.33-5"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "1",
        x2: "23",
        y2: "23"
    }));
});
BellOff.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
BellOff.displayName = "BellOff";
var Bell = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M13.73 21a2 2 0 0 1-3.46 0"
    }));
});
Bell.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Bell.displayName = "Bell";
var Bluetooth = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"
    }));
});
Bluetooth.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Bluetooth.displayName = "Bluetooth";
var Bold = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"
    }));
});
Bold.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Bold.displayName = "Bold";
var BookOpen = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"
    }));
});
BookOpen.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
BookOpen.displayName = "BookOpen";
var Book = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M4 19.5A2.5 2.5 0 0 1 6.5 17H20"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"
    }));
});
Book.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Book.displayName = "Book";
var Bookmark = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"
    }));
});
Bookmark.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Bookmark.displayName = "Bookmark";
var Box = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "3.27 6.96 12 12.01 20.73 6.96"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "22.08",
        x2: "12",
        y2: "12"
    }));
});
Box.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Box.displayName = "Box";
var Briefcase = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "2",
        y: "7",
        width: "20",
        height: "14",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"
    }));
});
Briefcase.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Briefcase.displayName = "Briefcase";
var Calendar = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "3",
        y: "4",
        width: "18",
        height: "18",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16",
        y1: "2",
        x2: "16",
        y2: "6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "2",
        x2: "8",
        y2: "6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "3",
        y1: "10",
        x2: "21",
        y2: "10"
    }));
});
Calendar.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Calendar.displayName = "Calendar";
var CameraOff = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "1",
        x2: "23",
        y2: "23"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"
    }));
});
CameraOff.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CameraOff.displayName = "CameraOff";
var Camera = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "13",
        r: "4"
    }));
});
Camera.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Camera.displayName = "Camera";
var Cast = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "2",
        y1: "20",
        x2: "2.01",
        y2: "20"
    }));
});
Cast.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Cast.displayName = "Cast";
var CheckCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M22 11.08V12a10 10 0 1 1-5.93-9.14"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "22 4 12 14.01 9 11.01"
    }));
});
CheckCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CheckCircle.displayName = "CheckCircle";
var CheckSquare = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "9 11 12 14 22 4"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"
    }));
});
CheckSquare.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CheckSquare.displayName = "CheckSquare";
var Check = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "20 6 9 17 4 12"
    }));
});
Check.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Check.displayName = "Check";
var ChevronDown = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "6 9 12 15 18 9"
    }));
});
ChevronDown.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ChevronDown.displayName = "ChevronDown";
var ChevronLeft = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "15 18 9 12 15 6"
    }));
});
ChevronLeft.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ChevronLeft.displayName = "ChevronLeft";
var ChevronRight = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "9 18 15 12 9 6"
    }));
});
ChevronRight.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ChevronRight.displayName = "ChevronRight";
var ChevronUp = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "18 15 12 9 6 15"
    }));
});
ChevronUp.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ChevronUp.displayName = "ChevronUp";
var ChevronsDown = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "7 13 12 18 17 13"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "7 6 12 11 17 6"
    }));
});
ChevronsDown.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ChevronsDown.displayName = "ChevronsDown";
var ChevronsLeft = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "11 17 6 12 11 7"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "18 17 13 12 18 7"
    }));
});
ChevronsLeft.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ChevronsLeft.displayName = "ChevronsLeft";
var ChevronsRight = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "13 17 18 12 13 7"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "6 17 11 12 6 7"
    }));
});
ChevronsRight.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ChevronsRight.displayName = "ChevronsRight";
var ChevronsUp = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "17 11 12 6 7 11"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "17 18 12 13 7 18"
    }));
});
ChevronsUp.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ChevronsUp.displayName = "ChevronsUp";
var Chrome = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21.17",
        y1: "8",
        x2: "12",
        y2: "8"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "3.95",
        y1: "6.06",
        x2: "8.54",
        y2: "14"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "10.88",
        y1: "21.94",
        x2: "15.46",
        y2: "14"
    }));
});
Chrome.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Chrome.displayName = "Chrome";
var Circle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }));
});
Circle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Circle.displayName = "Circle";
var Clipboard = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "8",
        y: "2",
        width: "8",
        height: "4",
        rx: "1",
        ry: "1"
    }));
});
Clipboard.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Clipboard.displayName = "Clipboard";
var Clock = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "12 6 12 12 16 14"
    }));
});
Clock.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Clock.displayName = "Clock";
var CloudDrizzle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "19",
        x2: "8",
        y2: "21"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "13",
        x2: "8",
        y2: "15"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16",
        y1: "19",
        x2: "16",
        y2: "21"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16",
        y1: "13",
        x2: "16",
        y2: "15"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "21",
        x2: "12",
        y2: "23"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "15",
        x2: "12",
        y2: "17"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"
    }));
});
CloudDrizzle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CloudDrizzle.displayName = "CloudDrizzle";
var CloudLightning = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "13 11 9 17 15 17 11 23"
    }));
});
CloudLightning.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CloudLightning.displayName = "CloudLightning";
var CloudOff = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "1",
        x2: "23",
        y2: "23"
    }));
});
CloudOff.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CloudOff.displayName = "CloudOff";
var CloudRain = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16",
        y1: "13",
        x2: "16",
        y2: "21"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "13",
        x2: "8",
        y2: "21"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "15",
        x2: "12",
        y2: "23"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"
    }));
});
CloudRain.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CloudRain.displayName = "CloudRain";
var CloudSnow = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "16",
        x2: "8.01",
        y2: "16"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "20",
        x2: "8.01",
        y2: "20"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "18",
        x2: "12.01",
        y2: "18"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "22",
        x2: "12.01",
        y2: "22"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16",
        y1: "16",
        x2: "16.01",
        y2: "16"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16",
        y1: "20",
        x2: "16.01",
        y2: "20"
    }));
});
CloudSnow.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CloudSnow.displayName = "CloudSnow";
var Cloud = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"
    }));
});
Cloud.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Cloud.displayName = "Cloud";
var Code = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "16 18 22 12 16 6"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "8 6 2 12 8 18"
    }));
});
Code.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Code.displayName = "Code";
var Codepen = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "22",
        x2: "12",
        y2: "15.5"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "22 8.5 12 15.5 2 8.5"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "2 15.5 12 8.5 22 15.5"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "2",
        x2: "12",
        y2: "8.5"
    }));
});
Codepen.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Codepen.displayName = "Codepen";
var Codesandbox = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "7.5 4.21 12 6.81 16.5 4.21"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "7.5 19.79 7.5 14.6 3 12"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "21 12 16.5 14.6 16.5 19.79"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "3.27 6.96 12 12.01 20.73 6.96"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "22.08",
        x2: "12",
        y2: "12"
    }));
});
Codesandbox.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Codesandbox.displayName = "Codesandbox";
var Coffee = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M18 8h1a4 4 0 0 1 0 8h-1"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8z"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "6",
        y1: "1",
        x2: "6",
        y2: "4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "10",
        y1: "1",
        x2: "10",
        y2: "4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "14",
        y1: "1",
        x2: "14",
        y2: "4"
    }));
});
Coffee.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Coffee.displayName = "Coffee";
var Columns = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M12 3h7a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-7m0-18H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7m0-18v18"
    }));
});
Columns.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Columns.displayName = "Columns";
var Command = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"
    }));
});
Command.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Command.displayName = "Command";
var Compass = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"
    }));
});
Compass.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Compass.displayName = "Compass";
var Copy = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "9",
        y: "9",
        width: "13",
        height: "13",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"
    }));
});
Copy.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Copy.displayName = "Copy";
var CornerDownLeft = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "9 10 4 15 9 20"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20 4v7a4 4 0 0 1-4 4H4"
    }));
});
CornerDownLeft.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CornerDownLeft.displayName = "CornerDownLeft";
var CornerDownRight = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "15 10 20 15 15 20"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M4 4v7a4 4 0 0 0 4 4h12"
    }));
});
CornerDownRight.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CornerDownRight.displayName = "CornerDownRight";
var CornerLeftDown = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "14 15 9 20 4 15"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20 4h-7a4 4 0 0 0-4 4v12"
    }));
});
CornerLeftDown.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CornerLeftDown.displayName = "CornerLeftDown";
var CornerLeftUp = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "14 9 9 4 4 9"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20 20h-7a4 4 0 0 1-4-4V4"
    }));
});
CornerLeftUp.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CornerLeftUp.displayName = "CornerLeftUp";
var CornerRightDown = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "10 15 15 20 20 15"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M4 4h7a4 4 0 0 1 4 4v12"
    }));
});
CornerRightDown.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CornerRightDown.displayName = "CornerRightDown";
var CornerRightUp = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "10 9 15 4 20 9"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M4 20h7a4 4 0 0 0 4-4V4"
    }));
});
CornerRightUp.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CornerRightUp.displayName = "CornerRightUp";
var CornerUpLeft = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "9 14 4 9 9 4"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20 20v-7a4 4 0 0 0-4-4H4"
    }));
});
CornerUpLeft.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CornerUpLeft.displayName = "CornerUpLeft";
var CornerUpRight = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "15 14 20 9 15 4"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M4 20v-7a4 4 0 0 1 4-4h12"
    }));
});
CornerUpRight.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CornerUpRight.displayName = "CornerUpRight";
var Cpu = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "4",
        y: "4",
        width: "16",
        height: "16",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "9",
        y: "9",
        width: "6",
        height: "6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "1",
        x2: "9",
        y2: "4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "15",
        y1: "1",
        x2: "15",
        y2: "4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "20",
        x2: "9",
        y2: "23"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "15",
        y1: "20",
        x2: "15",
        y2: "23"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "20",
        y1: "9",
        x2: "23",
        y2: "9"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "20",
        y1: "14",
        x2: "23",
        y2: "14"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "9",
        x2: "4",
        y2: "9"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "14",
        x2: "4",
        y2: "14"
    }));
});
Cpu.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Cpu.displayName = "Cpu";
var CreditCard = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "1",
        y: "4",
        width: "22",
        height: "16",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "10",
        x2: "23",
        y2: "10"
    }));
});
CreditCard.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
CreditCard.displayName = "CreditCard";
var Crop = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M6.13 1L6 16a2 2 0 0 0 2 2h15"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M1 6.13L16 6a2 2 0 0 1 2 2v15"
    }));
});
Crop.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Crop.displayName = "Crop";
var Crosshair = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "22",
        y1: "12",
        x2: "18",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "6",
        y1: "12",
        x2: "2",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "6",
        x2: "12",
        y2: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "22",
        x2: "12",
        y2: "18"
    }));
});
Crosshair.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Crosshair.displayName = "Crosshair";
var Database = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("ellipse", {
        cx: "12",
        cy: "5",
        rx: "9",
        ry: "3"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"
    }));
});
Database.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Database.displayName = "Database";
var Delete = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "18",
        y1: "9",
        x2: "12",
        y2: "15"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "9",
        x2: "18",
        y2: "15"
    }));
});
Delete.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Delete.displayName = "Delete";
var Disc = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "3"
    }));
});
Disc.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Disc.displayName = "Disc";
var DivideCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "12",
        x2: "16",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "16",
        x2: "12",
        y2: "16"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "8",
        x2: "12",
        y2: "8"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }));
});
DivideCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
DivideCircle.displayName = "DivideCircle";
var DivideSquare = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "3",
        y: "3",
        width: "18",
        height: "18",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "12",
        x2: "16",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "16",
        x2: "12",
        y2: "16"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "8",
        x2: "12",
        y2: "8"
    }));
});
DivideSquare.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
DivideSquare.displayName = "DivideSquare";
var Divide = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "6",
        r: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "5",
        y1: "12",
        x2: "19",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "18",
        r: "2"
    }));
});
Divide.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Divide.displayName = "Divide";
var DollarSign = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "1",
        x2: "12",
        y2: "23"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"
    }));
});
DollarSign.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
DollarSign.displayName = "DollarSign";
var DownloadCloud = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "8 17 12 21 16 17"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "12",
        x2: "12",
        y2: "21"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"
    }));
});
DownloadCloud.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
DownloadCloud.displayName = "DownloadCloud";
var Download = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "7 10 12 15 17 10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "15",
        x2: "12",
        y2: "3"
    }));
});
Download.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Download.displayName = "Download";
var Dribbble = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M8.56 2.75c4.37 6.03 6.02 9.42 8.03 17.72m2.54-15.38c-3.72 4.35-8.94 5.66-16.88 5.85m19.5 1.9c-3.5-.93-6.63-.82-8.94 0-2.58.92-5.01 2.86-7.44 6.32"
    }));
});
Dribbble.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Dribbble.displayName = "Dribbble";
var Droplet = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"
    }));
});
Droplet.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Droplet.displayName = "Droplet";
var Edit2 = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"
    }));
});
Edit2.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Edit2.displayName = "Edit2";
var Edit3 = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M12 20h9"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"
    }));
});
Edit3.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Edit3.displayName = "Edit3";
var Edit = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"
    }));
});
Edit.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Edit.displayName = "Edit";
var ExternalLink = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "15 3 21 3 21 9"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "10",
        y1: "14",
        x2: "21",
        y2: "3"
    }));
});
ExternalLink.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ExternalLink.displayName = "ExternalLink";
var EyeOff = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "1",
        x2: "23",
        y2: "23"
    }));
});
EyeOff.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
EyeOff.displayName = "EyeOff";
var Eye = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "3"
    }));
});
Eye.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Eye.displayName = "Eye";
var Facebook = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"
    }));
});
Facebook.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Facebook.displayName = "Facebook";
var FastForward = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "13 19 22 12 13 5 13 19"
    }), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "2 19 11 12 2 5 2 19"
    }));
});
FastForward.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
FastForward.displayName = "FastForward";
var Feather = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16",
        y1: "8",
        x2: "2",
        y2: "22"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "17.5",
        y1: "15",
        x2: "9",
        y2: "15"
    }));
});
Feather.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Feather.displayName = "Feather";
var Figma = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z"
    }));
});
Figma.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Figma.displayName = "Figma";
var FileMinus = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "14 2 14 8 20 8"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "15",
        x2: "15",
        y2: "15"
    }));
});
FileMinus.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
FileMinus.displayName = "FileMinus";
var FilePlus = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "14 2 14 8 20 8"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "18",
        x2: "12",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "15",
        x2: "15",
        y2: "15"
    }));
});
FilePlus.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
FilePlus.displayName = "FilePlus";
var FileText = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "14 2 14 8 20 8"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16",
        y1: "13",
        x2: "8",
        y2: "13"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16",
        y1: "17",
        x2: "8",
        y2: "17"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "10 9 9 9 8 9"
    }));
});
FileText.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
FileText.displayName = "FileText";
var File = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "13 2 13 9 20 9"
    }));
});
File.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
File.displayName = "File";
var Film = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "2",
        y: "2",
        width: "20",
        height: "20",
        rx: "2.18",
        ry: "2.18"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "7",
        y1: "2",
        x2: "7",
        y2: "22"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "17",
        y1: "2",
        x2: "17",
        y2: "22"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "2",
        y1: "12",
        x2: "22",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "2",
        y1: "7",
        x2: "7",
        y2: "7"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "2",
        y1: "17",
        x2: "7",
        y2: "17"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "17",
        y1: "17",
        x2: "22",
        y2: "17"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "17",
        y1: "7",
        x2: "22",
        y2: "7"
    }));
});
Film.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Film.displayName = "Film";
var Filter = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"
    }));
});
Filter.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Filter.displayName = "Filter";
var Flag = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4",
        y1: "22",
        x2: "4",
        y2: "15"
    }));
});
Flag.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Flag.displayName = "Flag";
var FolderMinus = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "14",
        x2: "15",
        y2: "14"
    }));
});
FolderMinus.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
FolderMinus.displayName = "FolderMinus";
var FolderPlus = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "11",
        x2: "12",
        y2: "17"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "14",
        x2: "15",
        y2: "14"
    }));
});
FolderPlus.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
FolderPlus.displayName = "FolderPlus";
var Folder = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"
    }));
});
Folder.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Folder.displayName = "Folder";
var Framer = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M5 16V9h14V2H5l14 14h-7m-7 0l7 7v-7m-7 0h7"
    }));
});
Framer.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Framer.displayName = "Framer";
var Frown = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16 16s-1.5-2-4-2-4 2-4 2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "9",
        x2: "9.01",
        y2: "9"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "15",
        y1: "9",
        x2: "15.01",
        y2: "9"
    }));
});
Frown.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Frown.displayName = "Frown";
var Gift = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "20 12 20 22 4 22 4 12"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "2",
        y: "7",
        width: "20",
        height: "5"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "22",
        x2: "12",
        y2: "7"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"
    }));
});
Gift.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Gift.displayName = "Gift";
var GitBranch = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "6",
        y1: "3",
        x2: "6",
        y2: "15"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "18",
        cy: "6",
        r: "3"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "6",
        cy: "18",
        r: "3"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M18 9a9 9 0 0 1-9 9"
    }));
});
GitBranch.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
GitBranch.displayName = "GitBranch";
var GitCommit = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1.05",
        y1: "12",
        x2: "7",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "17.01",
        y1: "12",
        x2: "22.96",
        y2: "12"
    }));
});
GitCommit.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
GitCommit.displayName = "GitCommit";
var GitMerge = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "18",
        cy: "18",
        r: "3"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "6",
        cy: "6",
        r: "3"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M6 21V9a9 9 0 0 0 9 9"
    }));
});
GitMerge.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
GitMerge.displayName = "GitMerge";
var GitPullRequest = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "18",
        cy: "18",
        r: "3"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "6",
        cy: "6",
        r: "3"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M13 6h3a2 2 0 0 1 2 2v7"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "6",
        y1: "9",
        x2: "6",
        y2: "21"
    }));
});
GitPullRequest.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
GitPullRequest.displayName = "GitPullRequest";
var GitHub = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"
    }));
});
GitHub.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
GitHub.displayName = "GitHub";
var Gitlab = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"
    }));
});
Gitlab.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Gitlab.displayName = "Gitlab";
var Globe = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "2",
        y1: "12",
        x2: "22",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"
    }));
});
Globe.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Globe.displayName = "Globe";
var Grid = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "3",
        y: "3",
        width: "7",
        height: "7"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "14",
        y: "3",
        width: "7",
        height: "7"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "14",
        y: "14",
        width: "7",
        height: "7"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "3",
        y: "14",
        width: "7",
        height: "7"
    }));
});
Grid.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Grid.displayName = "Grid";
var HardDrive = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "22",
        y1: "12",
        x2: "2",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "6",
        y1: "16",
        x2: "6.01",
        y2: "16"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "10",
        y1: "16",
        x2: "10.01",
        y2: "16"
    }));
});
HardDrive.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
HardDrive.displayName = "HardDrive";
var Hash = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4",
        y1: "9",
        x2: "20",
        y2: "9"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4",
        y1: "15",
        x2: "20",
        y2: "15"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "10",
        y1: "3",
        x2: "8",
        y2: "21"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16",
        y1: "3",
        x2: "14",
        y2: "21"
    }));
});
Hash.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Hash.displayName = "Hash";
var Headphones = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M3 18v-6a9 9 0 0 1 18 0v6"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"
    }));
});
Headphones.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Headphones.displayName = "Headphones";
var Heart = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"
    }));
});
Heart.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Heart.displayName = "Heart";
var HelpCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "17",
        x2: "12.01",
        y2: "17"
    }));
});
HelpCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
HelpCircle.displayName = "HelpCircle";
var Hexagon = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"
    }));
});
Hexagon.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Hexagon.displayName = "Hexagon";
var Home = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "9 22 9 12 15 12 15 22"
    }));
});
Home.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Home.displayName = "Home";
var Image = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "3",
        y: "3",
        width: "18",
        height: "18",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "8.5",
        cy: "8.5",
        r: "1.5"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "21 15 16 10 5 21"
    }));
});
Image.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Image.displayName = "Image";
var Inbox = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "22 12 16 12 14 15 10 15 8 12 2 12"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"
    }));
});
Inbox.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Inbox.displayName = "Inbox";
var Info = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "16",
        x2: "12",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "8",
        x2: "12.01",
        y2: "8"
    }));
});
Info.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Info.displayName = "Info";
var Instagram = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "2",
        y: "2",
        width: "20",
        height: "20",
        rx: "5",
        ry: "5"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "17.5",
        y1: "6.5",
        x2: "17.51",
        y2: "6.5"
    }));
});
Instagram.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Instagram.displayName = "Instagram";
var Italic = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "19",
        y1: "4",
        x2: "10",
        y2: "4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "14",
        y1: "20",
        x2: "5",
        y2: "20"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "15",
        y1: "4",
        x2: "9",
        y2: "20"
    }));
});
Italic.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Italic.displayName = "Italic";
var Key = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 2l-2 2m-7.61 7.61a5.5 5.5 0 1 1-7.778 7.778 5.5 5.5 0 0 1 7.777-7.777zm0 0L15.5 7.5m0 0l3 3L22 7l-3-3m-3.5 3.5L19 4"
    }));
});
Key.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Key.displayName = "Key";
var Layers = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "12 2 2 7 12 12 22 7 12 2"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "2 17 12 22 22 17"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "2 12 12 17 22 12"
    }));
});
Layers.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Layers.displayName = "Layers";
var Layout = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "3",
        y: "3",
        width: "18",
        height: "18",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "3",
        y1: "9",
        x2: "21",
        y2: "9"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "21",
        x2: "9",
        y2: "9"
    }));
});
Layout.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Layout.displayName = "Layout";
var LifeBuoy = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4.93",
        y1: "4.93",
        x2: "9.17",
        y2: "9.17"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "14.83",
        y1: "14.83",
        x2: "19.07",
        y2: "19.07"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "14.83",
        y1: "9.17",
        x2: "19.07",
        y2: "4.93"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "14.83",
        y1: "9.17",
        x2: "18.36",
        y2: "5.64"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4.93",
        y1: "19.07",
        x2: "9.17",
        y2: "14.83"
    }));
});
LifeBuoy.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
LifeBuoy.displayName = "LifeBuoy";
var Link2 = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "12",
        x2: "16",
        y2: "12"
    }));
});
Link2.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Link2.displayName = "Link2";
var Link = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"
    }));
});
Link.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Link.displayName = "Link";
var Linkedin = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "2",
        y: "9",
        width: "4",
        height: "12"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "4",
        cy: "4",
        r: "2"
    }));
});
Linkedin.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Linkedin.displayName = "Linkedin";
var List = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "6",
        x2: "21",
        y2: "6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "12",
        x2: "21",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "18",
        x2: "21",
        y2: "18"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "3",
        y1: "6",
        x2: "3.01",
        y2: "6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "3",
        y1: "12",
        x2: "3.01",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "3",
        y1: "18",
        x2: "3.01",
        y2: "18"
    }));
});
List.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
List.displayName = "List";
var Loader = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "2",
        x2: "12",
        y2: "6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "18",
        x2: "12",
        y2: "22"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4.93",
        y1: "4.93",
        x2: "7.76",
        y2: "7.76"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16.24",
        y1: "16.24",
        x2: "19.07",
        y2: "19.07"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "2",
        y1: "12",
        x2: "6",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "18",
        y1: "12",
        x2: "22",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4.93",
        y1: "19.07",
        x2: "7.76",
        y2: "16.24"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16.24",
        y1: "7.76",
        x2: "19.07",
        y2: "4.93"
    }));
});
Loader.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Loader.displayName = "Loader";
var Lock = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "3",
        y: "11",
        width: "18",
        height: "11",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M7 11V7a5 5 0 0 1 10 0v4"
    }));
});
Lock.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Lock.displayName = "Lock";
var LogIn = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "10 17 15 12 10 7"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "15",
        y1: "12",
        x2: "3",
        y2: "12"
    }));
});
LogIn.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
LogIn.displayName = "LogIn";
var LogOut = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "16 17 21 12 16 7"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "12",
        x2: "9",
        y2: "12"
    }));
});
LogOut.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
LogOut.displayName = "LogOut";
var Mail = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "22,6 12,13 2,6"
    }));
});
Mail.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Mail.displayName = "Mail";
var MapPin = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "10",
        r: "3"
    }));
});
MapPin.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
MapPin.displayName = "MapPin";
var Map = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "2",
        x2: "8",
        y2: "18"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16",
        y1: "6",
        x2: "16",
        y2: "22"
    }));
});
Map.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Map.displayName = "Map";
var Maximize2 = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "15 3 21 3 21 9"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "9 21 3 21 3 15"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "3",
        x2: "14",
        y2: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "3",
        y1: "21",
        x2: "10",
        y2: "14"
    }));
});
Maximize2.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Maximize2.displayName = "Maximize2";
var Maximize = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"
    }));
});
Maximize.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Maximize.displayName = "Maximize";
var Meh = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "15",
        x2: "16",
        y2: "15"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "9",
        x2: "9.01",
        y2: "9"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "15",
        y1: "9",
        x2: "15.01",
        y2: "9"
    }));
});
Meh.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Meh.displayName = "Meh";
var Menu = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "3",
        y1: "12",
        x2: "21",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "3",
        y1: "6",
        x2: "21",
        y2: "6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "3",
        y1: "18",
        x2: "21",
        y2: "18"
    }));
});
Menu.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Menu.displayName = "Menu";
var MessageCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"
    }));
});
MessageCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
MessageCircle.displayName = "MessageCircle";
var MessageSquare = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
    }));
});
MessageSquare.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
MessageSquare.displayName = "MessageSquare";
var MicOff = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "1",
        x2: "23",
        y2: "23"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "19",
        x2: "12",
        y2: "23"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "23",
        x2: "16",
        y2: "23"
    }));
});
MicOff.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
MicOff.displayName = "MicOff";
var Mic = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M19 10v2a7 7 0 0 1-14 0v-2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "19",
        x2: "12",
        y2: "23"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "23",
        x2: "16",
        y2: "23"
    }));
});
Mic.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Mic.displayName = "Mic";
var Minimize2 = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "4 14 10 14 10 20"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "20 10 14 10 14 4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "14",
        y1: "10",
        x2: "21",
        y2: "3"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "3",
        y1: "21",
        x2: "10",
        y2: "14"
    }));
});
Minimize2.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Minimize2.displayName = "Minimize2";
var Minimize = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"
    }));
});
Minimize.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Minimize.displayName = "Minimize";
var MinusCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "12",
        x2: "16",
        y2: "12"
    }));
});
MinusCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
MinusCircle.displayName = "MinusCircle";
var MinusSquare = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "3",
        y: "3",
        width: "18",
        height: "18",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "12",
        x2: "16",
        y2: "12"
    }));
});
MinusSquare.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
MinusSquare.displayName = "MinusSquare";
var Minus = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "5",
        y1: "12",
        x2: "19",
        y2: "12"
    }));
});
Minus.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Minus.displayName = "Minus";
var Monitor = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "2",
        y: "3",
        width: "20",
        height: "14",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "21",
        x2: "16",
        y2: "21"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "17",
        x2: "12",
        y2: "21"
    }));
});
Monitor.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Monitor.displayName = "Monitor";
var Moon = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"
    }));
});
Moon.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Moon.displayName = "Moon";
var MoreHorizontal = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "1"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "19",
        cy: "12",
        r: "1"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "5",
        cy: "12",
        r: "1"
    }));
});
MoreHorizontal.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
MoreHorizontal.displayName = "MoreHorizontal";
var MoreVertical = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "1"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "5",
        r: "1"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "19",
        r: "1"
    }));
});
MoreVertical.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
MoreVertical.displayName = "MoreVertical";
var MousePointer = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M3 3l7.07 16.97 2.51-7.39 7.39-2.51L3 3z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M13 13l6 6"
    }));
});
MousePointer.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
MousePointer.displayName = "MousePointer";
var Move = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "5 9 2 12 5 15"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "9 5 12 2 15 5"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "15 19 12 22 9 19"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "19 9 22 12 19 15"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "2",
        y1: "12",
        x2: "22",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "2",
        x2: "12",
        y2: "22"
    }));
});
Move.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Move.displayName = "Move";
var Music = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M9 18V5l12-2v13"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "6",
        cy: "18",
        r: "3"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "18",
        cy: "16",
        r: "3"
    }));
});
Music.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Music.displayName = "Music";
var Navigation2 = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "12 2 19 21 12 17 5 21 12 2"
    }));
});
Navigation2.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Navigation2.displayName = "Navigation2";
var Navigation = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "3 11 22 2 13 21 11 13 3 11"
    }));
});
Navigation.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Navigation.displayName = "Navigation";
var Octagon = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"
    }));
});
Octagon.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Octagon.displayName = "Octagon";
var Package = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16.5",
        y1: "9.4",
        x2: "7.5",
        y2: "4.21"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "3.27 6.96 12 12.01 20.73 6.96"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "22.08",
        x2: "12",
        y2: "12"
    }));
});
Package.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Package.displayName = "Package";
var Paperclip = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"
    }));
});
Paperclip.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Paperclip.displayName = "Paperclip";
var PauseCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "10",
        y1: "15",
        x2: "10",
        y2: "9"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "14",
        y1: "15",
        x2: "14",
        y2: "9"
    }));
});
PauseCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
PauseCircle.displayName = "PauseCircle";
var Pause = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "6",
        y: "4",
        width: "4",
        height: "16"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "14",
        y: "4",
        width: "4",
        height: "16"
    }));
});
Pause.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Pause.displayName = "Pause";
var PenTool = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M12 19l7-7 3 3-7 7-3-3z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M18 13l-1.5-7.5L2 2l3.5 14.5L13 18l5-5z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M2 2l7.586 7.586"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "11",
        cy: "11",
        r: "2"
    }));
});
PenTool.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
PenTool.displayName = "PenTool";
var Percent = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "19",
        y1: "5",
        x2: "5",
        y2: "19"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "6.5",
        cy: "6.5",
        r: "2.5"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "17.5",
        cy: "17.5",
        r: "2.5"
    }));
});
Percent.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Percent.displayName = "Percent";
var PhoneCall = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
    }));
});
PhoneCall.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
PhoneCall.displayName = "PhoneCall";
var PhoneForwarded = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "19 1 23 5 19 9"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "15",
        y1: "5",
        x2: "23",
        y2: "5"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
    }));
});
PhoneForwarded.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
PhoneForwarded.displayName = "PhoneForwarded";
var PhoneIncoming = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "16 2 16 8 22 8"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "23",
        y1: "1",
        x2: "16",
        y2: "8"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
    }));
});
PhoneIncoming.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
PhoneIncoming.displayName = "PhoneIncoming";
var PhoneMissed = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "23",
        y1: "1",
        x2: "17",
        y2: "7"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "17",
        y1: "1",
        x2: "23",
        y2: "7"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
    }));
});
PhoneMissed.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
PhoneMissed.displayName = "PhoneMissed";
var PhoneOff = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "23",
        y1: "1",
        x2: "1",
        y2: "23"
    }));
});
PhoneOff.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
PhoneOff.displayName = "PhoneOff";
var PhoneOutgoing = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "23 7 23 1 17 1"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "16",
        y1: "8",
        x2: "23",
        y2: "1"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
    }));
});
PhoneOutgoing.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
PhoneOutgoing.displayName = "PhoneOutgoing";
var Phone = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
    }));
});
Phone.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Phone.displayName = "Phone";
var PieChart = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21.21 15.89A10 10 0 1 1 8 2.83"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M22 12A10 10 0 0 0 12 2v10z"
    }));
});
PieChart.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
PieChart.displayName = "PieChart";
var PlayCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "10 8 16 12 10 16 10 8"
    }));
});
PlayCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
PlayCircle.displayName = "PlayCircle";
var Play = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "5 3 19 12 5 21 5 3"
    }));
});
Play.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Play.displayName = "Play";
var PlusCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "8",
        x2: "12",
        y2: "16"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "12",
        x2: "16",
        y2: "12"
    }));
});
PlusCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
PlusCircle.displayName = "PlusCircle";
var PlusSquare = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "3",
        y: "3",
        width: "18",
        height: "18",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "8",
        x2: "12",
        y2: "16"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "12",
        x2: "16",
        y2: "12"
    }));
});
PlusSquare.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
PlusSquare.displayName = "PlusSquare";
var Plus = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "5",
        x2: "12",
        y2: "19"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "5",
        y1: "12",
        x2: "19",
        y2: "12"
    }));
});
Plus.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Plus.displayName = "Plus";
var Pocket = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "8 10 12 14 16 10"
    }));
});
Pocket.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Pocket.displayName = "Pocket";
var Power = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M18.36 6.64a9 9 0 1 1-12.73 0"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "2",
        x2: "12",
        y2: "12"
    }));
});
Power.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Power.displayName = "Power";
var Printer = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "6 9 6 2 18 2 18 9"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "6",
        y: "14",
        width: "12",
        height: "8"
    }));
});
Printer.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Printer.displayName = "Printer";
var Radio = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "2"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"
    }));
});
Radio.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Radio.displayName = "Radio";
var RefreshCcw = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "1 4 1 10 7 10"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "23 20 23 14 17 14"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"
    }));
});
RefreshCcw.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
RefreshCcw.displayName = "RefreshCcw";
var RefreshCw = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "23 4 23 10 17 10"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "1 20 1 14 7 14"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"
    }));
});
RefreshCw.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
RefreshCw.displayName = "RefreshCw";
var Repeat = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "17 1 21 5 17 9"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M3 11V9a4 4 0 0 1 4-4h14"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "7 23 3 19 7 15"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 13v2a4 4 0 0 1-4 4H3"
    }));
});
Repeat.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Repeat.displayName = "Repeat";
var Rewind = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "11 19 2 12 11 5 11 19"
    }), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "22 19 13 12 22 5 22 19"
    }));
});
Rewind.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Rewind.displayName = "Rewind";
var RotateCcw = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "1 4 1 10 7 10"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M3.51 15a9 9 0 1 0 2.13-9.36L1 10"
    }));
});
RotateCcw.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
RotateCcw.displayName = "RotateCcw";
var RotateCw = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "23 4 23 10 17 10"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20.49 15a9 9 0 1 1-2.12-9.36L23 10"
    }));
});
RotateCw.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
RotateCw.displayName = "RotateCw";
var Rss = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M4 11a9 9 0 0 1 9 9"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M4 4a16 16 0 0 1 16 16"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "5",
        cy: "19",
        r: "1"
    }));
});
Rss.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Rss.displayName = "Rss";
var Save = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "17 21 17 13 7 13 7 21"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "7 3 7 8 15 8"
    }));
});
Save.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Save.displayName = "Save";
var Scissors = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "6",
        cy: "6",
        r: "3"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "6",
        cy: "18",
        r: "3"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "20",
        y1: "4",
        x2: "8.12",
        y2: "15.88"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "14.47",
        y1: "14.48",
        x2: "20",
        y2: "20"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8.12",
        y1: "8.12",
        x2: "12",
        y2: "12"
    }));
});
Scissors.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Scissors.displayName = "Scissors";
var Search = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "11",
        cy: "11",
        r: "8"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "21",
        x2: "16.65",
        y2: "16.65"
    }));
});
Search.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Search.displayName = "Search";
var Send = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "22",
        y1: "2",
        x2: "11",
        y2: "13"
    }), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "22 2 15 22 11 13 2 9 22 2"
    }));
});
Send.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Send.displayName = "Send";
var Server = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "2",
        y: "2",
        width: "20",
        height: "8",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "2",
        y: "14",
        width: "20",
        height: "8",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "6",
        y1: "6",
        x2: "6.01",
        y2: "6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "6",
        y1: "18",
        x2: "6.01",
        y2: "18"
    }));
});
Server.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Server.displayName = "Server";
var Settings = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "3"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"
    }));
});
Settings.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Settings.displayName = "Settings";
var Share2 = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "18",
        cy: "5",
        r: "3"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "6",
        cy: "12",
        r: "3"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "18",
        cy: "19",
        r: "3"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8.59",
        y1: "13.51",
        x2: "15.42",
        y2: "17.49"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "15.41",
        y1: "6.51",
        x2: "8.59",
        y2: "10.49"
    }));
});
Share2.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Share2.displayName = "Share2";
var Share = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "16 6 12 2 8 6"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "2",
        x2: "12",
        y2: "15"
    }));
});
Share.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Share.displayName = "Share";
var ShieldOff = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "1",
        x2: "23",
        y2: "23"
    }));
});
ShieldOff.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ShieldOff.displayName = "ShieldOff";
var Shield = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"
    }));
});
Shield.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Shield.displayName = "Shield";
var ShoppingBag = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "3",
        y1: "6",
        x2: "21",
        y2: "6"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16 10a4 4 0 0 1-8 0"
    }));
});
ShoppingBag.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ShoppingBag.displayName = "ShoppingBag";
var ShoppingCart = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "9",
        cy: "21",
        r: "1"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "20",
        cy: "21",
        r: "1"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"
    }));
});
ShoppingCart.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ShoppingCart.displayName = "ShoppingCart";
var Shuffle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "16 3 21 3 21 8"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4",
        y1: "20",
        x2: "21",
        y2: "3"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "21 16 21 21 16 21"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "15",
        y1: "15",
        x2: "21",
        y2: "21"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4",
        y1: "4",
        x2: "9",
        y2: "9"
    }));
});
Shuffle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Shuffle.displayName = "Shuffle";
var Sidebar = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "3",
        y: "3",
        width: "18",
        height: "18",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "3",
        x2: "9",
        y2: "21"
    }));
});
Sidebar.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Sidebar.displayName = "Sidebar";
var SkipBack = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "19 20 9 12 19 4 19 20"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "5",
        y1: "19",
        x2: "5",
        y2: "5"
    }));
});
SkipBack.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
SkipBack.displayName = "SkipBack";
var SkipForward = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "5 4 15 12 5 20 5 4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "19",
        y1: "5",
        x2: "19",
        y2: "19"
    }));
});
SkipForward.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
SkipForward.displayName = "SkipForward";
var Slack = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"
    }));
});
Slack.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Slack.displayName = "Slack";
var Slash = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4.93",
        y1: "4.93",
        x2: "19.07",
        y2: "19.07"
    }));
});
Slash.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Slash.displayName = "Slash";
var Sliders = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4",
        y1: "21",
        x2: "4",
        y2: "14"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4",
        y1: "10",
        x2: "4",
        y2: "3"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "21",
        x2: "12",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "8",
        x2: "12",
        y2: "3"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "20",
        y1: "21",
        x2: "20",
        y2: "16"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "20",
        y1: "12",
        x2: "20",
        y2: "3"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "14",
        x2: "7",
        y2: "14"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "8",
        x2: "15",
        y2: "8"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "17",
        y1: "16",
        x2: "23",
        y2: "16"
    }));
});
Sliders.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Sliders.displayName = "Sliders";
var Smartphone = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "5",
        y: "2",
        width: "14",
        height: "20",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "18",
        x2: "12.01",
        y2: "18"
    }));
});
Smartphone.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Smartphone.displayName = "Smartphone";
var Smile = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M8 14s1.5 2 4 2 4-2 4-2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "9",
        x2: "9.01",
        y2: "9"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "15",
        y1: "9",
        x2: "15.01",
        y2: "9"
    }));
});
Smile.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Smile.displayName = "Smile";
var Speaker = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "4",
        y: "2",
        width: "16",
        height: "20",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "14",
        r: "4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "6",
        x2: "12.01",
        y2: "6"
    }));
});
Speaker.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Speaker.displayName = "Speaker";
var Square = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "3",
        y: "3",
        width: "18",
        height: "18",
        rx: "2",
        ry: "2"
    }));
});
Square.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Square.displayName = "Square";
var Star = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"
    }));
});
Star.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Star.displayName = "Star";
var StopCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "9",
        y: "9",
        width: "6",
        height: "6"
    }));
});
StopCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
StopCircle.displayName = "StopCircle";
var Sun = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "5"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "1",
        x2: "12",
        y2: "3"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "21",
        x2: "12",
        y2: "23"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4.22",
        y1: "4.22",
        x2: "5.64",
        y2: "5.64"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "18.36",
        y1: "18.36",
        x2: "19.78",
        y2: "19.78"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "12",
        x2: "3",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "12",
        x2: "23",
        y2: "12"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4.22",
        y1: "19.78",
        x2: "5.64",
        y2: "18.36"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "18.36",
        y1: "5.64",
        x2: "19.78",
        y2: "4.22"
    }));
});
Sun.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Sun.displayName = "Sun";
var Sunrise = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M17 18a5 5 0 0 0-10 0"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "2",
        x2: "12",
        y2: "9"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4.22",
        y1: "10.22",
        x2: "5.64",
        y2: "11.64"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "18",
        x2: "3",
        y2: "18"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "18",
        x2: "23",
        y2: "18"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "18.36",
        y1: "11.64",
        x2: "19.78",
        y2: "10.22"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "23",
        y1: "22",
        x2: "1",
        y2: "22"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "8 6 12 2 16 6"
    }));
});
Sunrise.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Sunrise.displayName = "Sunrise";
var Sunset = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M17 18a5 5 0 0 0-10 0"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "9",
        x2: "12",
        y2: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4.22",
        y1: "10.22",
        x2: "5.64",
        y2: "11.64"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "18",
        x2: "3",
        y2: "18"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "18",
        x2: "23",
        y2: "18"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "18.36",
        y1: "11.64",
        x2: "19.78",
        y2: "10.22"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "23",
        y1: "22",
        x2: "1",
        y2: "22"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "16 5 12 9 8 5"
    }));
});
Sunset.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Sunset.displayName = "Sunset";
var Table = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18"
    }));
});
Table.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Table.displayName = "Table";
var Tablet = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "4",
        y: "2",
        width: "16",
        height: "20",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "18",
        x2: "12.01",
        y2: "18"
    }));
});
Tablet.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Tablet.displayName = "Tablet";
var Tag = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "7",
        y1: "7",
        x2: "7.01",
        y2: "7"
    }));
});
Tag.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Tag.displayName = "Tag";
var Target = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "6"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "2"
    }));
});
Target.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Target.displayName = "Target";
var Terminal = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "4 17 10 11 4 5"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "19",
        x2: "20",
        y2: "19"
    }));
});
Terminal.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Terminal.displayName = "Terminal";
var Thermometer = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"
    }));
});
Thermometer.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Thermometer.displayName = "Thermometer";
var ThumbsDown = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"
    }));
});
ThumbsDown.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ThumbsDown.displayName = "ThumbsDown";
var ThumbsUp = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"
    }));
});
ThumbsUp.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ThumbsUp.displayName = "ThumbsUp";
var ToggleLeft = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "1",
        y: "5",
        width: "22",
        height: "14",
        rx: "7",
        ry: "7"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "8",
        cy: "12",
        r: "3"
    }));
});
ToggleLeft.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ToggleLeft.displayName = "ToggleLeft";
var ToggleRight = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "1",
        y: "5",
        width: "22",
        height: "14",
        rx: "7",
        ry: "7"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "16",
        cy: "12",
        r: "3"
    }));
});
ToggleRight.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ToggleRight.displayName = "ToggleRight";
var Tool = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"
    }));
});
Tool.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Tool.displayName = "Tool";
var Trash2 = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "3 6 5 6 21 6"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "10",
        y1: "11",
        x2: "10",
        y2: "17"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "14",
        y1: "11",
        x2: "14",
        y2: "17"
    }));
});
Trash2.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Trash2.displayName = "Trash2";
var Trash = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "3 6 5 6 21 6"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"
    }));
});
Trash.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Trash.displayName = "Trash";
var Trello = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "3",
        y: "3",
        width: "18",
        height: "18",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "7",
        y: "7",
        width: "3",
        height: "9"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "14",
        y: "7",
        width: "3",
        height: "5"
    }));
});
Trello.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Trello.displayName = "Trello";
var TrendingDown = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "23 18 13.5 8.5 8.5 13.5 1 6"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "17 18 23 18 23 12"
    }));
});
TrendingDown.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
TrendingDown.displayName = "TrendingDown";
var TrendingUp = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "23 6 13.5 15.5 8.5 10.5 1 18"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "17 6 23 6 23 12"
    }));
});
TrendingUp.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
TrendingUp.displayName = "TrendingUp";
var Triangle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"
    }));
});
Triangle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Triangle.displayName = "Triangle";
var Truck = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "1",
        y: "3",
        width: "15",
        height: "13"
    }), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "16 8 20 8 23 11 23 16 16 16 16 8"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "5.5",
        cy: "18.5",
        r: "2.5"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "18.5",
        cy: "18.5",
        r: "2.5"
    }));
});
Truck.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Truck.displayName = "Truck";
var Tv = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "2",
        y: "7",
        width: "20",
        height: "15",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "17 2 12 7 7 2"
    }));
});
Tv.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Tv.displayName = "Tv";
var Twitch = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7"
    }));
});
Twitch.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Twitch.displayName = "Twitch";
var Twitter = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"
    }));
});
Twitter.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Twitter.displayName = "Twitter";
var Type = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "4 7 4 4 20 4 20 7"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "20",
        x2: "15",
        y2: "20"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "4",
        x2: "12",
        y2: "20"
    }));
});
Type.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Type.displayName = "Type";
var Umbrella = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"
    }));
});
Umbrella.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Umbrella.displayName = "Umbrella";
var Underline = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "4",
        y1: "21",
        x2: "20",
        y2: "21"
    }));
});
Underline.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Underline.displayName = "Underline";
var Unlock = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "3",
        y: "11",
        width: "18",
        height: "11",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M7 11V7a5 5 0 0 1 9.9-1"
    }));
});
Unlock.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Unlock.displayName = "Unlock";
var UploadCloud = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "16 16 12 12 8 16"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "12",
        x2: "12",
        y2: "21"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "16 16 12 12 8 16"
    }));
});
UploadCloud.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
UploadCloud.displayName = "UploadCloud";
var Upload = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "17 8 12 3 7 8"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "3",
        x2: "12",
        y2: "15"
    }));
});
Upload.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Upload.displayName = "Upload";
var UserCheck = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "8.5",
        cy: "7",
        r: "4"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "17 11 19 13 23 9"
    }));
});
UserCheck.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
UserCheck.displayName = "UserCheck";
var UserMinus = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "8.5",
        cy: "7",
        r: "4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "23",
        y1: "11",
        x2: "17",
        y2: "11"
    }));
});
UserMinus.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
UserMinus.displayName = "UserMinus";
var UserPlus = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "8.5",
        cy: "7",
        r: "4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "20",
        y1: "8",
        x2: "20",
        y2: "14"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "23",
        y1: "11",
        x2: "17",
        y2: "11"
    }));
});
UserPlus.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
UserPlus.displayName = "UserPlus";
var UserX = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "8.5",
        cy: "7",
        r: "4"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "18",
        y1: "8",
        x2: "23",
        y2: "13"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "23",
        y1: "8",
        x2: "18",
        y2: "13"
    }));
});
UserX.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
UserX.displayName = "UserX";
var User = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "7",
        r: "4"
    }));
});
User.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
User.displayName = "User";
var Users = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "9",
        cy: "7",
        r: "4"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M23 21v-2a4 4 0 0 0-3-3.87"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16 3.13a4 4 0 0 1 0 7.75"
    }));
});
Users.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Users.displayName = "Users";
var VideoOff = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "1",
        x2: "23",
        y2: "23"
    }));
});
VideoOff.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
VideoOff.displayName = "VideoOff";
var Video = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "23 7 16 12 23 17 23 7"
    }), /*#__PURE__*/ React__default.createElement("rect", {
        x: "1",
        y: "5",
        width: "15",
        height: "14",
        rx: "2",
        ry: "2"
    }));
});
Video.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Video.displayName = "Video";
var Voicemail = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "5.5",
        cy: "11.5",
        r: "4.5"
    }), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "18.5",
        cy: "11.5",
        r: "4.5"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "5.5",
        y1: "16",
        x2: "18.5",
        y2: "16"
    }));
});
Voicemail.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Voicemail.displayName = "Voicemail";
var Volume1 = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M15.54 8.46a5 5 0 0 1 0 7.07"
    }));
});
Volume1.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Volume1.displayName = "Volume1";
var Volume2 = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"
    }));
});
Volume2.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Volume2.displayName = "Volume2";
var VolumeX = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "23",
        y1: "9",
        x2: "17",
        y2: "15"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "17",
        y1: "9",
        x2: "23",
        y2: "15"
    }));
});
VolumeX.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
VolumeX.displayName = "VolumeX";
var Volume = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5"
    }));
});
Volume.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Volume.displayName = "Volume";
var Watch = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "7"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "12 9 12 12 13.5 13.5"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"
    }));
});
Watch.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Watch.displayName = "Watch";
var WifiOff = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "1",
        x2: "23",
        y2: "23"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M16.72 11.06A10.94 10.94 0 0 1 19 12.55"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M5 12.55a10.94 10.94 0 0 1 5.17-2.39"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M10.71 5.05A16 16 0 0 1 22.58 9"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M1.42 9a15.91 15.91 0 0 1 4.7-2.88"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M8.53 16.11a6 6 0 0 1 6.95 0"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "20",
        x2: "12.01",
        y2: "20"
    }));
});
WifiOff.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
WifiOff.displayName = "WifiOff";
var Wifi = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M5 12.55a11 11 0 0 1 14.08 0"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M1.42 9a16 16 0 0 1 21.16 0"
    }), /*#__PURE__*/ React__default.createElement("path", {
        d: "M8.53 16.11a6 6 0 0 1 6.95 0"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "12",
        y1: "20",
        x2: "12.01",
        y2: "20"
    }));
});
Wifi.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Wifi.displayName = "Wifi";
var Wind = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"
    }));
});
Wind.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Wind.displayName = "Wind";
var XCircle = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "12",
        cy: "12",
        r: "10"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "15",
        y1: "9",
        x2: "9",
        y2: "15"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "9",
        x2: "15",
        y2: "15"
    }));
});
XCircle.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
XCircle.displayName = "XCircle";
var XOctagon = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "15",
        y1: "9",
        x2: "9",
        y2: "15"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "9",
        x2: "15",
        y2: "15"
    }));
});
XOctagon.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
XOctagon.displayName = "XOctagon";
var XSquare = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("rect", {
        x: "3",
        y: "3",
        width: "18",
        height: "18",
        rx: "2",
        ry: "2"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "9",
        y1: "9",
        x2: "15",
        y2: "15"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "15",
        y1: "9",
        x2: "9",
        y2: "15"
    }));
});
XSquare.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
XSquare.displayName = "XSquare";
var X = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("line", {
        x1: "18",
        y1: "6",
        x2: "6",
        y2: "18"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "6",
        y1: "6",
        x2: "18",
        y2: "18"
    }));
});
X.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
X.displayName = "X";
var Youtube = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("path", {
        d: "M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"
    }), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02"
    }));
});
Youtube.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Youtube.displayName = "Youtube";
var ZapOff = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "12.41 6.75 13 2 10.57 4.92"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "18.57 12.91 21 10 15.66 10"
    }), /*#__PURE__*/ React__default.createElement("polyline", {
        points: "8 8 3 14 12 14 11 22 16 16"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "1",
        y1: "1",
        x2: "23",
        y2: "23"
    }));
});
ZapOff.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ZapOff.displayName = "ZapOff";
var Zap = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("polygon", {
        points: "13 2 3 14 12 14 11 22 21 10 12 10 13 2"
    }));
});
Zap.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
Zap.displayName = "Zap";
var ZoomIn = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "11",
        cy: "11",
        r: "8"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "21",
        x2: "16.65",
        y2: "16.65"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "11",
        y1: "8",
        x2: "11",
        y2: "14"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "11",
        x2: "14",
        y2: "11"
    }));
});
ZoomIn.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ZoomIn.displayName = "ZoomIn";
var ZoomOut = React.forwardRef(function(_ref, ref) {
    var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, [
        "color",
        "size"
    ]);
    return /*#__PURE__*/ React__default.createElement("svg", _extends({
        ref: ref,
        xmlns: "http://www.w3.org/2000/svg",
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, rest), /*#__PURE__*/ React__default.createElement("circle", {
        cx: "11",
        cy: "11",
        r: "8"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "21",
        y1: "21",
        x2: "16.65",
        y2: "16.65"
    }), /*#__PURE__*/ React__default.createElement("line", {
        x1: "8",
        y1: "11",
        x2: "14",
        y2: "11"
    }));
});
ZoomOut.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ])
};
ZoomOut.displayName = "ZoomOut";
__webpack_unused_export__ = Activity;
__webpack_unused_export__ = Airplay;
__webpack_unused_export__ = AlertCircle;
__webpack_unused_export__ = AlertOctagon;
__webpack_unused_export__ = AlertTriangle;
__webpack_unused_export__ = AlignCenter;
__webpack_unused_export__ = AlignJustify;
__webpack_unused_export__ = AlignLeft;
__webpack_unused_export__ = AlignRight;
__webpack_unused_export__ = Anchor;
__webpack_unused_export__ = Aperture;
__webpack_unused_export__ = Archive;
__webpack_unused_export__ = ArrowDown;
__webpack_unused_export__ = ArrowDownCircle;
__webpack_unused_export__ = ArrowDownLeft;
__webpack_unused_export__ = ArrowDownRight;
exports.XdH = ArrowLeft;
__webpack_unused_export__ = ArrowLeftCircle;
__webpack_unused_export__ = ArrowRight;
__webpack_unused_export__ = ArrowRightCircle;
__webpack_unused_export__ = ArrowUp;
__webpack_unused_export__ = ArrowUpCircle;
__webpack_unused_export__ = ArrowUpLeft;
__webpack_unused_export__ = ArrowUpRight;
__webpack_unused_export__ = AtSign;
__webpack_unused_export__ = Award;
__webpack_unused_export__ = BarChart;
__webpack_unused_export__ = BarChart2;
__webpack_unused_export__ = Battery;
__webpack_unused_export__ = BatteryCharging;
__webpack_unused_export__ = Bell;
__webpack_unused_export__ = BellOff;
__webpack_unused_export__ = Bluetooth;
__webpack_unused_export__ = Bold;
__webpack_unused_export__ = Book;
__webpack_unused_export__ = BookOpen;
__webpack_unused_export__ = Bookmark;
__webpack_unused_export__ = Box;
__webpack_unused_export__ = Briefcase;
__webpack_unused_export__ = Calendar;
__webpack_unused_export__ = Camera;
__webpack_unused_export__ = CameraOff;
__webpack_unused_export__ = Cast;
__webpack_unused_export__ = Check;
__webpack_unused_export__ = CheckCircle;
__webpack_unused_export__ = CheckSquare;
__webpack_unused_export__ = ChevronDown;
__webpack_unused_export__ = ChevronLeft;
exports._Qn = ChevronRight;
__webpack_unused_export__ = ChevronUp;
__webpack_unused_export__ = ChevronsDown;
__webpack_unused_export__ = ChevronsLeft;
__webpack_unused_export__ = ChevronsRight;
__webpack_unused_export__ = ChevronsUp;
__webpack_unused_export__ = Chrome;
__webpack_unused_export__ = Circle;
__webpack_unused_export__ = Clipboard;
__webpack_unused_export__ = Clock;
__webpack_unused_export__ = Cloud;
__webpack_unused_export__ = CloudDrizzle;
__webpack_unused_export__ = CloudLightning;
__webpack_unused_export__ = CloudOff;
__webpack_unused_export__ = CloudRain;
__webpack_unused_export__ = CloudSnow;
__webpack_unused_export__ = Code;
__webpack_unused_export__ = Codepen;
__webpack_unused_export__ = Codesandbox;
__webpack_unused_export__ = Coffee;
__webpack_unused_export__ = Columns;
__webpack_unused_export__ = Command;
__webpack_unused_export__ = Compass;
__webpack_unused_export__ = Copy;
__webpack_unused_export__ = CornerDownLeft;
__webpack_unused_export__ = CornerDownRight;
__webpack_unused_export__ = CornerLeftDown;
__webpack_unused_export__ = CornerLeftUp;
__webpack_unused_export__ = CornerRightDown;
__webpack_unused_export__ = CornerRightUp;
__webpack_unused_export__ = CornerUpLeft;
__webpack_unused_export__ = CornerUpRight;
__webpack_unused_export__ = Cpu;
__webpack_unused_export__ = CreditCard;
__webpack_unused_export__ = Crop;
__webpack_unused_export__ = Crosshair;
__webpack_unused_export__ = Database;
__webpack_unused_export__ = Delete;
__webpack_unused_export__ = Disc;
__webpack_unused_export__ = Divide;
__webpack_unused_export__ = DivideCircle;
__webpack_unused_export__ = DivideSquare;
__webpack_unused_export__ = DollarSign;
__webpack_unused_export__ = Download;
__webpack_unused_export__ = DownloadCloud;
__webpack_unused_export__ = Dribbble;
__webpack_unused_export__ = Droplet;
__webpack_unused_export__ = Edit;
__webpack_unused_export__ = Edit2;
__webpack_unused_export__ = Edit3;
__webpack_unused_export__ = ExternalLink;
__webpack_unused_export__ = Eye;
__webpack_unused_export__ = EyeOff;
__webpack_unused_export__ = Facebook;
__webpack_unused_export__ = FastForward;
__webpack_unused_export__ = Feather;
__webpack_unused_export__ = Figma;
__webpack_unused_export__ = File;
__webpack_unused_export__ = FileMinus;
__webpack_unused_export__ = FilePlus;
__webpack_unused_export__ = FileText;
__webpack_unused_export__ = Film;
__webpack_unused_export__ = Filter;
__webpack_unused_export__ = Flag;
__webpack_unused_export__ = Folder;
__webpack_unused_export__ = FolderMinus;
__webpack_unused_export__ = FolderPlus;
__webpack_unused_export__ = Framer;
__webpack_unused_export__ = Frown;
__webpack_unused_export__ = Gift;
__webpack_unused_export__ = GitBranch;
__webpack_unused_export__ = GitCommit;
__webpack_unused_export__ = GitHub;
__webpack_unused_export__ = GitMerge;
__webpack_unused_export__ = GitPullRequest;
__webpack_unused_export__ = Gitlab;
__webpack_unused_export__ = Globe;
__webpack_unused_export__ = Grid;
__webpack_unused_export__ = HardDrive;
__webpack_unused_export__ = Hash;
__webpack_unused_export__ = Headphones;
__webpack_unused_export__ = Heart;
__webpack_unused_export__ = HelpCircle;
__webpack_unused_export__ = Hexagon;
__webpack_unused_export__ = Home;
__webpack_unused_export__ = Image;
__webpack_unused_export__ = Inbox;
__webpack_unused_export__ = Info;
__webpack_unused_export__ = Instagram;
__webpack_unused_export__ = Italic;
__webpack_unused_export__ = Key;
__webpack_unused_export__ = Layers;
__webpack_unused_export__ = Layout;
__webpack_unused_export__ = LifeBuoy;
__webpack_unused_export__ = Link;
__webpack_unused_export__ = Link2;
__webpack_unused_export__ = Linkedin;
__webpack_unused_export__ = List;
__webpack_unused_export__ = Loader;
__webpack_unused_export__ = Lock;
__webpack_unused_export__ = LogIn;
__webpack_unused_export__ = LogOut;
__webpack_unused_export__ = Mail;
__webpack_unused_export__ = Map;
__webpack_unused_export__ = MapPin;
__webpack_unused_export__ = Maximize;
__webpack_unused_export__ = Maximize2;
__webpack_unused_export__ = Meh;
__webpack_unused_export__ = Menu;
__webpack_unused_export__ = MessageCircle;
__webpack_unused_export__ = MessageSquare;
__webpack_unused_export__ = Mic;
__webpack_unused_export__ = MicOff;
__webpack_unused_export__ = Minimize;
__webpack_unused_export__ = Minimize2;
__webpack_unused_export__ = Minus;
__webpack_unused_export__ = MinusCircle;
__webpack_unused_export__ = MinusSquare;
__webpack_unused_export__ = Monitor;
__webpack_unused_export__ = Moon;
__webpack_unused_export__ = MoreHorizontal;
__webpack_unused_export__ = MoreVertical;
__webpack_unused_export__ = MousePointer;
__webpack_unused_export__ = Move;
__webpack_unused_export__ = Music;
__webpack_unused_export__ = Navigation;
__webpack_unused_export__ = Navigation2;
__webpack_unused_export__ = Octagon;
__webpack_unused_export__ = Package;
__webpack_unused_export__ = Paperclip;
__webpack_unused_export__ = Pause;
__webpack_unused_export__ = PauseCircle;
__webpack_unused_export__ = PenTool;
__webpack_unused_export__ = Percent;
__webpack_unused_export__ = Phone;
__webpack_unused_export__ = PhoneCall;
__webpack_unused_export__ = PhoneForwarded;
__webpack_unused_export__ = PhoneIncoming;
__webpack_unused_export__ = PhoneMissed;
__webpack_unused_export__ = PhoneOff;
__webpack_unused_export__ = PhoneOutgoing;
__webpack_unused_export__ = PieChart;
__webpack_unused_export__ = Play;
__webpack_unused_export__ = PlayCircle;
__webpack_unused_export__ = Plus;
__webpack_unused_export__ = PlusCircle;
__webpack_unused_export__ = PlusSquare;
__webpack_unused_export__ = Pocket;
__webpack_unused_export__ = Power;
__webpack_unused_export__ = Printer;
__webpack_unused_export__ = Radio;
__webpack_unused_export__ = RefreshCcw;
__webpack_unused_export__ = RefreshCw;
__webpack_unused_export__ = Repeat;
__webpack_unused_export__ = Rewind;
__webpack_unused_export__ = RotateCcw;
__webpack_unused_export__ = RotateCw;
__webpack_unused_export__ = Rss;
__webpack_unused_export__ = Save;
__webpack_unused_export__ = Scissors;
__webpack_unused_export__ = Search;
__webpack_unused_export__ = Send;
__webpack_unused_export__ = Server;
__webpack_unused_export__ = Settings;
__webpack_unused_export__ = Share;
__webpack_unused_export__ = Share2;
__webpack_unused_export__ = Shield;
__webpack_unused_export__ = ShieldOff;
__webpack_unused_export__ = ShoppingBag;
__webpack_unused_export__ = ShoppingCart;
__webpack_unused_export__ = Shuffle;
__webpack_unused_export__ = Sidebar;
__webpack_unused_export__ = SkipBack;
__webpack_unused_export__ = SkipForward;
__webpack_unused_export__ = Slack;
__webpack_unused_export__ = Slash;
__webpack_unused_export__ = Sliders;
__webpack_unused_export__ = Smartphone;
__webpack_unused_export__ = Smile;
__webpack_unused_export__ = Speaker;
__webpack_unused_export__ = Square;
__webpack_unused_export__ = Star;
__webpack_unused_export__ = StopCircle;
__webpack_unused_export__ = Sun;
__webpack_unused_export__ = Sunrise;
__webpack_unused_export__ = Sunset;
__webpack_unused_export__ = Table;
__webpack_unused_export__ = Tablet;
__webpack_unused_export__ = Tag;
__webpack_unused_export__ = Target;
__webpack_unused_export__ = Terminal;
__webpack_unused_export__ = Thermometer;
__webpack_unused_export__ = ThumbsDown;
__webpack_unused_export__ = ThumbsUp;
__webpack_unused_export__ = ToggleLeft;
__webpack_unused_export__ = ToggleRight;
__webpack_unused_export__ = Tool;
__webpack_unused_export__ = Trash;
__webpack_unused_export__ = Trash2;
__webpack_unused_export__ = Trello;
__webpack_unused_export__ = TrendingDown;
__webpack_unused_export__ = TrendingUp;
__webpack_unused_export__ = Triangle;
__webpack_unused_export__ = Truck;
__webpack_unused_export__ = Tv;
__webpack_unused_export__ = Twitch;
__webpack_unused_export__ = Twitter;
__webpack_unused_export__ = Type;
__webpack_unused_export__ = Umbrella;
__webpack_unused_export__ = Underline;
__webpack_unused_export__ = Unlock;
__webpack_unused_export__ = Upload;
__webpack_unused_export__ = UploadCloud;
__webpack_unused_export__ = User;
__webpack_unused_export__ = UserCheck;
__webpack_unused_export__ = UserMinus;
__webpack_unused_export__ = UserPlus;
__webpack_unused_export__ = UserX;
__webpack_unused_export__ = Users;
__webpack_unused_export__ = Video;
__webpack_unused_export__ = VideoOff;
__webpack_unused_export__ = Voicemail;
__webpack_unused_export__ = Volume;
__webpack_unused_export__ = Volume1;
__webpack_unused_export__ = Volume2;
__webpack_unused_export__ = VolumeX;
__webpack_unused_export__ = Watch;
__webpack_unused_export__ = Wifi;
__webpack_unused_export__ = WifiOff;
__webpack_unused_export__ = Wind;
__webpack_unused_export__ = X;
__webpack_unused_export__ = XCircle;
__webpack_unused_export__ = XOctagon;
__webpack_unused_export__ = XSquare;
__webpack_unused_export__ = Youtube;
__webpack_unused_export__ = Zap;
__webpack_unused_export__ = ZapOff;
__webpack_unused_export__ = ZoomIn;
__webpack_unused_export__ = ZoomOut;


/***/ }),

/***/ 999:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/ var pna = __webpack_require__(4135);
/*</replacement>*/ /*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj){
        keys.push(key);
    }
    return keys;
};
/*</replacement>*/ module.exports = Duplex;
/*<replacement>*/ var util = Object.create(__webpack_require__(5106));
util.inherits = __webpack_require__(4765);
/*</replacement>*/ var Readable = __webpack_require__(3642);
var Writable = __webpack_require__(8971);
util.inherits(Duplex, Readable);
{
    // avoid scope creep, the keys array can then be collected
    var keys = objectKeys(Writable.prototype);
    for(var v = 0; v < keys.length; v++){
        var method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    }
}function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    if (options && options.readable === false) this.readable = false;
    if (options && options.writable === false) this.writable = false;
    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
    this.once("end", onend);
}
Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function() {
        return this._writableState.highWaterMark;
    }
});
// the no-half-open enforcer
function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    pna.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, "destroyed", {
    get: function() {
        if (this._readableState === undefined || this._writableState === undefined) {
            return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) {
            return;
        }
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});
Duplex.prototype._destroy = function(err, cb) {
    this.push(null);
    this.end();
    pna.nextTick(cb, err);
};


/***/ }),

/***/ 5032:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;
var Transform = __webpack_require__(2904);
/*<replacement>*/ var util = Object.create(__webpack_require__(5106));
util.inherits = __webpack_require__(4765);
/*</replacement>*/ util.inherits(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};


/***/ }),

/***/ 3642:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

/*<replacement>*/ var pna = __webpack_require__(4135);
/*</replacement>*/ module.exports = Readable;
/*<replacement>*/ var isArray = __webpack_require__(443);
/*</replacement>*/ /*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = (__webpack_require__(2361).EventEmitter);
var EElistenerCount = function(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = __webpack_require__(8446);
/*</replacement>*/ /*<replacement>*/ var Buffer = (__webpack_require__(7458).Buffer);
var OurUint8Array = global.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/ /*<replacement>*/ var util = Object.create(__webpack_require__(5106));
util.inherits = __webpack_require__(4765);
/*</replacement>*/ /*<replacement>*/ var debugUtil = __webpack_require__(3849);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
    debug = debugUtil.debuglog("stream");
} else {
    debug = function() {};
}
/*</replacement>*/ var BufferList = __webpack_require__(7308);
var destroyImpl = __webpack_require__(8109);
var StringDecoder;
util.inherits(Readable, Stream);
var kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream) {
    Duplex = Duplex || __webpack_require__(999);
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    var isDuplex = stream instanceof Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    var hwm = options.highWaterMark;
    var readableHwm = options.readableHighWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    if (hwm || hwm === 0) this.highWaterMark = hwm;
    else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;
    else this.highWaterMark = defaultHwm;
    // cast to ints.
    this.highWaterMark = Math.floor(this.highWaterMark);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = (__webpack_require__(369)/* .StringDecoder */ .s);
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || __webpack_require__(999);
    if (!(this instanceof Readable)) return new Readable(options);
    this._readableState = new ReadableState(options, this);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, "destroyed", {
    get: function() {
        if (this._readableState === undefined) {
            return false;
        }
        return this._readableState.destroyed;
    },
    set: function(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) {
            return;
        }
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    this.push(null);
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else {
        skipChunkCheck = true;
    }
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) {
            stream.emit("error", er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                chunk = _uint8ArrayToBuffer(chunk);
            }
            if (addToFront) {
                if (state.endEmitted) stream.emit("error", new Error("stream.unshift() after end event"));
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) {
                stream.emit("error", new Error("stream.push() after EOF"));
            } else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else {
                    addChunk(stream, state, chunk, false);
                }
            }
        } else if (!addToFront) {
            state.reading = false;
        }
    }
    return needMoreData(state);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit("data", chunk);
        stream.read(0);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) {
        er = new TypeError("Invalid non-string/buffer chunk");
    }
    return er;
}
// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};
// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = (__webpack_require__(369)/* .StringDecoder */ .s);
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
};
// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
        n = MAX_HWM;
    } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug("need readable", doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
    } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = true;
        n = 0;
    } else {
        state.length -= n;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function onEofChunk(stream, state) {
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    // emit 'readable' now to make sure it gets picked up.
    emitReadable(stream);
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        if (state.sync) pna.nextTick(emitReadable_, stream);
        else emitReadable_(stream);
    }
}
function emitReadable_(stream) {
    debug("emit readable");
    stream.emit("readable");
    flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        pna.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    var len = state.length;
    while(!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark){
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
        else len = state.length;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    this.emit("error", new Error("_read() is not implemented"));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) pna.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug("onend");
        dest.end();
    }
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug("cleanup");
        // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    // If the user pushes more data while we're writing to dest then we'll end up
    // in ondata again. However, we only want to increase awaitDrain once because
    // dest will only emit one 'drain' event for the multiple writes.
    // => Introduce a guard on increasing awaitDrain.
    var increasedAwaitDrain = false;
    src.on("data", ondata);
    function ondata(chunk) {
        debug("ondata");
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug("false write response, pause", src._readableState.awaitDrain);
                src._readableState.awaitDrain++;
                increasedAwaitDrain = true;
            }
            src.pause();
        }
    }
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) dest.emit("error", er);
    }
    // Make sure our error handler is attached before userland ones.
    prependListener(dest, "error", onerror);
    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
    }
    // tell the dest that it's being piped to
    dest.emit("pipe", src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug("pipe resume");
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++){
            dests[i].emit("unpipe", this, unpipeInfo);
        }
        return this;
    }
    // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    if (ev === "data") {
        // Start flowing on next tick if stream isn't explicitly paused
        if (this._readableState.flowing !== false) this.resume();
    } else if (ev === "readable") {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.emittedReadable = false;
            if (!state.reading) {
                pna.nextTick(nReadingNextTick, this);
            } else if (state.length) {
                emitReadable(this);
            }
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
function nReadingNextTick(self) {
    debug("readable nexttick read 0");
    self.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug("resume");
        state.flowing = true;
        resume(this, state);
    }
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        pna.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    if (!state.reading) {
        debug("resume read 0");
        stream.read(0);
    }
    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (false !== this._readableState.flowing) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null){}
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream){
        if (this[i] === undefined && typeof stream[i] === "function") {
            this[i] = function(method) {
                return function() {
                    return stream[method].apply(stream, arguments);
                };
            }(i);
        }
    }
    // proxy certain important events.
    for(var n = 0; n < kProxyEvents.length; n++){
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    }
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function() {
        return this._readableState.highWaterMark;
    }
});
// exposed for testing purposes only.
Readable._fromList = fromList;
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.head.data;
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else {
        // read part of list
        ret = fromListPartial(n, state.buffer, state.decoder);
    }
    return ret;
}
// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
    var ret;
    if (n < list.head.data.length) {
        // slice is the same for buffers and strings
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) {
        // first chunk is a perfect match
        ret = list.shift();
    } else {
        // result spans more than one buffer
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    }
    return ret;
}
// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;
    while(p = p.next){
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;
        else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
            if (nb === str.length) {
                ++c;
                if (p.next) list.head = p.next;
                else list.head = list.tail = null;
            } else {
                list.head = p;
                p.data = str.slice(nb);
            }
            break;
        }
        ++c;
    }
    list.length -= c;
    return ret;
}
// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
    var ret = Buffer.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;
    while(p = p.next){
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
            if (nb === buf.length) {
                ++c;
                if (p.next) list.head = p.next;
                else list.head = list.tail = null;
            } else {
                list.head = p;
                p.data = buf.slice(nb);
            }
            break;
        }
        ++c;
    }
    list.length -= c;
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.
    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
    if (!state.endEmitted) {
        state.ended = true;
        pna.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
    }
}
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}


/***/ }),

/***/ 2904:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;
var Duplex = __webpack_require__(999);
/*<replacement>*/ var util = Object.create(__webpack_require__(5106));
util.inherits = __webpack_require__(4765);
/*</replacement>*/ util.inherits(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (!cb) {
        return this.emit("error", new Error("write callback called multiple times"));
    }
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
    }
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === "function") {
        this._flush(function(er, data) {
            done(_this, er, data);
        });
    } else {
        done(this, null, null);
    }
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    throw new Error("_transform() is not implemented");
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
    }
};
Transform.prototype._destroy = function(err, cb) {
    var _this2 = this;
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
        _this2.emit("close");
    });
};
function done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) stream.push(data);
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new Error("Calling transform done when ws.length != 0");
    if (stream._transformState.transforming) throw new Error("Calling transform done when still transforming");
    return stream.push(null);
}


/***/ }),

/***/ 8971:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

/*<replacement>*/ var pna = __webpack_require__(4135);
/*</replacement>*/ module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var asyncWrite =  true && [
    "v0.10",
    "v0.9."
].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var util = Object.create(__webpack_require__(5106));
util.inherits = __webpack_require__(4765);
/*</replacement>*/ /*<replacement>*/ var internalUtil = {
    deprecate: __webpack_require__(6158)
};
/*</replacement>*/ /*<replacement>*/ var Stream = __webpack_require__(8446);
/*</replacement>*/ /*<replacement>*/ var Buffer = (__webpack_require__(7458).Buffer);
var OurUint8Array = global.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/ var destroyImpl = __webpack_require__(8109);
util.inherits(Writable, Stream);
function nop() {}
function WritableState(options, stream) {
    Duplex = Duplex || __webpack_require__(999);
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    var isDuplex = stream instanceof Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    var hwm = options.highWaterMark;
    var writableHwm = options.writableHighWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    if (hwm || hwm === 0) this.highWaterMark = hwm;
    else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;
    else this.highWaterMark = defaultHwm;
    // cast to ints.
    this.highWaterMark = Math.floor(this.highWaterMark);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer " + "instead.", "DEP0003")
        });
    } catch (_) {}
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else {
    realHasInstance = function(object) {
        return object instanceof this;
    };
}
function Writable(options) {
    Duplex = Duplex || __webpack_require__(999);
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
        return new Writable(options);
    }
    this._writableState = new WritableState(options, this);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    Stream.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    this.emit("error", new Error("Cannot pipe, not readable"));
};
function writeAfterEnd(stream, cb) {
    var er = new Error("write after end");
    // TODO: defer error events consistently everywhere, not just the cb
    stream.emit("error", er);
    pna.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false;
    if (chunk === null) {
        er = new TypeError("May not write null values to stream");
    } else if (typeof chunk !== "string" && chunk !== undefined && !state.objectMode) {
        er = new TypeError("Invalid non-string/buffer chunk");
    }
    if (er) {
        stream.emit("error", er);
        pna.nextTick(cb, er);
        valid = false;
    }
    return valid;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
    }
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = nop;
    if (state.ended) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    var state = this._writableState;
    state.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer.from(chunk, encoding);
    }
    return chunk;
}
Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) {
            last.next = state.lastBufferedRequest;
        } else {
            state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
    } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
    }
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        pna.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        pna.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        stream.emit("error", er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        stream.emit("error", er);
        // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state);
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
            clearBuffer(stream, state);
        }
        if (sync) {
            /*<replacement>*/ asyncWrite(afterWrite, stream, state, finished, cb);
        /*</replacement>*/ } else {
            afterWrite(stream, state, finished, cb);
        }
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
}
// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else {
            state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) {
                break;
            }
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new Error("_write() is not implemented"));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending && !state.finished) endWritable(this, state, cb);
};
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) {
            stream.emit("error", err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function") {
            state.pendingcb++;
            state.finalCalled = true;
            pna.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) pna.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = corkReq;
    } else {
        state.corkedRequestsFree = corkReq;
    }
}
Object.defineProperty(Writable.prototype, "destroyed", {
    get: function() {
        if (this._writableState === undefined) {
            return false;
        }
        return this._writableState.destroyed;
    },
    set: function(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) {
            return;
        }
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    this.end();
    cb(err);
};


/***/ }),

/***/ 7308:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var Buffer = (__webpack_require__(7458).Buffer);
var util = __webpack_require__(3849);
function copyBuffer(src, target, offset) {
    src.copy(target, offset);
}
module.exports = function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    BufferList.prototype.push = function push(v) {
        var entry = {
            data: v,
            next: null
        };
        if (this.length > 0) this.tail.next = entry;
        else this.head = entry;
        this.tail = entry;
        ++this.length;
    };
    BufferList.prototype.unshift = function unshift(v) {
        var entry = {
            data: v,
            next: this.head
        };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
    };
    BufferList.prototype.shift = function shift() {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;
        else this.head = this.head.next;
        --this.length;
        return ret;
    };
    BufferList.prototype.clear = function clear() {
        this.head = this.tail = null;
        this.length = 0;
    };
    BufferList.prototype.join = function join(s) {
        if (this.length === 0) return "";
        var p = this.head;
        var ret = "" + p.data;
        while(p = p.next){
            ret += s + p.data;
        }
        return ret;
    };
    BufferList.prototype.concat = function concat(n) {
        if (this.length === 0) return Buffer.alloc(0);
        if (this.length === 1) return this.head.data;
        var ret = Buffer.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
        while(p){
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
        }
        return ret;
    };
    return BufferList;
}();
if (util && util.inspect && util.inspect.custom) {
    module.exports.prototype[util.inspect.custom] = function() {
        var obj = util.inspect({
            length: this.length
        });
        return this.constructor.name + " " + obj;
    };
}


/***/ }),

/***/ 8109:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/*<replacement>*/ var pna = __webpack_require__(4135);
/*</replacement>*/ // undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) {
            cb(err);
        } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
            pna.nextTick(emitErrorNT, this, err);
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) {
        this._readableState.destroyed = true;
    }
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) {
        this._writableState.destroyed = true;
    }
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            pna.nextTick(emitErrorNT, _this, err);
            if (_this._writableState) {
                _this._writableState.errorEmitted = true;
            }
        } else if (cb) {
            cb(err);
        }
    });
    return this;
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit("error", err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy
};


/***/ }),

/***/ 8446:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = __webpack_require__(2781);


/***/ }),

/***/ 5635:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

var Stream = __webpack_require__(2781);
if (process.env.READABLE_STREAM === "disable" && Stream) {
    module.exports = Stream;
    exports = module.exports = Stream.Readable;
    exports.Readable = Stream.Readable;
    exports.Writable = Stream.Writable;
    exports.Duplex = Stream.Duplex;
    exports.Transform = Stream.Transform;
    exports.PassThrough = Stream.PassThrough;
    exports.Stream = Stream;
} else {
    exports = module.exports = __webpack_require__(3642);
    exports.Stream = Stream || exports;
    exports.Readable = exports;
    exports.Writable = __webpack_require__(8971);
    exports.Duplex = __webpack_require__(999);
    exports.Transform = __webpack_require__(2904);
    exports.PassThrough = __webpack_require__(5032);
}


/***/ }),

/***/ 5714:
/***/ ((module) => {

"use strict";

/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */ module.exports = function required(port, protocol) {
    protocol = protocol.split(":")[0];
    port = +port;
    if (!port) return false;
    switch(protocol){
        case "http":
        case "ws":
            return port !== 80;
        case "https":
        case "wss":
            return port !== 443;
        case "ftp":
            return port !== 21;
        case "gopher":
            return port !== 70;
        case "file":
            return false;
    }
    return port !== 0;
};


/***/ }),

/***/ 9488:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var canReportError_1 = __webpack_require__(6365);
var toSubscriber_1 = __webpack_require__(4624);
var observable_1 = __webpack_require__(5152);
var pipe_1 = __webpack_require__(769);
var config_1 = __webpack_require__(9538);
var Observable = function() {
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function(operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function(observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
        if (operator) {
            sink.add(operator.call(sink, this.source));
        } else {
            sink.add(this.source || config_1.config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
        }
        if (config_1.config.useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function(sink) {
        try {
            return this._subscribe(sink);
        } catch (err) {
            if (config_1.config.useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            }
            if (canReportError_1.canReportError(sink)) {
                sink.error(err);
            } else {
                console.warn(err);
            }
        }
    };
    Observable.prototype.forEach = function(next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function(resolve, reject) {
            var subscription;
            subscription = _this.subscribe(function(value) {
                try {
                    next(value);
                } catch (err) {
                    reject(err);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }
            }, reject, resolve);
        });
    };
    Observable.prototype._subscribe = function(subscriber) {
        var source = this.source;
        return source && source.subscribe(subscriber);
    };
    Observable.prototype[observable_1.observable] = function() {
        return this;
    };
    Observable.prototype.pipe = function() {
        var operations = [];
        for(var _i = 0; _i < arguments.length; _i++){
            operations[_i] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipe_1.pipeFromArray(operations)(this);
    };
    Observable.prototype.toPromise = function(promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function(resolve, reject) {
            var value;
            _this.subscribe(function(x) {
                return value = x;
            }, function(err) {
                return reject(err);
            }, function() {
                return resolve(value);
            });
        });
    };
    Observable.create = function(subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}();
exports.Observable = Observable;
function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
        promiseCtor = config_1.config.Promise || Promise;
    }
    if (!promiseCtor) {
        throw new Error("no Promise impl found");
    }
    return promiseCtor;
} //# sourceMappingURL=Observable.js.map


/***/ }),

/***/ 3121:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var config_1 = __webpack_require__(9538);
var hostReportError_1 = __webpack_require__(7551);
exports.empty = {
    closed: true,
    next: function(value) {},
    error: function(err) {
        if (config_1.config.useDeprecatedSynchronousErrorHandling) {
            throw err;
        } else {
            hostReportError_1.hostReportError(err);
        }
    },
    complete: function() {}
}; //# sourceMappingURL=Observer.js.map


/***/ }),

/***/ 286:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var __extends = (void 0) && (void 0).__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var isFunction_1 = __webpack_require__(2427);
var Observer_1 = __webpack_require__(3121);
var Subscription_1 = __webpack_require__(9654);
var rxSubscriber_1 = __webpack_require__(5583);
var config_1 = __webpack_require__(9538);
var hostReportError_1 = __webpack_require__(7551);
var Subscriber = function(_super) {
    __extends(Subscriber, _super);
    function Subscriber(destinationOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this.syncErrorValue = null;
        _this.syncErrorThrown = false;
        _this.syncErrorThrowable = false;
        _this.isStopped = false;
        switch(arguments.length){
            case 0:
                _this.destination = Observer_1.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    _this.destination = Observer_1.empty;
                    break;
                }
                if (typeof destinationOrNext === "object") {
                    if (destinationOrNext instanceof Subscriber) {
                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                        _this.destination = destinationOrNext;
                        destinationOrNext.add(_this);
                    } else {
                        _this.syncErrorThrowable = true;
                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
                    }
                    break;
                }
            default:
                _this.syncErrorThrowable = true;
                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                break;
        }
        return _this;
    }
    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function() {
        return this;
    };
    Subscriber.create = function(next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    Subscriber.prototype.next = function(value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function(err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function() {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function() {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function(value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function(err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function() {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function() {
        var _parentOrParents = this._parentOrParents;
        this._parentOrParents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parentOrParents = _parentOrParents;
        return this;
    };
    return Subscriber;
}(Subscription_1.Subscription);
exports.Subscriber = Subscriber;
var SafeSubscriber = function(_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this._parentSubscriber = _parentSubscriber;
        var next;
        var context = _this;
        if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
        } else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== Observer_1.empty) {
                context = Object.create(observerOrNext);
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    _this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = _this.unsubscribe.bind(_this);
            }
        }
        _this._context = context;
        _this._next = next;
        _this._error = error;
        _this._complete = complete;
        return _this;
    }
    SafeSubscriber.prototype.next = function(value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!config_1.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function(err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling = config_1.config.useDeprecatedSynchronousErrorHandling;
            if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                } else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            } else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                if (useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                hostReportError_1.hostReportError(err);
            } else {
                if (useDeprecatedSynchronousErrorHandling) {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                } else {
                    hostReportError_1.hostReportError(err);
                }
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function() {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function() {
                    return _this._complete.call(_this._context);
                };
                if (!config_1.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                } else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            } else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function(fn, value) {
        try {
            fn.call(this._context, value);
        } catch (err) {
            this.unsubscribe();
            if (config_1.config.useDeprecatedSynchronousErrorHandling) {
                throw err;
            } else {
                hostReportError_1.hostReportError(err);
            }
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function(parent, fn, value) {
        if (!config_1.config.useDeprecatedSynchronousErrorHandling) {
            throw new Error("bad call");
        }
        try {
            fn.call(this._context, value);
        } catch (err) {
            if (config_1.config.useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            } else {
                hostReportError_1.hostReportError(err);
                return true;
            }
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function() {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber);
exports.SafeSubscriber = SafeSubscriber; //# sourceMappingURL=Subscriber.js.map


/***/ }),

/***/ 9654:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var isArray_1 = __webpack_require__(3955);
var isObject_1 = __webpack_require__(3844);
var isFunction_1 = __webpack_require__(2427);
var UnsubscriptionError_1 = __webpack_require__(5212);
var Subscription = function() {
    function Subscription(unsubscribe) {
        this.closed = false;
        this._parentOrParents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._ctorUnsubscribe = true;
            this._unsubscribe = unsubscribe;
        }
    }
    Subscription.prototype.unsubscribe = function() {
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parentOrParents = _a._parentOrParents, _ctorUnsubscribe = _a._ctorUnsubscribe, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parentOrParents = null;
        this._subscriptions = null;
        if (_parentOrParents instanceof Subscription) {
            _parentOrParents.remove(this);
        } else if (_parentOrParents !== null) {
            for(var index = 0; index < _parentOrParents.length; ++index){
                var parent_1 = _parentOrParents[index];
                parent_1.remove(this);
            }
        }
        if (isFunction_1.isFunction(_unsubscribe)) {
            if (_ctorUnsubscribe) {
                this._unsubscribe = undefined;
            }
            try {
                _unsubscribe.call(this);
            } catch (e) {
                errors = e instanceof UnsubscriptionError_1.UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [
                    e
                ];
            }
        }
        if (isArray_1.isArray(_subscriptions)) {
            var index = -1;
            var len = _subscriptions.length;
            while(++index < len){
                var sub = _subscriptions[index];
                if (isObject_1.isObject(sub)) {
                    try {
                        sub.unsubscribe();
                    } catch (e1) {
                        errors = errors || [];
                        if (e1 instanceof UnsubscriptionError_1.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(e1.errors));
                        } else {
                            errors.push(e1);
                        }
                    }
                }
            }
        }
        if (errors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
    };
    Subscription.prototype.add = function(teardown) {
        var subscription = teardown;
        if (!teardown) {
            return Subscription.EMPTY;
        }
        switch(typeof teardown){
            case "function":
                subscription = new Subscription(teardown);
            case "object":
                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== "function") {
                    return subscription;
                } else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                } else if (!(subscription instanceof Subscription)) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [
                        tmp
                    ];
                }
                break;
            default:
                {
                    throw new Error("unrecognized teardown " + teardown + " added to Subscription.");
                }
        }
        var _parentOrParents = subscription._parentOrParents;
        if (_parentOrParents === null) {
            subscription._parentOrParents = this;
        } else if (_parentOrParents instanceof Subscription) {
            if (_parentOrParents === this) {
                return subscription;
            }
            subscription._parentOrParents = [
                _parentOrParents,
                this
            ];
        } else if (_parentOrParents.indexOf(this) === -1) {
            _parentOrParents.push(this);
        } else {
            return subscription;
        }
        var subscriptions = this._subscriptions;
        if (subscriptions === null) {
            this._subscriptions = [
                subscription
            ];
        } else {
            subscriptions.push(subscription);
        }
        return subscription;
    };
    Subscription.prototype.remove = function(subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.EMPTY = function(empty) {
        empty.closed = true;
        return empty;
    }(new Subscription());
    return Subscription;
}();
exports.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function(errs, err) {
        return errs.concat(err instanceof UnsubscriptionError_1.UnsubscriptionError ? err.errors : err);
    }, []);
} //# sourceMappingURL=Subscription.js.map


/***/ }),

/***/ 9538:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _enable_super_gross_mode_that_will_cause_bad_things = false;
exports.config = {
    Promise: undefined,
    set useDeprecatedSynchronousErrorHandling (value){
        if (value) {
            var error = new Error();
            console.warn("DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n" + error.stack);
        } else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            console.log("RxJS: Back to a better error behavior. Thank you. <3");
        }
        _enable_super_gross_mode_that_will_cause_bad_things = value;
    },
    get useDeprecatedSynchronousErrorHandling () {
        return _enable_super_gross_mode_that_will_cause_bad_things;
    }
}; //# sourceMappingURL=config.js.map


/***/ }),

/***/ 8982:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var __extends = (void 0) && (void 0).__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var Subscriber_1 = __webpack_require__(286);
function filter(predicate, thisArg) {
    return function filterOperatorFunction(source) {
        return source.lift(new FilterOperator(predicate, thisArg));
    };
}
exports.filter = filter;
var FilterOperator = function() {
    function FilterOperator(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function(subscriber, source) {
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
}();
var FilterSubscriber = function(_super) {
    __extends(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.thisArg = thisArg;
        _this.count = 0;
        return _this;
    }
    FilterSubscriber.prototype._next = function(value) {
        var result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        } catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    };
    return FilterSubscriber;
}(Subscriber_1.Subscriber); //# sourceMappingURL=filter.js.map


/***/ }),

/***/ 6646:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var __extends = (void 0) && (void 0).__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var Subscriber_1 = __webpack_require__(286);
function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== "function") {
            throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
exports.map = map;
var MapOperator = function() {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function(subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}();
exports.MapOperator = MapOperator;
var MapSubscriber = function(_super) {
    __extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.count = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    MapSubscriber.prototype._next = function(value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        } catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber_1.Subscriber); //# sourceMappingURL=map.js.map


/***/ }),

/***/ 5152:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
}(); //# sourceMappingURL=observable.js.map


/***/ }),

/***/ 5583:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.rxSubscriber = function() {
    return typeof Symbol === "function" ? Symbol("rxSubscriber") : "@@rxSubscriber_" + Math.random();
}();
exports.$$rxSubscriber = exports.rxSubscriber; //# sourceMappingURL=rxSubscriber.js.map


/***/ }),

/***/ 5212:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var UnsubscriptionErrorImpl = function() {
    function UnsubscriptionErrorImpl(errors) {
        Error.call(this);
        this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
            return i + 1 + ") " + err.toString();
        }).join("\n  ") : "";
        this.name = "UnsubscriptionError";
        this.errors = errors;
        return this;
    }
    UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);
    return UnsubscriptionErrorImpl;
}();
exports.UnsubscriptionError = UnsubscriptionErrorImpl; //# sourceMappingURL=UnsubscriptionError.js.map


/***/ }),

/***/ 6365:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var Subscriber_1 = __webpack_require__(286);
function canReportError(observer) {
    while(observer){
        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
        if (closed_1 || isStopped) {
            return false;
        } else if (destination && destination instanceof Subscriber_1.Subscriber) {
            observer = destination;
        } else {
            observer = null;
        }
    }
    return true;
}
exports.canReportError = canReportError; //# sourceMappingURL=canReportError.js.map


/***/ }),

/***/ 7551:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function hostReportError(err) {
    setTimeout(function() {
        throw err;
    }, 0);
}
exports.hostReportError = hostReportError; //# sourceMappingURL=hostReportError.js.map


/***/ }),

/***/ 5708:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function identity(x) {
    return x;
}
exports.identity = identity; //# sourceMappingURL=identity.js.map


/***/ }),

/***/ 3955:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.isArray = function() {
    return Array.isArray || function(x) {
        return x && typeof x.length === "number";
    };
}(); //# sourceMappingURL=isArray.js.map


/***/ }),

/***/ 2427:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function isFunction(x) {
    return typeof x === "function";
}
exports.isFunction = isFunction; //# sourceMappingURL=isFunction.js.map


/***/ }),

/***/ 3844:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function isObject(x) {
    return x !== null && typeof x === "object";
}
exports.isObject = isObject; //# sourceMappingURL=isObject.js.map


/***/ }),

/***/ 769:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var identity_1 = __webpack_require__(5708);
function pipe() {
    var fns = [];
    for(var _i = 0; _i < arguments.length; _i++){
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
exports.pipe = pipe;
function pipeFromArray(fns) {
    if (fns.length === 0) {
        return identity_1.identity;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function(prev, fn) {
            return fn(prev);
        }, input);
    };
}
exports.pipeFromArray = pipeFromArray; //# sourceMappingURL=pipe.js.map


/***/ }),

/***/ 4624:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var Subscriber_1 = __webpack_require__(286);
var rxSubscriber_1 = __webpack_require__(5583);
var Observer_1 = __webpack_require__(3121);
function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {
            return nextOrObserver[rxSubscriber_1.rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber_1.Subscriber(Observer_1.empty);
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber; //# sourceMappingURL=toSubscriber.js.map


/***/ }),

/***/ 7458:
/***/ ((module, exports, __webpack_require__) => {

"use strict";
/* eslint-disable node/no-deprecated-api */ 
var buffer = __webpack_require__(4300);
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src){
        dst[key] = src[key];
    }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
} else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
    }
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") {
            buf.fill(fill, encoding);
        } else {
            buf.fill(fill);
        }
    } else {
        buf.fill(0);
    }
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
    }
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
    }
    return buffer.SlowBuffer(size);
};


/***/ }),

/***/ 8120:
/***/ ((module) => {

"use strict";
/*! simple-concat. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ 
module.exports = function(stream, cb) {
    var chunks = [];
    stream.on("data", function(chunk) {
        chunks.push(chunk);
    });
    stream.once("end", function() {
        if (cb) cb(null, Buffer.concat(chunks));
        cb = null;
    });
    stream.once("error", function(err) {
        if (cb) cb(err);
        cb = null;
    });
};


/***/ }),

/***/ 6166:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*! simple-get. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ 
module.exports = simpleGet;
const concat = __webpack_require__(8120);
const decompressResponse = __webpack_require__(4167) // excluded from browser build
;
const http = __webpack_require__(3685);
const https = __webpack_require__(5687);
const once = __webpack_require__(3248);
const querystring = __webpack_require__(3477);
const url = __webpack_require__(7310);
const isStream = (o)=>o !== null && typeof o === "object" && typeof o.pipe === "function";
function simpleGet(opts, cb) {
    opts = Object.assign({
        maxRedirects: 10
    }, typeof opts === "string" ? {
        url: opts
    } : opts);
    cb = once(cb);
    if (opts.url) {
        const { hostname , port , protocol , auth , path  } = url.parse(opts.url) // eslint-disable-line node/no-deprecated-api
        ;
        delete opts.url;
        if (!hostname && !port && !protocol && !auth) opts.path = path // Relative redirect
        ;
        else Object.assign(opts, {
            hostname,
            port,
            protocol,
            auth,
            path
        }) // Absolute redirect
        ;
    }
    const headers = {
        "accept-encoding": "gzip, deflate"
    };
    if (opts.headers) Object.keys(opts.headers).forEach((k)=>headers[k.toLowerCase()] = opts.headers[k]);
    opts.headers = headers;
    let body;
    if (opts.body) {
        body = opts.json && !isStream(opts.body) ? JSON.stringify(opts.body) : opts.body;
    } else if (opts.form) {
        body = typeof opts.form === "string" ? opts.form : querystring.stringify(opts.form);
        opts.headers["content-type"] = "application/x-www-form-urlencoded";
    }
    if (body) {
        if (!opts.method) opts.method = "POST";
        if (!isStream(body)) opts.headers["content-length"] = Buffer.byteLength(body);
        if (opts.json && !opts.form) opts.headers["content-type"] = "application/json";
    }
    delete opts.body;
    delete opts.form;
    if (opts.json) opts.headers.accept = "application/json";
    if (opts.method) opts.method = opts.method.toUpperCase();
    const originalHost = opts.hostname // hostname before potential redirect
    ;
    const protocol1 = opts.protocol === "https:" ? https : http // Support http/https urls
    ;
    const req = protocol1.request(opts, (res)=>{
        if (opts.followRedirects !== false && res.statusCode >= 300 && res.statusCode < 400 && res.headers.location) {
            opts.url = res.headers.location // Follow 3xx redirects
            ;
            delete opts.headers.host // Discard `host` header on redirect (see #32)
            ;
            res.resume() // Discard response
            ;
            const redirectHost = url.parse(opts.url).hostname // eslint-disable-line node/no-deprecated-api
            ;
            // If redirected host is different than original host, drop headers to prevent cookie leak (#73)
            if (redirectHost !== null && redirectHost !== originalHost) {
                delete opts.headers.cookie;
                delete opts.headers.authorization;
            }
            if (opts.method === "POST" && [
                301,
                302
            ].includes(res.statusCode)) {
                opts.method = "GET" // On 301/302 redirect, change POST to GET (see #35)
                ;
                delete opts.headers["content-length"];
                delete opts.headers["content-type"];
            }
            if (opts.maxRedirects-- === 0) return cb(new Error("too many redirects"));
            else return simpleGet(opts, cb);
        }
        const tryUnzip = typeof decompressResponse === "function" && opts.method !== "HEAD";
        cb(null, tryUnzip ? decompressResponse(res) : res);
    });
    req.on("timeout", ()=>{
        req.abort();
        cb(new Error("Request timed out"));
    });
    req.on("error", cb);
    if (isStream(body)) body.on("error", cb).pipe(req);
    else req.end(body);
    return req;
}
simpleGet.concat = (opts, cb)=>{
    return simpleGet(opts, (err, res)=>{
        if (err) return cb(err);
        concat(res, (err, data)=>{
            if (err) return cb(err);
            if (opts.json) {
                try {
                    data = JSON.parse(data.toString());
                } catch (err1) {
                    return cb(err1, res, data);
                }
            }
            cb(null, res, data);
        });
    });
};
[
    "get",
    "post",
    "put",
    "patch",
    "head",
    "delete"
].forEach((method)=>{
    simpleGet[method] = (opts, cb)=>{
        if (typeof opts === "string") opts = {
            url: opts
        };
        return simpleGet(Object.assign({
            method: method.toUpperCase()
        }, opts), cb);
    };
});


/***/ }),

/***/ 3829:
/***/ ((module) => {

"use strict";

var tick = 1;
var maxTick = 65535;
var resolution = 4;
var inc = function() {
    tick = tick + 1 & maxTick;
};
var timer = setInterval(inc, 1000 / resolution | 0);
if (timer.unref) timer.unref();
module.exports = function(seconds) {
    var size = resolution * (seconds || 5);
    var buffer = [
        0
    ];
    var pointer = 1;
    var last = tick - 1 & maxTick;
    return function(delta) {
        var dist = tick - last & maxTick;
        if (dist > size) dist = size;
        last = tick;
        while(dist--){
            if (pointer === size) pointer = 0;
            buffer[pointer] = buffer[pointer === 0 ? size - 1 : pointer - 1];
            pointer++;
        }
        if (delta) buffer[pointer - 1] += delta;
        var top = buffer[pointer - 1];
        var btm = buffer.length < size ? 0 : buffer[pointer === size ? 0 : pointer];
        return buffer.length < resolution ? top : (top - btm) * resolution / buffer.length;
    };
};


/***/ }),

/***/ 1381:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
Copyright (c) 2014-2021, Matteo Collina <hello@matteocollina.com>

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/ 
const { Transform  } = __webpack_require__(2781);
const { StringDecoder  } = __webpack_require__(1576);
const kLast = Symbol("last");
const kDecoder = Symbol("decoder");
function transform(chunk, enc, cb) {
    let list;
    if (this.overflow) {
        const buf = this[kDecoder].write(chunk);
        list = buf.split(this.matcher);
        if (list.length === 1) return cb() // Line ending not found. Discard entire chunk.
        ;
        // Line ending found. Discard trailing fragment of previous line and reset overflow state.
        list.shift();
        this.overflow = false;
    } else {
        this[kLast] += this[kDecoder].write(chunk);
        list = this[kLast].split(this.matcher);
    }
    this[kLast] = list.pop();
    for(let i = 0; i < list.length; i++){
        try {
            push(this, this.mapper(list[i]));
        } catch (error) {
            return cb(error);
        }
    }
    this.overflow = this[kLast].length > this.maxLength;
    if (this.overflow && !this.skipOverflow) {
        cb(new Error("maximum buffer reached"));
        return;
    }
    cb();
}
function flush(cb) {
    // forward any gibberish left in there
    this[kLast] += this[kDecoder].end();
    if (this[kLast]) {
        try {
            push(this, this.mapper(this[kLast]));
        } catch (error) {
            return cb(error);
        }
    }
    cb();
}
function push(self, val) {
    if (val !== undefined) {
        self.push(val);
    }
}
function noop(incoming) {
    return incoming;
}
function split(matcher, mapper, options) {
    // Set defaults for any arguments not supplied.
    matcher = matcher || /\r?\n/;
    mapper = mapper || noop;
    options = options || {};
    // Test arguments explicitly.
    switch(arguments.length){
        case 1:
            // If mapper is only argument.
            if (typeof matcher === "function") {
                mapper = matcher;
                matcher = /\r?\n/;
            // If options is only argument.
            } else if (typeof matcher === "object" && !(matcher instanceof RegExp)) {
                options = matcher;
                matcher = /\r?\n/;
            }
            break;
        case 2:
            // If mapper and options are arguments.
            if (typeof matcher === "function") {
                options = mapper;
                mapper = matcher;
                matcher = /\r?\n/;
            // If matcher and options are arguments.
            } else if (typeof mapper === "object") {
                options = mapper;
                mapper = noop;
            }
    }
    options = Object.assign({}, options);
    options.autoDestroy = true;
    options.transform = transform;
    options.flush = flush;
    options.readableObjectMode = true;
    const stream = new Transform(options);
    stream[kLast] = "";
    stream[kDecoder] = new StringDecoder("utf8");
    stream.matcher = matcher;
    stream.mapper = mapper;
    stream.maxLength = options.maxLength;
    stream.skipOverflow = options.skipOverflow || false;
    stream.overflow = false;
    stream._destroy = function(err, cb) {
        // Weird Node v12 bug that we need to work around
        this._writableState.errorEmitted = false;
        cb(err);
    };
    return stream;
}
module.exports = split;


/***/ }),

/***/ 369:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

/*<replacement>*/ var Buffer = (__webpack_require__(7458).Buffer);
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while(true){
        switch(enc){
            case "utf8":
            case "utf-8":
                return "utf8";
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return "utf16le";
            case "latin1":
            case "binary":
                return "latin1";
            case "base64":
            case "ascii":
            case "hex":
                return enc;
            default:
                if (retried) return; // undefined
                enc = ("" + enc).toLowerCase();
                retried = true;
        }
    }
}
;
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.s = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else {
        i = 0;
    }
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "�";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "�";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return "�";
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "�";
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
    } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}


/***/ }),

/***/ 3406:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const os = __webpack_require__(2037);
const tty = __webpack_require__(6224);
const hasFlag = __webpack_require__(1670);
const { env  } = process;
let forceColor;
if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
    forceColor = 0;
} else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
    forceColor = 1;
}
if ("FORCE_COLOR" in env) {
    if (env.FORCE_COLOR === "true") {
        forceColor = 1;
    } else if (env.FORCE_COLOR === "false") {
        forceColor = 0;
    } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
    }
}
function translateLevel(level) {
    if (level === 0) {
        return false;
    }
    return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
    };
}
function supportsColor(haveStream, streamIsTTY) {
    if (forceColor === 0) {
        return 0;
    }
    if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
    }
    if (hasFlag("color=256")) {
        return 2;
    }
    if (haveStream && !streamIsTTY && forceColor === undefined) {
        return 0;
    }
    const min = forceColor || 0;
    if (env.TERM === "dumb") {
        return min;
    }
    if (process.platform === "win32") {
        // Windows 10 build 10586 is the first Windows release that supports 256 colors.
        // Windows 10 build 14931 is the first release that supports 16m/TrueColor.
        const osRelease = os.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
            return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
    }
    if ("CI" in env) {
        if ([
            "TRAVIS",
            "CIRCLECI",
            "APPVEYOR",
            "GITLAB_CI",
            "GITHUB_ACTIONS",
            "BUILDKITE"
        ].some((sign)=>sign in env) || env.CI_NAME === "codeship") {
            return 1;
        }
        return min;
    }
    if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    }
    if (env.COLORTERM === "truecolor") {
        return 3;
    }
    if ("TERM_PROGRAM" in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch(env.TERM_PROGRAM){
            case "iTerm.app":
                return version >= 3 ? 3 : 2;
            case "Apple_Terminal":
                return 2;
        }
    }
    if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
    }
    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
    }
    if ("COLORTERM" in env) {
        return 1;
    }
    return min;
}
function getSupportLevel(stream) {
    const level = supportsColor(stream, stream && stream.isTTY);
    return translateLevel(level);
}
module.exports = {
    supportsColor: getSupportLevel,
    stdout: translateLevel(supportsColor(true, tty.isatty(1))),
    stderr: translateLevel(supportsColor(true, tty.isatty(2)))
};


/***/ }),

/***/ 340:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var Transform = (__webpack_require__(5635).Transform), inherits = (__webpack_require__(3849).inherits), xtend = __webpack_require__(9253);
function DestroyableTransform(opts) {
    Transform.call(this, opts);
    this._destroyed = false;
}
inherits(DestroyableTransform, Transform);
DestroyableTransform.prototype.destroy = function(err) {
    if (this._destroyed) return;
    this._destroyed = true;
    var self = this;
    process.nextTick(function() {
        if (err) self.emit("error", err);
        self.emit("close");
    });
};
// a noop _transform function
function noop(chunk, enc, callback) {
    callback(null, chunk);
}
// create a new export function, used by both the main export and
// the .ctor export, contains common logic for dealing with arguments
function through2(construct) {
    return function(options, transform, flush) {
        if (typeof options == "function") {
            flush = transform;
            transform = options;
            options = {};
        }
        if (typeof transform != "function") transform = noop;
        if (typeof flush != "function") flush = null;
        return construct(options, transform, flush);
    };
}
// main export, just make me a transform stream!
module.exports = through2(function(options, transform, flush) {
    var t2 = new DestroyableTransform(options);
    t2._transform = transform;
    if (flush) t2._flush = flush;
    return t2;
});
// make me a reusable prototype that I can `new`, or implicitly `new`
// with a constructor call
module.exports.ctor = through2(function(options, transform, flush) {
    function Through2(override) {
        if (!(this instanceof Through2)) return new Through2(override);
        this.options = xtend(options, override);
        DestroyableTransform.call(this, this.options);
    }
    inherits(Through2, DestroyableTransform);
    Through2.prototype._transform = transform;
    if (flush) Through2.prototype._flush = flush;
    return Through2;
});
module.exports.obj = through2(function(options, transform, flush) {
    var t2 = new DestroyableTransform(xtend({
        objectMode: true,
        highWaterMark: 16
    }, options));
    t2._transform = transform;
    if (flush) t2._flush = flush;
    return t2;
});


/***/ }),

/***/ 6869:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var net = __webpack_require__(1808), tls = __webpack_require__(4404), http = __webpack_require__(3685), https = __webpack_require__(5687), events = __webpack_require__(2361), assert = __webpack_require__(9491), util = __webpack_require__(3849), Buffer = (__webpack_require__(1297).Buffer);
exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;
function httpOverHttp(options) {
    var agent = new TunnelingAgent(options);
    agent.request = http.request;
    return agent;
}
function httpsOverHttp(options) {
    var agent = new TunnelingAgent(options);
    agent.request = http.request;
    agent.createSocket = createSecureSocket;
    agent.defaultPort = 443;
    return agent;
}
function httpOverHttps(options) {
    var agent = new TunnelingAgent(options);
    agent.request = https.request;
    return agent;
}
function httpsOverHttps(options) {
    var agent = new TunnelingAgent(options);
    agent.request = https.request;
    agent.createSocket = createSecureSocket;
    agent.defaultPort = 443;
    return agent;
}
function TunnelingAgent(options) {
    var self = this;
    self.options = options || {};
    self.proxyOptions = self.options.proxy || {};
    self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
    self.requests = [];
    self.sockets = [];
    self.on("free", function onFree(socket, host, port) {
        for(var i = 0, len = self.requests.length; i < len; ++i){
            var pending = self.requests[i];
            if (pending.host === host && pending.port === port) {
                // Detect the request to connect same origin server,
                // reuse the connection.
                self.requests.splice(i, 1);
                pending.request.onSocket(socket);
                return;
            }
        }
        socket.destroy();
        self.removeSocket(socket);
    });
}
util.inherits(TunnelingAgent, events.EventEmitter);
TunnelingAgent.prototype.addRequest = function addRequest(req, options) {
    var self = this;
    // Legacy API: addRequest(req, host, port, path)
    if (typeof options === "string") {
        options = {
            host: options,
            port: arguments[2],
            path: arguments[3]
        };
    }
    if (self.sockets.length >= this.maxSockets) {
        // We are over limit so we'll add it to the queue.
        self.requests.push({
            host: options.host,
            port: options.port,
            request: req
        });
        return;
    }
    // If we are under maxSockets create a new one.
    self.createConnection({
        host: options.host,
        port: options.port,
        request: req
    });
};
TunnelingAgent.prototype.createConnection = function createConnection(pending) {
    var self = this;
    self.createSocket(pending, function(socket) {
        socket.on("free", onFree);
        socket.on("close", onCloseOrRemove);
        socket.on("agentRemove", onCloseOrRemove);
        pending.request.onSocket(socket);
        function onFree() {
            self.emit("free", socket, pending.host, pending.port);
        }
        function onCloseOrRemove(err) {
            self.removeSocket(socket);
            socket.removeListener("free", onFree);
            socket.removeListener("close", onCloseOrRemove);
            socket.removeListener("agentRemove", onCloseOrRemove);
        }
    });
};
TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
    var self = this;
    var placeholder = {};
    self.sockets.push(placeholder);
    var connectOptions = mergeOptions({}, self.proxyOptions, {
        method: "CONNECT",
        path: options.host + ":" + options.port,
        agent: false
    });
    if (connectOptions.proxyAuth) {
        connectOptions.headers = connectOptions.headers || {};
        connectOptions.headers["Proxy-Authorization"] = "Basic " + Buffer.from(connectOptions.proxyAuth).toString("base64");
    }
    debug("making CONNECT request");
    var connectReq = self.request(connectOptions);
    connectReq.useChunkedEncodingByDefault = false // for v0.6
    ;
    connectReq.once("response", onResponse) // for v0.6
    ;
    connectReq.once("upgrade", onUpgrade) // for v0.6
    ;
    connectReq.once("connect", onConnect) // for v0.7 or later
    ;
    connectReq.once("error", onError);
    connectReq.end();
    function onResponse(res) {
        // Very hacky. This is necessary to avoid http-parser leaks.
        res.upgrade = true;
    }
    function onUpgrade(res, socket, head) {
        // Hacky.
        process.nextTick(function() {
            onConnect(res, socket, head);
        });
    }
    function onConnect(res, socket, head) {
        connectReq.removeAllListeners();
        socket.removeAllListeners();
        if (res.statusCode === 200) {
            assert.equal(head.length, 0);
            debug("tunneling connection has established");
            self.sockets[self.sockets.indexOf(placeholder)] = socket;
            cb(socket);
        } else {
            debug("tunneling socket could not be established, statusCode=%d", res.statusCode);
            var error = new Error("tunneling socket could not be established, " + "statusCode=" + res.statusCode);
            error.code = "ECONNRESET";
            options.request.emit("error", error);
            self.removeSocket(placeholder);
        }
    }
    function onError(cause) {
        connectReq.removeAllListeners();
        debug("tunneling socket could not be established, cause=%s\n", cause.message, cause.stack);
        var error = new Error("tunneling socket could not be established, " + "cause=" + cause.message);
        error.code = "ECONNRESET";
        options.request.emit("error", error);
        self.removeSocket(placeholder);
    }
};
TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
    var pos = this.sockets.indexOf(socket);
    if (pos === -1) return;
    this.sockets.splice(pos, 1);
    var pending = this.requests.shift();
    if (pending) {
        // If we have pending requests and a socket gets closed a new one
        // needs to be created to take over in the pool for the one that closed.
        this.createConnection(pending);
    }
};
function createSecureSocket(options, cb) {
    var self = this;
    TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
        // 0 is dummy port for v0.6
        var secureSocket = tls.connect(0, mergeOptions({}, self.options, {
            servername: options.host,
            socket: socket
        }));
        self.sockets[self.sockets.indexOf(socket)] = secureSocket;
        cb(secureSocket);
    });
}
function mergeOptions(target) {
    for(var i = 1, len = arguments.length; i < len; ++i){
        var overrides = arguments[i];
        if (typeof overrides === "object") {
            var keys = Object.keys(overrides);
            for(var j = 0, keyLen = keys.length; j < keyLen; ++j){
                var k = keys[j];
                if (overrides[k] !== undefined) {
                    target[k] = overrides[k];
                }
            }
        }
    }
    return target;
}
var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
    debug = function() {
        var args = Array.prototype.slice.call(arguments);
        if (typeof args[0] === "string") {
            args[0] = "TUNNEL: " + args[0];
        } else {
            args.unshift("TUNNEL:");
        }
        console.error.apply(console, args);
    };
} else {
    debug = function() {};
}
exports.debug = debug // for test
;


/***/ }),

/***/ 1297:
/***/ ((module, exports, __webpack_require__) => {

"use strict";
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ 
var buffer = __webpack_require__(4300);
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src){
        dst[key] = src[key];
    }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
} else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
    }
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") {
            buf.fill(fill, encoding);
        } else {
            buf.fill(fill);
        }
    } else {
        buf.fill(0);
    }
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
    }
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
    }
    return buffer.SlowBuffer(size);
};


/***/ }),

/***/ 2686:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var required = __webpack_require__(5714), qs = __webpack_require__(8138), controlOrWhitespace = /^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/, CRHTLF = /[\n\r\t]/g, slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//, port = /:\d+$/, protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i, windowsDriveLetter = /^[a-zA-Z]:/;
/**
 * Remove control characters and whitespace from the beginning of a string.
 *
 * @param {Object|String} str String to trim.
 * @returns {String} A new string representing `str` stripped of control
 *     characters and whitespace from its beginning.
 * @public
 */ function trimLeft(str) {
    return (str ? str : "").toString().replace(controlOrWhitespace, "");
}
/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */ var rules = [
    [
        "#",
        "hash"
    ],
    [
        "?",
        "query"
    ],
    function sanitize(address, url) {
        return isSpecial(url.protocol) ? address.replace(/\\/g, "/") : address;
    },
    [
        "/",
        "pathname"
    ],
    [
        "@",
        "auth",
        1
    ],
    [
        NaN,
        "host",
        undefined,
        1,
        1
    ],
    [
        /:(\d*)$/,
        "port",
        undefined,
        1
    ],
    [
        NaN,
        "hostname",
        undefined,
        1,
        1
    ] // Set left over.
];
/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */ var ignore = {
    hash: 1,
    query: 1
};
/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @public
 */ function lolcation(loc) {
    var globalVar;
    if (false) {}
    else if (typeof global !== "undefined") globalVar = global;
    else if (typeof self !== "undefined") globalVar = self;
    else globalVar = {};
    var location = globalVar.location || {};
    loc = loc || location;
    var finaldestination = {}, type = typeof loc, key;
    if ("blob:" === loc.protocol) {
        finaldestination = new Url(unescape(loc.pathname), {});
    } else if ("string" === type) {
        finaldestination = new Url(loc, {});
        for(key in ignore)delete finaldestination[key];
    } else if ("object" === type) {
        for(key in loc){
            if (key in ignore) continue;
            finaldestination[key] = loc[key];
        }
        if (finaldestination.slashes === undefined) {
            finaldestination.slashes = slashes.test(loc.href);
        }
    }
    return finaldestination;
}
/**
 * Check whether a protocol scheme is special.
 *
 * @param {String} The protocol scheme of the URL
 * @return {Boolean} `true` if the protocol scheme is special, else `false`
 * @private
 */ function isSpecial(scheme) {
    return scheme === "file:" || scheme === "ftp:" || scheme === "http:" || scheme === "https:" || scheme === "ws:" || scheme === "wss:";
}
/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */ /**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @param {Object} location
 * @return {ProtocolExtract} Extracted information.
 * @private
 */ function extractProtocol(address, location) {
    address = trimLeft(address);
    address = address.replace(CRHTLF, "");
    location = location || {};
    var match = protocolre.exec(address);
    var protocol = match[1] ? match[1].toLowerCase() : "";
    var forwardSlashes = !!match[2];
    var otherSlashes = !!match[3];
    var slashesCount = 0;
    var rest;
    if (forwardSlashes) {
        if (otherSlashes) {
            rest = match[2] + match[3] + match[4];
            slashesCount = match[2].length + match[3].length;
        } else {
            rest = match[2] + match[4];
            slashesCount = match[2].length;
        }
    } else {
        if (otherSlashes) {
            rest = match[3] + match[4];
            slashesCount = match[3].length;
        } else {
            rest = match[4];
        }
    }
    if (protocol === "file:") {
        if (slashesCount >= 2) {
            rest = rest.slice(2);
        }
    } else if (isSpecial(protocol)) {
        rest = match[4];
    } else if (protocol) {
        if (forwardSlashes) {
            rest = rest.slice(2);
        }
    } else if (slashesCount >= 2 && isSpecial(location.protocol)) {
        rest = match[4];
    }
    return {
        protocol: protocol,
        slashes: forwardSlashes || isSpecial(protocol),
        slashesCount: slashesCount,
        rest: rest
    };
}
/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @private
 */ function resolve(relative, base) {
    if (relative === "") return base;
    var path = (base || "/").split("/").slice(0, -1).concat(relative.split("/")), i = path.length, last = path[i - 1], unshift = false, up = 0;
    while(i--){
        if (path[i] === ".") {
            path.splice(i, 1);
        } else if (path[i] === "..") {
            path.splice(i, 1);
            up++;
        } else if (up) {
            if (i === 0) unshift = true;
            path.splice(i, 1);
            up--;
        }
    }
    if (unshift) path.unshift("");
    if (last === "." || last === "..") path.push("");
    return path.join("/");
}
/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * It is worth noting that we should not use `URL` as class name to prevent
 * clashes with the global URL instance that got introduced in browsers.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} [location] Location defaults for relative paths.
 * @param {Boolean|Function} [parser] Parser for the query string.
 * @private
 */ function Url(address, location, parser) {
    address = trimLeft(address);
    address = address.replace(CRHTLF, "");
    if (!(this instanceof Url)) {
        return new Url(address, location, parser);
    }
    var relative, extracted, parse, instruction, index, key, instructions = rules.slice(), type = typeof location, url = this, i = 0;
    //
    // The following if statements allows this module two have compatibility with
    // 2 different API:
    //
    // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
    //    where the boolean indicates that the query string should also be parsed.
    //
    // 2. The `URL` interface of the browser which accepts a URL, object as
    //    arguments. The supplied object will be used as default values / fall-back
    //    for relative paths.
    //
    if ("object" !== type && "string" !== type) {
        parser = location;
        location = null;
    }
    if (parser && "function" !== typeof parser) parser = qs.parse;
    location = lolcation(location);
    //
    // Extract protocol information before running the instructions.
    //
    extracted = extractProtocol(address || "", location);
    relative = !extracted.protocol && !extracted.slashes;
    url.slashes = extracted.slashes || relative && location.slashes;
    url.protocol = extracted.protocol || location.protocol || "";
    address = extracted.rest;
    //
    // When the authority component is absent the URL starts with a path
    // component.
    //
    if (extracted.protocol === "file:" && (extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) || !extracted.slashes && (extracted.protocol || extracted.slashesCount < 2 || !isSpecial(url.protocol))) {
        instructions[3] = [
            /(.*)/,
            "pathname"
        ];
    }
    for(; i < instructions.length; i++){
        instruction = instructions[i];
        if (typeof instruction === "function") {
            address = instruction(address, url);
            continue;
        }
        parse = instruction[0];
        key = instruction[1];
        if (parse !== parse) {
            url[key] = address;
        } else if ("string" === typeof parse) {
            index = parse === "@" ? address.lastIndexOf(parse) : address.indexOf(parse);
            if (~index) {
                if ("number" === typeof instruction[2]) {
                    url[key] = address.slice(0, index);
                    address = address.slice(index + instruction[2]);
                } else {
                    url[key] = address.slice(index);
                    address = address.slice(0, index);
                }
            }
        } else if (index = parse.exec(address)) {
            url[key] = index[1];
            address = address.slice(0, index.index);
        }
        url[key] = url[key] || (relative && instruction[3] ? location[key] || "" : "");
        //
        // Hostname, host and protocol should be lowercased so they can be used to
        // create a proper `origin`.
        //
        if (instruction[4]) url[key] = url[key].toLowerCase();
    }
    //
    // Also parse the supplied query string in to an object. If we're supplied
    // with a custom parser as function use that instead of the default build-in
    // parser.
    //
    if (parser) url.query = parser(url.query);
    //
    // If the URL is relative, resolve the pathname against the base URL.
    //
    if (relative && location.slashes && url.pathname.charAt(0) !== "/" && (url.pathname !== "" || location.pathname !== "")) {
        url.pathname = resolve(url.pathname, location.pathname);
    }
    //
    // Default to a / for pathname if none exists. This normalizes the URL
    // to always have a /
    //
    if (url.pathname.charAt(0) !== "/" && isSpecial(url.protocol)) {
        url.pathname = "/" + url.pathname;
    }
    //
    // We should not add port numbers if they are already the default port number
    // for a given protocol. As the host also contains the port number we're going
    // override it with the hostname which contains no port number.
    //
    if (!required(url.port, url.protocol)) {
        url.host = url.hostname;
        url.port = "";
    }
    //
    // Parse down the `auth` for the username and password.
    //
    url.username = url.password = "";
    if (url.auth) {
        index = url.auth.indexOf(":");
        if (~index) {
            url.username = url.auth.slice(0, index);
            url.username = encodeURIComponent(decodeURIComponent(url.username));
            url.password = url.auth.slice(index + 1);
            url.password = encodeURIComponent(decodeURIComponent(url.password));
        } else {
            url.username = encodeURIComponent(decodeURIComponent(url.auth));
        }
        url.auth = url.password ? url.username + ":" + url.password : url.username;
    }
    url.origin = url.protocol !== "file:" && isSpecial(url.protocol) && url.host ? url.protocol + "//" + url.host : "null";
    //
    // The href is just the compiled result.
    //
    url.href = url.toString();
}
/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL} URL instance for chaining.
 * @public
 */ function set(part, value, fn) {
    var url = this;
    switch(part){
        case "query":
            if ("string" === typeof value && value.length) {
                value = (fn || qs.parse)(value);
            }
            url[part] = value;
            break;
        case "port":
            url[part] = value;
            if (!required(value, url.protocol)) {
                url.host = url.hostname;
                url[part] = "";
            } else if (value) {
                url.host = url.hostname + ":" + value;
            }
            break;
        case "hostname":
            url[part] = value;
            if (url.port) value += ":" + url.port;
            url.host = value;
            break;
        case "host":
            url[part] = value;
            if (port.test(value)) {
                value = value.split(":");
                url.port = value.pop();
                url.hostname = value.join(":");
            } else {
                url.hostname = value;
                url.port = "";
            }
            break;
        case "protocol":
            url.protocol = value.toLowerCase();
            url.slashes = !fn;
            break;
        case "pathname":
        case "hash":
            if (value) {
                var char = part === "pathname" ? "/" : "#";
                url[part] = value.charAt(0) !== char ? char + value : value;
            } else {
                url[part] = value;
            }
            break;
        case "username":
        case "password":
            url[part] = encodeURIComponent(value);
            break;
        case "auth":
            var index = value.indexOf(":");
            if (~index) {
                url.username = value.slice(0, index);
                url.username = encodeURIComponent(decodeURIComponent(url.username));
                url.password = value.slice(index + 1);
                url.password = encodeURIComponent(decodeURIComponent(url.password));
            } else {
                url.username = encodeURIComponent(decodeURIComponent(value));
            }
    }
    for(var i = 0; i < rules.length; i++){
        var ins = rules[i];
        if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
    }
    url.auth = url.password ? url.username + ":" + url.password : url.username;
    url.origin = url.protocol !== "file:" && isSpecial(url.protocol) && url.host ? url.protocol + "//" + url.host : "null";
    url.href = url.toString();
    return url;
}
/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String} Compiled version of the URL.
 * @public
 */ function toString(stringify) {
    if (!stringify || "function" !== typeof stringify) stringify = qs.stringify;
    var query, url = this, host = url.host, protocol = url.protocol;
    if (protocol && protocol.charAt(protocol.length - 1) !== ":") protocol += ":";
    var result = protocol + (url.protocol && url.slashes || isSpecial(url.protocol) ? "//" : "");
    if (url.username) {
        result += url.username;
        if (url.password) result += ":" + url.password;
        result += "@";
    } else if (url.password) {
        result += ":" + url.password;
        result += "@";
    } else if (url.protocol !== "file:" && isSpecial(url.protocol) && !host && url.pathname !== "/") {
        //
        // Add back the empty userinfo, otherwise the original invalid URL
        // might be transformed into a valid one with `url.pathname` as host.
        //
        result += "@";
    }
    //
    // Trailing colon is removed from `url.host` when it is parsed. If it still
    // ends with a colon, then add back the trailing colon that was removed. This
    // prevents an invalid URL from being transformed into a valid one.
    //
    if (host[host.length - 1] === ":" || port.test(url.hostname) && !url.port) {
        host += ":";
    }
    result += host + url.pathname;
    query = "object" === typeof url.query ? stringify(url.query) : url.query;
    if (query) result += "?" !== query.charAt(0) ? "?" + query : query;
    if (url.hash) result += url.hash;
    return result;
}
Url.prototype = {
    set: set,
    toString: toString
};
//
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//
Url.extractProtocol = extractProtocol;
Url.location = lolcation;
Url.trimLeft = trimLeft;
Url.qs = qs;
module.exports = Url;


/***/ }),

/***/ 6158:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * For Node.js, simply re-export the core `util.deprecate` function.
 */ 
module.exports = __webpack_require__(3849).deprecate;


/***/ }),

/***/ 529:
/***/ ((module) => {

"use strict";
// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.

module.exports = wrappy;
function wrappy(fn, cb) {
    if (fn && cb) return wrappy(fn)(cb);
    if (typeof fn !== "function") throw new TypeError("need wrapper function");
    Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
    });
    return wrapper;
    function wrapper() {
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++){
            args[i] = arguments[i];
        }
        var ret = fn.apply(this, args);
        var cb = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb) {
            Object.keys(cb).forEach(function(k) {
                ret[k] = cb[k];
            });
        }
        return ret;
    }
}


/***/ }),

/***/ 9253:
/***/ ((module) => {

"use strict";

module.exports = extend;
var hasOwnProperty = Object.prototype.hasOwnProperty;
function extend() {
    var target = {};
    for(var i = 0; i < arguments.length; i++){
        var source = arguments[i];
        for(var key in source){
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
}


/***/ }),

/***/ 7649:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

(function(g, f) {
     true ? f(exports) : 0;
})(void 0, function(exports1) {
    "use strict"; /******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ 
    /* global Reflect, Promise */ var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for(var s, i = 1, n = arguments.length; i < n; i++){
                s = arguments[i];
                for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
                resolve(value);
            });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        }, f, y, t, g;
        return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
        }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
        }), g;
        function verb(n) {
            return function(v) {
                return step([
                    n,
                    v
                ]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while(_)try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [
                    op[0] & 2,
                    t.value
                ];
                switch(op[0]){
                    case 0:
                    case 1:
                        t = op;
                        break;
                    case 4:
                        _.label++;
                        return {
                            value: op[1],
                            done: false
                        };
                    case 5:
                        _.label++;
                        y = op[1];
                        op = [
                            0
                        ];
                        continue;
                    case 7:
                        op = _.ops.pop();
                        _.trys.pop();
                        continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;
                            continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];
                            break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];
                            t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];
                            _.ops.push(op);
                            break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();
                        continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [
                    6,
                    e
                ];
                y = 0;
            } finally{
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];
            return {
                value: op[0] ? op[1] : void 0,
                done: true
            };
        }
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function() {
                if (o && i >= o.length) o = void 0;
                return {
                    value: o && o[i++],
                    done: !o
                };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
        }, i;
        function verb(n) {
            if (g[n]) i[n] = function(v) {
                return new Promise(function(a, b) {
                    q.push([
                        n,
                        v,
                        a,
                        b
                    ]) > 1 || resume(n, v);
                });
            };
        }
        function resume(n, v) {
            try {
                step(g[n](v));
            } catch (e) {
                settle(q[0][3], e);
            }
        }
        function step(r) {
            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
            resume("next", value);
        }
        function reject(value) {
            resume("throw", value);
        }
        function settle(f, v) {
            if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
        }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
        }, i);
        function verb(n) {
            i[n] = o[n] && function(v) {
                return new Promise(function(resolve, reject) {
                    v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
            };
        }
        function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v) {
                resolve({
                    value: v,
                    done: d
                });
            }, reject);
        }
    }
    var MarkProcessor = /** @class */ function() {
        function MarkProcessor(string, marks, parseOptions) {
            this.allowBoost = false;
            this.string = string;
            this.marks = marks;
            this.index = 0;
            this.parseOptions = parseOptions;
        }
        MarkProcessor.prototype.hasMark = function(pos) {
            if (pos === void 0) {
                pos = 0;
            }
            return this.index + pos < this.marks.length;
        };
        MarkProcessor.prototype.getMark = function(pos) {
            if (pos === void 0) {
                pos = 0;
            }
            return this.marks[this.index + pos];
        };
        MarkProcessor.prototype.shift = function() {
            this.index += 1;
        };
        MarkProcessor.prototype.process = function(visitor) {
            var mark = this.marks[this.index];
            this.shift();
            var func = visitor[mark.name];
            if (!func) {
                throw new Error("Unknown handler: ".concat(mark.name));
            }
            return func.call(visitor, this, mark);
        };
        MarkProcessor.prototype.processString = function() {
            this.shift();
            return this.processStringEnd();
        };
        MarkProcessor.prototype.processStringEnd = function() {
            var prev = this.marks[this.index - 1];
            var curr = this.marks[this.index];
            this.shift();
            return this.string.slice(prev.position, curr.position);
        };
        MarkProcessor.prototype.slice = function(len) {
            var pos = this.marks[this.index].position;
            return this.string.slice(pos, pos + len);
        };
        return MarkProcessor;
    }();
    var RFC3339_REGEX = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|([-+]\d{2}:\d{2}))$/;
    function parseRFC3339(str) {
        if (RFC3339_REGEX.test(str)) {
            return new Date(str);
        }
        return null;
    }
    function formatRFC3339(d) {
        var year = addLeadingZero(d.getUTCFullYear(), 4);
        var month = addLeadingZero(d.getUTCMonth() + 1, 2);
        var day = addLeadingZero(d.getUTCDate(), 2);
        var hour = addLeadingZero(d.getUTCHours(), 2);
        var minute = addLeadingZero(d.getUTCMinutes(), 2);
        var second = addLeadingZero(d.getUTCSeconds(), 2);
        var fractionalSecond = "";
        var millis = d.getMilliseconds();
        if (millis != 0) {
            fractionalSecond = ".".concat(addLeadingZero(millis, 3));
        }
        return "".concat(year, "-").concat(month, "-").concat(day, "T").concat(hour, ":").concat(minute, ":").concat(second).concat(fractionalSecond, "Z");
    }
    function addLeadingZero(num, targetLength) {
        var str = num.toString();
        while(str.length < targetLength){
            str = "0".concat(str);
        }
        return str;
    }
    function escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }
    function pathRegExp(pattern) {
        var re = [];
        for(var _i = 0, _a = pattern.split("."); _i < _a.length; _i++){
            var part = _a[_i];
            if (part === "*") {
                re.push("[^.]+");
            } else if (part === "**") {
                re.push(".*");
            } else {
                re.push(escapeRegExp(part));
            }
        }
        return new RegExp("^".concat(re.join("."), "$"));
    }
    var Path = /** @class */ function() {
        function Path(pattern) {
            this.pattern = pattern;
            this.patternRe = pathRegExp(pattern);
        }
        Path.prototype.matches = function(str) {
            return this.patternRe.test(str);
        };
        Path.prototype.toJSON = function() {
            return this.pattern;
        };
        return Path;
    }();
    var StreamValue = /** @class */ function() {
        function StreamValue(generator) {
            this.type = "stream";
            this.generator = generator;
            this.ticker = null;
            this.isDone = false;
            this.data = [];
        }
        // eslint-disable-next-line class-methods-use-this
        StreamValue.prototype.isArray = function() {
            return true;
        };
        StreamValue.prototype.get = function() {
            var e_1, _a;
            return __awaiter(this, void 0, void 0, function() {
                var result, _b, _c, value, _d, _e, e_1_1;
                return __generator(this, function(_f) {
                    switch(_f.label){
                        case 0:
                            result = [];
                            _f.label = 1;
                        case 1:
                            _f.trys.push([
                                1,
                                7,
                                8,
                                13
                            ]);
                            _b = __asyncValues(this);
                            _f.label = 2;
                        case 2:
                            return [
                                4 /*yield*/ ,
                                _b.next()
                            ];
                        case 3:
                            if (!(_c = _f.sent(), !_c.done)) return [
                                3 /*break*/ ,
                                6
                            ];
                            value = _c.value;
                            _e = (_d = result).push;
                            return [
                                4 /*yield*/ ,
                                value.get()
                            ];
                        case 4:
                            _e.apply(_d, [
                                _f.sent()
                            ]);
                            _f.label = 5;
                        case 5:
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case 6:
                            return [
                                3 /*break*/ ,
                                13
                            ];
                        case 7:
                            e_1_1 = _f.sent();
                            e_1 = {
                                error: e_1_1
                            };
                            return [
                                3 /*break*/ ,
                                13
                            ];
                        case 8:
                            _f.trys.push([
                                8,
                                ,
                                11,
                                12
                            ]);
                            if (!(_c && !_c.done && (_a = _b["return"]))) return [
                                3 /*break*/ ,
                                10
                            ];
                            return [
                                4 /*yield*/ ,
                                _a.call(_b)
                            ];
                        case 9:
                            _f.sent();
                            _f.label = 10;
                        case 10:
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case 11:
                            if (e_1) throw e_1.error;
                            return [
                                7 /*endfinally*/ 
                            ];
                        case 12:
                            return [
                                7 /*endfinally*/ 
                            ];
                        case 13:
                            return [
                                2 /*return*/ ,
                                result
                            ];
                    }
                });
            });
        };
        StreamValue.prototype[Symbol.asyncIterator] = function() {
            return __asyncGenerator(this, arguments, function _a() {
                var i;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            i = 0;
                            _b.label = 1;
                        case 1:
                            _b.label = 2;
                        case 2:
                            if (!(i < this.data.length)) return [
                                3 /*break*/ ,
                                6
                            ];
                            return [
                                4 /*yield*/ ,
                                __await(this.data[i])
                            ];
                        case 3:
                            return [
                                4 /*yield*/ ,
                                _b.sent()
                            ];
                        case 4:
                            _b.sent();
                            _b.label = 5;
                        case 5:
                            i++;
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case 6:
                            if (!this.isDone) return [
                                3 /*break*/ ,
                                8
                            ];
                            return [
                                4 /*yield*/ ,
                                __await(void 0)
                            ];
                        case 7:
                            return [
                                2 /*return*/ ,
                                _b.sent()
                            ];
                        case 8:
                            return [
                                4 /*yield*/ ,
                                __await(this._nextTick())
                            ];
                        case 9:
                            _b.sent();
                            return [
                                3 /*break*/ ,
                                1
                            ];
                        case 10:
                            return [
                                2 /*return*/ 
                            ];
                    }
                });
            });
        };
        StreamValue.prototype._nextTick = function() {
            var _this = this;
            if (this.ticker) {
                return this.ticker;
            }
            var currentResolver;
            var setupTicker = function() {
                _this.ticker = new Promise(function(resolve) {
                    currentResolver = resolve;
                });
            };
            var tick = function() {
                currentResolver();
                setupTicker();
            };
            var fetch = function() {
                return __awaiter(_this, void 0, void 0, function() {
                    var _a, _b, value, e_2_1;
                    var e_2, _c;
                    return __generator(this, function(_d) {
                        switch(_d.label){
                            case 0:
                                _d.trys.push([
                                    0,
                                    5,
                                    6,
                                    11
                                ]);
                                _a = __asyncValues(this.generator());
                                _d.label = 1;
                            case 1:
                                return [
                                    4 /*yield*/ ,
                                    _a.next()
                                ];
                            case 2:
                                if (!(_b = _d.sent(), !_b.done)) return [
                                    3 /*break*/ ,
                                    4
                                ];
                                value = _b.value;
                                this.data.push(value);
                                tick();
                                _d.label = 3;
                            case 3:
                                return [
                                    3 /*break*/ ,
                                    1
                                ];
                            case 4:
                                return [
                                    3 /*break*/ ,
                                    11
                                ];
                            case 5:
                                e_2_1 = _d.sent();
                                e_2 = {
                                    error: e_2_1
                                };
                                return [
                                    3 /*break*/ ,
                                    11
                                ];
                            case 6:
                                _d.trys.push([
                                    6,
                                    ,
                                    9,
                                    10
                                ]);
                                if (!(_b && !_b.done && (_c = _a["return"]))) return [
                                    3 /*break*/ ,
                                    8
                                ];
                                return [
                                    4 /*yield*/ ,
                                    _c.call(_a)
                                ];
                            case 7:
                                _d.sent();
                                _d.label = 8;
                            case 8:
                                return [
                                    3 /*break*/ ,
                                    10
                                ];
                            case 9:
                                if (e_2) throw e_2.error;
                                return [
                                    7 /*endfinally*/ 
                                ];
                            case 10:
                                return [
                                    7 /*endfinally*/ 
                                ];
                            case 11:
                                this.isDone = true;
                                tick();
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                });
            };
            setupTicker();
            fetch();
            return this.ticker;
        };
        return StreamValue;
    }();
    var StaticValue = /** @class */ function() {
        function StaticValue(data, type) {
            this.data = data;
            this.type = type;
        }
        StaticValue.prototype.isArray = function() {
            return this.type === "array";
        };
        // eslint-disable-next-line require-await
        StaticValue.prototype.get = function() {
            return __awaiter(this, void 0, void 0, function() {
                return __generator(this, function(_a) {
                    return [
                        2 /*return*/ ,
                        this.data
                    ];
                });
            });
        };
        StaticValue.prototype[Symbol.asyncIterator] = function() {
            if (Array.isArray(this.data)) {
                return function(data) {
                    var _i, data_1, element;
                    return __generator(this, function(_a) {
                        switch(_a.label){
                            case 0:
                                _i = 0, data_1 = data;
                                _a.label = 1;
                            case 1:
                                if (!(_i < data_1.length)) return [
                                    3 /*break*/ ,
                                    4
                                ];
                                element = data_1[_i];
                                return [
                                    4 /*yield*/ ,
                                    fromJS(element)
                                ];
                            case 2:
                                _a.sent();
                                _a.label = 3;
                            case 3:
                                _i++;
                                return [
                                    3 /*break*/ ,
                                    1
                                ];
                            case 4:
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                }(this.data);
            }
            throw new Error("Cannot iterate over: ".concat(this.type));
        };
        return StaticValue;
    }();
    var NULL_VALUE = new StaticValue(null, "null");
    var TRUE_VALUE = new StaticValue(true, "boolean");
    var FALSE_VALUE = new StaticValue(false, "boolean");
    var DateTime = /** @class */ function() {
        function DateTime(date) {
            this.date = date;
        }
        DateTime.parseToValue = function(str) {
            var date = parseRFC3339(str);
            if (date) {
                return new StaticValue(new DateTime(date), "datetime");
            }
            return NULL_VALUE;
        };
        DateTime.prototype.equals = function(other) {
            return this.date.getTime() == other.date.getTime();
        };
        DateTime.prototype.add = function(secs) {
            var copy = new Date(this.date.getTime());
            copy.setTime(copy.getTime() + secs * 1000);
            return new DateTime(copy);
        };
        DateTime.prototype.difference = function(other) {
            return (this.date.getTime() - other.date.getTime()) / 1000;
        };
        DateTime.prototype.compareTo = function(other) {
            return this.date.getTime() - other.date.getTime();
        };
        DateTime.prototype.toString = function() {
            return formatRFC3339(this.date);
        };
        DateTime.prototype.toJSON = function() {
            return this.toString();
        };
        return DateTime;
    }();
    function fromNumber(num) {
        if (Number.isFinite(num)) {
            return new StaticValue(num, "number");
        }
        return NULL_VALUE;
    }
    function fromString(str) {
        return new StaticValue(str, "string");
    }
    function fromDateTime(dt) {
        return new StaticValue(dt, "datetime");
    }
    function fromPath(path) {
        return new StaticValue(path, "path");
    }
    function isIterator(obj) {
        return obj && typeof obj.next === "function";
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    function fromJS(val) {
        if (isIterator(val)) {
            return new StreamValue(function() {
                return __asyncGenerator(this, arguments, function() {
                    var val_1, val_1_1, value, e_1_1;
                    var e_1, _a;
                    return __generator(this, function(_b) {
                        switch(_b.label){
                            case 0:
                                _b.trys.push([
                                    0,
                                    7,
                                    8,
                                    13
                                ]);
                                val_1 = __asyncValues(val);
                                _b.label = 1;
                            case 1:
                                return [
                                    4 /*yield*/ ,
                                    __await(val_1.next())
                                ];
                            case 2:
                                if (!(val_1_1 = _b.sent(), !val_1_1.done)) return [
                                    3 /*break*/ ,
                                    6
                                ];
                                value = val_1_1.value;
                                return [
                                    4 /*yield*/ ,
                                    __await(fromJS(value))
                                ];
                            case 3:
                                return [
                                    4 /*yield*/ ,
                                    _b.sent()
                                ];
                            case 4:
                                _b.sent();
                                _b.label = 5;
                            case 5:
                                return [
                                    3 /*break*/ ,
                                    1
                                ];
                            case 6:
                                return [
                                    3 /*break*/ ,
                                    13
                                ];
                            case 7:
                                e_1_1 = _b.sent();
                                e_1 = {
                                    error: e_1_1
                                };
                                return [
                                    3 /*break*/ ,
                                    13
                                ];
                            case 8:
                                _b.trys.push([
                                    8,
                                    ,
                                    11,
                                    12
                                ]);
                                if (!(val_1_1 && !val_1_1.done && (_a = val_1["return"]))) return [
                                    3 /*break*/ ,
                                    10
                                ];
                                return [
                                    4 /*yield*/ ,
                                    __await(_a.call(val_1))
                                ];
                            case 9:
                                _b.sent();
                                _b.label = 10;
                            case 10:
                                return [
                                    3 /*break*/ ,
                                    12
                                ];
                            case 11:
                                if (e_1) throw e_1.error;
                                return [
                                    7 /*endfinally*/ 
                                ];
                            case 12:
                                return [
                                    7 /*endfinally*/ 
                                ];
                            case 13:
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                });
            });
        } else if (val === null || val === undefined) {
            return NULL_VALUE;
        }
        return new StaticValue(val, getType(val));
    }
    /**
 * Returns the type of the value.
 */ // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    function getType(data) {
        if (data === null || typeof data === "undefined") {
            return "null";
        }
        if (Array.isArray(data)) {
            return "array";
        }
        if (data instanceof Path) {
            return "path";
        }
        if (data instanceof DateTime) {
            return "datetime";
        }
        return typeof data;
    }
    var TYPE_ORDER = {
        datetime: 1,
        number: 2,
        string: 3,
        boolean: 4
    };
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    function partialCompare(a, b) {
        var aType = getType(a);
        var bType = getType(b);
        if (aType !== bType) {
            return null;
        }
        switch(aType){
            case "number":
            case "boolean":
                return a - b;
            case "string":
                if (a < b) return -1;
                if (a > b) return 1;
                return 0;
            case "datetime":
                return a.compareTo(b);
            default:
                return null;
        }
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    function totalCompare(a, b) {
        var aType = getType(a);
        var bType = getType(b);
        var aTypeOrder = TYPE_ORDER[aType] || 100;
        var bTypeOrder = TYPE_ORDER[bType] || 100;
        if (aTypeOrder !== bTypeOrder) {
            return aTypeOrder - bTypeOrder;
        }
        var result = partialCompare(a, b);
        if (result === null) {
            result = 0;
        }
        return result;
    }
    var CHARS = /([^!@#$%^&*(),\\/?";:{}|[\]+<>\s-])+/g;
    var CHARS_WITH_WILDCARD = /([^!@#$%^&(),\\/?";:{}|[\]+<>\s-])+/g;
    var EDGE_CHARS = /(\b\.+|\.+\b)/g;
    var MAX_TERM_LENGTH = 1024;
    function matchText(tokens, patterns) {
        if (tokens.length === 0 || patterns.length === 0) {
            return false;
        }
        return patterns.every(function(pattern) {
            return pattern(tokens);
        });
    }
    function matchTokenize(text) {
        return text.replace(EDGE_CHARS, "").match(CHARS) || [];
    }
    function matchAnalyzePattern(text) {
        var termsRe = matchPatternRegex(text);
        return termsRe.map(function(re) {
            return function(tokens) {
                return tokens.some(function(token) {
                    return re.test(token);
                });
            };
        });
    }
    function matchPatternRegex(text) {
        var terms = text.replace(EDGE_CHARS, "").match(CHARS_WITH_WILDCARD) || [];
        return terms.map(function(term) {
            return new RegExp("^".concat(term.slice(0, MAX_TERM_LENGTH).replace(/\*/g, ".*"), "$"), "i");
        });
    }
    function gatherText(value, cb) {
        var value_1, value_1_1;
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function() {
            var success, part, e_1_1;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        if (value.type === "string") {
                            cb(value.data);
                            return [
                                2 /*return*/ ,
                                true
                            ];
                        }
                        if (!value.isArray()) return [
                            3 /*break*/ ,
                            13
                        ];
                        success = true;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([
                            1,
                            6,
                            7,
                            12
                        ]);
                        value_1 = __asyncValues(value);
                        _b.label = 2;
                    case 2:
                        return [
                            4 /*yield*/ ,
                            value_1.next()
                        ];
                    case 3:
                        if (!(value_1_1 = _b.sent(), !value_1_1.done)) return [
                            3 /*break*/ ,
                            5
                        ];
                        part = value_1_1.value;
                        if (part.type === "string") {
                            cb(part.data);
                        } else {
                            success = false;
                        }
                        _b.label = 4;
                    case 4:
                        return [
                            3 /*break*/ ,
                            2
                        ];
                    case 5:
                        return [
                            3 /*break*/ ,
                            12
                        ];
                    case 6:
                        e_1_1 = _b.sent();
                        e_1 = {
                            error: e_1_1
                        };
                        return [
                            3 /*break*/ ,
                            12
                        ];
                    case 7:
                        _b.trys.push([
                            7,
                            ,
                            10,
                            11
                        ]);
                        if (!(value_1_1 && !value_1_1.done && (_a = value_1["return"]))) return [
                            3 /*break*/ ,
                            9
                        ];
                        return [
                            4 /*yield*/ ,
                            _a.call(value_1)
                        ];
                    case 8:
                        _b.sent();
                        _b.label = 9;
                    case 9:
                        return [
                            3 /*break*/ ,
                            11
                        ];
                    case 10:
                        if (e_1) throw e_1.error;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 11:
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 12:
                        return [
                            2 /*return*/ ,
                            success
                        ];
                    case 13:
                        return [
                            2 /*return*/ ,
                            false
                        ];
                }
            });
        });
    } // BM25 similarity constants
    var BM25k = 1.2;
    function evaluateScore(node, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var innerScore, boost, _a, leftScore, rightScore, leftScore, rightScore, res;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        if (node.type === "OpCall" && node.op === "match") {
                            return [
                                2 /*return*/ ,
                                evaluateMatchScore(node.left, node.right, scope, execute)
                            ];
                        }
                        if (!(node.type === "FuncCall" && node.name === "boost")) return [
                            3 /*break*/ ,
                            3
                        ];
                        return [
                            4 /*yield*/ ,
                            evaluateScore(node.args[0], scope, execute)
                        ];
                    case 1:
                        innerScore = _b.sent();
                        return [
                            4 /*yield*/ ,
                            execute(node.args[1], scope)
                        ];
                    case 2:
                        boost = _b.sent();
                        if (boost.type === "number" && innerScore > 0) {
                            return [
                                2 /*return*/ ,
                                innerScore + boost.data
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            0
                        ];
                    case 3:
                        _a = node.type;
                        switch(_a){
                            case "Or":
                                return [
                                    3 /*break*/ ,
                                    4
                                ];
                            case "And":
                                return [
                                    3 /*break*/ ,
                                    7
                                ];
                        }
                        return [
                            3 /*break*/ ,
                            10
                        ];
                    case 4:
                        return [
                            4 /*yield*/ ,
                            evaluateScore(node.left, scope, execute)
                        ];
                    case 5:
                        leftScore = _b.sent();
                        return [
                            4 /*yield*/ ,
                            evaluateScore(node.right, scope, execute)
                        ];
                    case 6:
                        rightScore = _b.sent();
                        return [
                            2 /*return*/ ,
                            leftScore + rightScore
                        ];
                    case 7:
                        return [
                            4 /*yield*/ ,
                            evaluateScore(node.left, scope, execute)
                        ];
                    case 8:
                        leftScore = _b.sent();
                        return [
                            4 /*yield*/ ,
                            evaluateScore(node.right, scope, execute)
                        ];
                    case 9:
                        rightScore = _b.sent();
                        if (leftScore === 0 || rightScore === 0) return [
                            2 /*return*/ ,
                            0
                        ];
                        return [
                            2 /*return*/ ,
                            leftScore + rightScore
                        ];
                    case 10:
                        return [
                            4 /*yield*/ ,
                            execute(node, scope)
                        ];
                    case 11:
                        res = _b.sent();
                        return [
                            2 /*return*/ ,
                            res.type === "boolean" && res.data === true ? 1 : 0
                        ];
                }
            });
        });
    }
    function evaluateMatchScore(left, right, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var text, pattern, tokens, terms, didSucceed, score, _loop_1, _i, terms_1, re;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(left, scope)
                        ];
                    case 1:
                        text = _a.sent();
                        return [
                            4 /*yield*/ ,
                            execute(right, scope)
                        ];
                    case 2:
                        pattern = _a.sent();
                        tokens = [];
                        terms = [];
                        return [
                            4 /*yield*/ ,
                            gatherText(text, function(part) {
                                tokens = tokens.concat(matchTokenize(part));
                            })
                        ];
                    case 3:
                        _a.sent();
                        return [
                            4 /*yield*/ ,
                            gatherText(pattern, function(part) {
                                terms = terms.concat(matchPatternRegex(part));
                            })
                        ];
                    case 4:
                        didSucceed = _a.sent();
                        if (!didSucceed) {
                            return [
                                2 /*return*/ ,
                                0
                            ];
                        }
                        if (tokens.length === 0 || terms.length === 0) {
                            return [
                                2 /*return*/ ,
                                0
                            ];
                        }
                        score = 0;
                        _loop_1 = function(re) {
                            var freq = tokens.reduce(function(c, token) {
                                return c + (re.test(token) ? 1 : 0);
                            }, 0);
                            score += freq * (BM25k + 1) / (freq + BM25k);
                        };
                        for(_i = 0, terms_1 = terms; _i < terms_1.length; _i++){
                            re = terms_1[_i];
                            _loop_1(re);
                        }
                        return [
                            2 /*return*/ ,
                            score
                        ];
                }
            });
        });
    }
    function portableTextContent(value) {
        return __awaiter(this, void 0, void 0, function() {
            var texts;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!(value.type === "object")) return [
                            3 /*break*/ ,
                            1
                        ];
                        return [
                            2 /*return*/ ,
                            blockText(value.data)
                        ];
                    case 1:
                        if (!value.isArray()) return [
                            3 /*break*/ ,
                            3
                        ];
                        return [
                            4 /*yield*/ ,
                            arrayText(value)
                        ];
                    case 2:
                        texts = _a.sent();
                        if (texts.length > 0) {
                            return [
                                2 /*return*/ ,
                                texts.join("\n\n")
                            ];
                        }
                        _a.label = 3;
                    case 3:
                        return [
                            2 /*return*/ ,
                            null
                        ];
                }
            });
        });
    }
    function arrayText(value, result) {
        var value_1, value_1_1;
        var e_1, _a;
        if (result === void 0) {
            result = [];
        }
        return __awaiter(this, void 0, void 0, function() {
            var block, text, e_1_1;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        _b.trys.push([
                            0,
                            7,
                            8,
                            13
                        ]);
                        value_1 = __asyncValues(value);
                        _b.label = 1;
                    case 1:
                        return [
                            4 /*yield*/ ,
                            value_1.next()
                        ];
                    case 2:
                        if (!(value_1_1 = _b.sent(), !value_1_1.done)) return [
                            3 /*break*/ ,
                            6
                        ];
                        block = value_1_1.value;
                        if (!(block.type === "object")) return [
                            3 /*break*/ ,
                            3
                        ];
                        text = blockText(block.data);
                        if (text !== null) result.push(text);
                        return [
                            3 /*break*/ ,
                            5
                        ];
                    case 3:
                        if (!block.isArray()) return [
                            3 /*break*/ ,
                            5
                        ];
                        return [
                            4 /*yield*/ ,
                            arrayText(block, result)
                        ];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        return [
                            3 /*break*/ ,
                            1
                        ];
                    case 6:
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 7:
                        e_1_1 = _b.sent();
                        e_1 = {
                            error: e_1_1
                        };
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 8:
                        _b.trys.push([
                            8,
                            ,
                            11,
                            12
                        ]);
                        if (!(value_1_1 && !value_1_1.done && (_a = value_1["return"]))) return [
                            3 /*break*/ ,
                            10
                        ];
                        return [
                            4 /*yield*/ ,
                            _a.call(value_1)
                        ];
                    case 9:
                        _b.sent();
                        _b.label = 10;
                    case 10:
                        return [
                            3 /*break*/ ,
                            12
                        ];
                    case 11:
                        if (e_1) throw e_1.error;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 12:
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 13:
                        return [
                            2 /*return*/ ,
                            result
                        ];
                }
            });
        });
    }
    function blockText(obj) {
        if (typeof obj._type !== "string") return null;
        var children = obj.children;
        if (!Array.isArray(children)) return null;
        var result = "";
        for(var _i = 0, children_1 = children; _i < children_1.length; _i++){
            var child = children_1[_i];
            if (child && typeof child === "object" && typeof child._type === "string" && child._type === "span" && typeof child.text === "string") {
                result += child.text;
            }
        }
        return result;
    }
    function hasReference(value, pathSet) {
        switch(getType(value)){
            case "array":
                for(var _i = 0, value_1 = value; _i < value_1.length; _i++){
                    var v = value_1[_i];
                    if (hasReference(v, pathSet)) {
                        return true;
                    }
                }
                break;
            case "object":
                if (value._ref) {
                    return pathSet.has(value._ref);
                }
                for(var _a = 0, _b = Object.values(value); _a < _b.length; _a++){
                    var v = _b[_a];
                    if (hasReference(v, pathSet)) {
                        return true;
                    }
                }
                break;
        }
        return false;
    }
    function countUTF8(str) {
        var count = 0;
        for(var i = 0; i < str.length; i++){
            var code = str.charCodeAt(i);
            if (code >= 0xd800 && code <= 0xdbff) {
                continue;
            }
            count++;
        }
        return count;
    }
    var global = {};
    global.anywhere = function anywhere() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                throw new Error("not implemented");
            });
        });
    };
    global.anywhere.arity = 1;
    global.coalesce = function coalesce(args, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var _i, args_1, arg, value;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _i = 0, args_1 = args;
                        _a.label = 1;
                    case 1:
                        if (!(_i < args_1.length)) return [
                            3 /*break*/ ,
                            4
                        ];
                        arg = args_1[_i];
                        return [
                            4 /*yield*/ ,
                            execute(arg, scope)
                        ];
                    case 2:
                        value = _a.sent();
                        if (value.type !== "null") {
                            return [
                                2 /*return*/ ,
                                value
                            ];
                        }
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [
                            3 /*break*/ ,
                            1
                        ];
                    case 4:
                        return [
                            2 /*return*/ ,
                            NULL_VALUE
                        ];
                }
            });
        });
    };
    global.count = function count(args, scope, execute) {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function() {
            var inner, num, inner_1, inner_1_1, e_1_1;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        inner = _b.sent();
                        if (!inner.isArray()) {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        num = 0;
                        _b.label = 2;
                    case 2:
                        _b.trys.push([
                            2,
                            7,
                            8,
                            13
                        ]);
                        inner_1 = __asyncValues(inner);
                        _b.label = 3;
                    case 3:
                        return [
                            4 /*yield*/ ,
                            inner_1.next()
                        ];
                    case 4:
                        if (!(inner_1_1 = _b.sent(), !inner_1_1.done)) return [
                            3 /*break*/ ,
                            6
                        ];
                        inner_1_1.value;
                        num++;
                        _b.label = 5;
                    case 5:
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 6:
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 7:
                        e_1_1 = _b.sent();
                        e_1 = {
                            error: e_1_1
                        };
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 8:
                        _b.trys.push([
                            8,
                            ,
                            11,
                            12
                        ]);
                        if (!(inner_1_1 && !inner_1_1.done && (_a = inner_1["return"]))) return [
                            3 /*break*/ ,
                            10
                        ];
                        return [
                            4 /*yield*/ ,
                            _a.call(inner_1)
                        ];
                    case 9:
                        _b.sent();
                        _b.label = 10;
                    case 10:
                        return [
                            3 /*break*/ ,
                            12
                        ];
                    case 11:
                        if (e_1) throw e_1.error;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 12:
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 13:
                        return [
                            2 /*return*/ ,
                            fromNumber(num)
                        ];
                }
            });
        });
    };
    global.count.arity = 1;
    global.dateTime = function dateTime(args, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var val;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        val = _a.sent();
                        if (val.type === "datetime") {
                            return [
                                2 /*return*/ ,
                                val
                            ];
                        }
                        if (val.type !== "string") {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            DateTime.parseToValue(val.data)
                        ];
                }
            });
        });
    };
    global.dateTime.arity = 1;
    global.defined = function defined(args, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var inner;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        inner = _a.sent();
                        return [
                            2 /*return*/ ,
                            inner.type === "null" ? FALSE_VALUE : TRUE_VALUE
                        ];
                }
            });
        });
    };
    global.defined.arity = 1;
    // eslint-disable-next-line require-await
    global.identity = function identity(args, scope) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    fromString(scope.context.identity)
                ];
            });
        });
    };
    global.identity.arity = 0;
    global.length = function length(args, scope, execute) {
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function() {
            var inner, num, inner_2, inner_2_1, e_2_1;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        inner = _b.sent();
                        if (inner.type === "string") {
                            return [
                                2 /*return*/ ,
                                fromNumber(countUTF8(inner.data))
                            ];
                        }
                        if (!inner.isArray()) return [
                            3 /*break*/ ,
                            14
                        ];
                        num = 0;
                        _b.label = 2;
                    case 2:
                        _b.trys.push([
                            2,
                            7,
                            8,
                            13
                        ]);
                        inner_2 = __asyncValues(inner);
                        _b.label = 3;
                    case 3:
                        return [
                            4 /*yield*/ ,
                            inner_2.next()
                        ];
                    case 4:
                        if (!(inner_2_1 = _b.sent(), !inner_2_1.done)) return [
                            3 /*break*/ ,
                            6
                        ];
                        inner_2_1.value;
                        num++;
                        _b.label = 5;
                    case 5:
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 6:
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 7:
                        e_2_1 = _b.sent();
                        e_2 = {
                            error: e_2_1
                        };
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 8:
                        _b.trys.push([
                            8,
                            ,
                            11,
                            12
                        ]);
                        if (!(inner_2_1 && !inner_2_1.done && (_a = inner_2["return"]))) return [
                            3 /*break*/ ,
                            10
                        ];
                        return [
                            4 /*yield*/ ,
                            _a.call(inner_2)
                        ];
                    case 9:
                        _b.sent();
                        _b.label = 10;
                    case 10:
                        return [
                            3 /*break*/ ,
                            12
                        ];
                    case 11:
                        if (e_2) throw e_2.error;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 12:
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 13:
                        return [
                            2 /*return*/ ,
                            fromNumber(num)
                        ];
                    case 14:
                        return [
                            2 /*return*/ ,
                            NULL_VALUE
                        ];
                }
            });
        });
    };
    global.length.arity = 1;
    global.path = function path(args, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var inner;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        inner = _a.sent();
                        if (inner.type !== "string") {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            fromPath(new Path(inner.data))
                        ];
                }
            });
        });
    };
    global.path.arity = 1;
    global.string = function string(args, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var value;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        value = _a.sent();
                        switch(value.type){
                            case "number":
                            case "string":
                            case "boolean":
                            case "datetime":
                                return [
                                    2 /*return*/ ,
                                    fromString("".concat(value.data))
                                ];
                            default:
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                        }
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    global.string.arity = 1;
    global.references = function references(args, scope, execute) {
        var e_3, _a;
        return __awaiter(this, void 0, void 0, function() {
            var pathSet, _i, args_2, arg, path, path_1, path_1_1, elem, e_3_1, scopeValue;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        pathSet = new Set();
                        _i = 0, args_2 = args;
                        _b.label = 1;
                    case 1:
                        if (!(_i < args_2.length)) return [
                            3 /*break*/ ,
                            16
                        ];
                        arg = args_2[_i];
                        return [
                            4 /*yield*/ ,
                            execute(arg, scope)
                        ];
                    case 2:
                        path = _b.sent();
                        if (!(path.type === "string")) return [
                            3 /*break*/ ,
                            3
                        ];
                        pathSet.add(path.data);
                        return [
                            3 /*break*/ ,
                            15
                        ];
                    case 3:
                        if (!path.isArray()) return [
                            3 /*break*/ ,
                            15
                        ];
                        _b.label = 4;
                    case 4:
                        _b.trys.push([
                            4,
                            9,
                            10,
                            15
                        ]);
                        path_1 = (e_3 = void 0, __asyncValues(path));
                        _b.label = 5;
                    case 5:
                        return [
                            4 /*yield*/ ,
                            path_1.next()
                        ];
                    case 6:
                        if (!(path_1_1 = _b.sent(), !path_1_1.done)) return [
                            3 /*break*/ ,
                            8
                        ];
                        elem = path_1_1.value;
                        if (elem.type === "string") {
                            pathSet.add(elem.data);
                        }
                        _b.label = 7;
                    case 7:
                        return [
                            3 /*break*/ ,
                            5
                        ];
                    case 8:
                        return [
                            3 /*break*/ ,
                            15
                        ];
                    case 9:
                        e_3_1 = _b.sent();
                        e_3 = {
                            error: e_3_1
                        };
                        return [
                            3 /*break*/ ,
                            15
                        ];
                    case 10:
                        _b.trys.push([
                            10,
                            ,
                            13,
                            14
                        ]);
                        if (!(path_1_1 && !path_1_1.done && (_a = path_1["return"]))) return [
                            3 /*break*/ ,
                            12
                        ];
                        return [
                            4 /*yield*/ ,
                            _a.call(path_1)
                        ];
                    case 11:
                        _b.sent();
                        _b.label = 12;
                    case 12:
                        return [
                            3 /*break*/ ,
                            14
                        ];
                    case 13:
                        if (e_3) throw e_3.error;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 14:
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 15:
                        _i++;
                        return [
                            3 /*break*/ ,
                            1
                        ];
                    case 16:
                        if (pathSet.size === 0) {
                            return [
                                2 /*return*/ ,
                                FALSE_VALUE
                            ];
                        }
                        return [
                            4 /*yield*/ ,
                            scope.value.get()
                        ];
                    case 17:
                        scopeValue = _b.sent();
                        return [
                            2 /*return*/ ,
                            hasReference(scopeValue, pathSet) ? TRUE_VALUE : FALSE_VALUE
                        ];
                }
            });
        });
    };
    global.references.arity = function(c) {
        return c >= 1;
    };
    global.round = function round(args, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var value, num, prec, precValue;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        value = _a.sent();
                        if (value.type !== "number") {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        num = value.data;
                        prec = 0;
                        if (!(args.length === 2)) return [
                            3 /*break*/ ,
                            3
                        ];
                        return [
                            4 /*yield*/ ,
                            execute(args[1], scope)
                        ];
                    case 2:
                        precValue = _a.sent();
                        if (precValue.type !== "number" || precValue.data < 0 || !Number.isInteger(precValue.data)) {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        prec = precValue.data;
                        _a.label = 3;
                    case 3:
                        if (prec === 0) {
                            if (num < 0) {
                                // JavaScript's round() function will always rounds towards positive infinity (-3.5 -> -3).
                                // The behavior we're interested in is to "round half away from zero".
                                return [
                                    2 /*return*/ ,
                                    fromNumber(-Math.round(-num))
                                ];
                            }
                            return [
                                2 /*return*/ ,
                                fromNumber(Math.round(num))
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            fromNumber(Number(num.toFixed(prec)))
                        ];
                }
            });
        });
    };
    global.round.arity = function(count) {
        return count >= 1 && count <= 2;
    };
    // eslint-disable-next-line require-await
    global.now = function now(args, scope) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    fromString(scope.context.timestamp.toISOString())
                ];
            });
        });
    };
    global.now.arity = 0;
    // eslint-disable-next-line require-await
    global.boost = function boost() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                // This should be handled by the scoring function.
                throw new Error("unexpected boost call");
            });
        });
    };
    global.boost.arity = 2;
    var string = {};
    string.lower = function(args, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var value;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        value = _a.sent();
                        if (value.type !== "string") {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            fromString(value.data.toLowerCase())
                        ];
                }
            });
        });
    };
    string.lower.arity = 1;
    string.upper = function(args, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var value;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        value = _a.sent();
                        if (value.type !== "string") {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            fromString(value.data.toUpperCase())
                        ];
                }
            });
        });
    };
    string.upper.arity = 1;
    string.split = function(args, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var str, sep;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        str = _a.sent();
                        if (str.type !== "string") {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        return [
                            4 /*yield*/ ,
                            execute(args[1], scope)
                        ];
                    case 2:
                        sep = _a.sent();
                        if (sep.type !== "string") {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        if (str.data.length === 0) {
                            return [
                                2 /*return*/ ,
                                fromJS([])
                            ];
                        }
                        if (sep.data.length === 0) {
                            // This uses a Unicode codepoint splitting algorithm
                            return [
                                2 /*return*/ ,
                                fromJS(Array.from(str.data))
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            fromJS(str.data.split(sep.data))
                        ];
                }
            });
        });
    };
    string.split.arity = 2;
    global.lower = string.lower;
    global.upper = string.upper;
    string.startsWith = function(args, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var str, prefix;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        str = _a.sent();
                        if (str.type !== "string") {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        return [
                            4 /*yield*/ ,
                            execute(args[1], scope)
                        ];
                    case 2:
                        prefix = _a.sent();
                        if (prefix.type !== "string") {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            str.data.startsWith(prefix.data) ? TRUE_VALUE : FALSE_VALUE
                        ];
                }
            });
        });
    };
    string.startsWith.arity = 2;
    var array = {};
    array.join = function(args, scope, execute) {
        var e_4, _a;
        return __awaiter(this, void 0, void 0, function() {
            var arr, sep, buf, needSep, arr_1, arr_1_1, elem, e_4_1;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        arr = _b.sent();
                        if (!arr.isArray()) {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        return [
                            4 /*yield*/ ,
                            execute(args[1], scope)
                        ];
                    case 2:
                        sep = _b.sent();
                        if (sep.type !== "string") {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        buf = "";
                        needSep = false;
                        _b.label = 3;
                    case 3:
                        _b.trys.push([
                            3,
                            8,
                            9,
                            14
                        ]);
                        arr_1 = __asyncValues(arr);
                        _b.label = 4;
                    case 4:
                        return [
                            4 /*yield*/ ,
                            arr_1.next()
                        ];
                    case 5:
                        if (!(arr_1_1 = _b.sent(), !arr_1_1.done)) return [
                            3 /*break*/ ,
                            7
                        ];
                        elem = arr_1_1.value;
                        if (needSep) {
                            buf += sep.data;
                        }
                        switch(elem.type){
                            case "number":
                            case "string":
                            case "boolean":
                            case "datetime":
                                buf += "".concat(elem.data);
                                break;
                            default:
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                        }
                        needSep = true;
                        _b.label = 6;
                    case 6:
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 7:
                        return [
                            3 /*break*/ ,
                            14
                        ];
                    case 8:
                        e_4_1 = _b.sent();
                        e_4 = {
                            error: e_4_1
                        };
                        return [
                            3 /*break*/ ,
                            14
                        ];
                    case 9:
                        _b.trys.push([
                            9,
                            ,
                            12,
                            13
                        ]);
                        if (!(arr_1_1 && !arr_1_1.done && (_a = arr_1["return"]))) return [
                            3 /*break*/ ,
                            11
                        ];
                        return [
                            4 /*yield*/ ,
                            _a.call(arr_1)
                        ];
                    case 10:
                        _b.sent();
                        _b.label = 11;
                    case 11:
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 12:
                        if (e_4) throw e_4.error;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 13:
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 14:
                        return [
                            2 /*return*/ ,
                            fromJS(buf)
                        ];
                }
            });
        });
    };
    array.join.arity = 2;
    array.compact = function(args, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var arr;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        arr = _a.sent();
                        if (!arr.isArray()) {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            new StreamValue(function() {
                                return __asyncGenerator(this, arguments, function() {
                                    var arr_2, arr_2_1, elem, e_5_1;
                                    var e_5, _a;
                                    return __generator(this, function(_b) {
                                        switch(_b.label){
                                            case 0:
                                                _b.trys.push([
                                                    0,
                                                    7,
                                                    8,
                                                    13
                                                ]);
                                                arr_2 = __asyncValues(arr);
                                                _b.label = 1;
                                            case 1:
                                                return [
                                                    4 /*yield*/ ,
                                                    __await(arr_2.next())
                                                ];
                                            case 2:
                                                if (!(arr_2_1 = _b.sent(), !arr_2_1.done)) return [
                                                    3 /*break*/ ,
                                                    6
                                                ];
                                                elem = arr_2_1.value;
                                                if (!(elem.type !== "null")) return [
                                                    3 /*break*/ ,
                                                    5
                                                ];
                                                return [
                                                    4 /*yield*/ ,
                                                    __await(elem)
                                                ];
                                            case 3:
                                                return [
                                                    4 /*yield*/ ,
                                                    _b.sent()
                                                ];
                                            case 4:
                                                _b.sent();
                                                _b.label = 5;
                                            case 5:
                                                return [
                                                    3 /*break*/ ,
                                                    1
                                                ];
                                            case 6:
                                                return [
                                                    3 /*break*/ ,
                                                    13
                                                ];
                                            case 7:
                                                e_5_1 = _b.sent();
                                                e_5 = {
                                                    error: e_5_1
                                                };
                                                return [
                                                    3 /*break*/ ,
                                                    13
                                                ];
                                            case 8:
                                                _b.trys.push([
                                                    8,
                                                    ,
                                                    11,
                                                    12
                                                ]);
                                                if (!(arr_2_1 && !arr_2_1.done && (_a = arr_2["return"]))) return [
                                                    3 /*break*/ ,
                                                    10
                                                ];
                                                return [
                                                    4 /*yield*/ ,
                                                    __await(_a.call(arr_2))
                                                ];
                                            case 9:
                                                _b.sent();
                                                _b.label = 10;
                                            case 10:
                                                return [
                                                    3 /*break*/ ,
                                                    12
                                                ];
                                            case 11:
                                                if (e_5) throw e_5.error;
                                                return [
                                                    7 /*endfinally*/ 
                                                ];
                                            case 12:
                                                return [
                                                    7 /*endfinally*/ 
                                                ];
                                            case 13:
                                                return [
                                                    2 /*return*/ 
                                                ];
                                        }
                                    });
                                });
                            })
                        ];
                }
            });
        });
    };
    array.compact.arity = 1;
    array.unique = function(args, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var value;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        value = _a.sent();
                        if (!value.isArray()) {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            new StreamValue(function() {
                                return __asyncGenerator(this, arguments, function() {
                                    var added, value_2, value_2_1, iter, _a, e_6_1;
                                    var e_6, _b;
                                    return __generator(this, function(_c) {
                                        switch(_c.label){
                                            case 0:
                                                added = new Set();
                                                _c.label = 1;
                                            case 1:
                                                _c.trys.push([
                                                    1,
                                                    13,
                                                    14,
                                                    19
                                                ]);
                                                value_2 = __asyncValues(value);
                                                _c.label = 2;
                                            case 2:
                                                return [
                                                    4 /*yield*/ ,
                                                    __await(value_2.next())
                                                ];
                                            case 3:
                                                if (!(value_2_1 = _c.sent(), !value_2_1.done)) return [
                                                    3 /*break*/ ,
                                                    12
                                                ];
                                                iter = value_2_1.value;
                                                _a = iter.type;
                                                switch(_a){
                                                    case "number":
                                                        return [
                                                            3 /*break*/ ,
                                                            4
                                                        ];
                                                    case "string":
                                                        return [
                                                            3 /*break*/ ,
                                                            4
                                                        ];
                                                    case "boolean":
                                                        return [
                                                            3 /*break*/ ,
                                                            4
                                                        ];
                                                    case "datetime":
                                                        return [
                                                            3 /*break*/ ,
                                                            4
                                                        ];
                                                }
                                                return [
                                                    3 /*break*/ ,
                                                    8
                                                ];
                                            case 4:
                                                if (!!added.has(iter.data)) return [
                                                    3 /*break*/ ,
                                                    7
                                                ];
                                                added.add(iter.data);
                                                return [
                                                    4 /*yield*/ ,
                                                    __await(iter)
                                                ];
                                            case 5:
                                                return [
                                                    4 /*yield*/ ,
                                                    _c.sent()
                                                ];
                                            case 6:
                                                _c.sent();
                                                _c.label = 7;
                                            case 7:
                                                return [
                                                    3 /*break*/ ,
                                                    11
                                                ];
                                            case 8:
                                                return [
                                                    4 /*yield*/ ,
                                                    __await(iter)
                                                ];
                                            case 9:
                                                return [
                                                    4 /*yield*/ ,
                                                    _c.sent()
                                                ];
                                            case 10:
                                                _c.sent();
                                                _c.label = 11;
                                            case 11:
                                                return [
                                                    3 /*break*/ ,
                                                    2
                                                ];
                                            case 12:
                                                return [
                                                    3 /*break*/ ,
                                                    19
                                                ];
                                            case 13:
                                                e_6_1 = _c.sent();
                                                e_6 = {
                                                    error: e_6_1
                                                };
                                                return [
                                                    3 /*break*/ ,
                                                    19
                                                ];
                                            case 14:
                                                _c.trys.push([
                                                    14,
                                                    ,
                                                    17,
                                                    18
                                                ]);
                                                if (!(value_2_1 && !value_2_1.done && (_b = value_2["return"]))) return [
                                                    3 /*break*/ ,
                                                    16
                                                ];
                                                return [
                                                    4 /*yield*/ ,
                                                    __await(_b.call(value_2))
                                                ];
                                            case 15:
                                                _c.sent();
                                                _c.label = 16;
                                            case 16:
                                                return [
                                                    3 /*break*/ ,
                                                    18
                                                ];
                                            case 17:
                                                if (e_6) throw e_6.error;
                                                return [
                                                    7 /*endfinally*/ 
                                                ];
                                            case 18:
                                                return [
                                                    7 /*endfinally*/ 
                                                ];
                                            case 19:
                                                return [
                                                    2 /*return*/ 
                                                ];
                                        }
                                    });
                                });
                            })
                        ];
                }
            });
        });
    };
    array.unique.arity = 1;
    var pt = {};
    pt.text = function(args, scope, execute) {
        return __awaiter(this, void 0, void 0, function() {
            var value, text;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        value = _a.sent();
                        return [
                            4 /*yield*/ ,
                            portableTextContent(value)
                        ];
                    case 2:
                        text = _a.sent();
                        if (text === null) {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            fromString(text)
                        ];
                }
            });
        });
    };
    pt.text.arity = 1;
    var sanity = {};
    // eslint-disable-next-line require-await
    sanity.projectId = function(args, scope) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                if (scope.context.sanity) {
                    return [
                        2 /*return*/ ,
                        fromString(scope.context.sanity.projectId)
                    ];
                }
                return [
                    2 /*return*/ ,
                    NULL_VALUE
                ];
            });
        });
    };
    // eslint-disable-next-line require-await
    sanity.dataset = function(args, scope) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                if (scope.context.sanity) {
                    return [
                        2 /*return*/ ,
                        fromString(scope.context.sanity.dataset)
                    ];
                }
                return [
                    2 /*return*/ ,
                    NULL_VALUE
                ];
            });
        });
    };
    var pipeFunctions = {};
    pipeFunctions.order = function order(base, args, scope, execute) {
        var base_1, base_1_1;
        var e_7, _a;
        return __awaiter(this, void 0, void 0, function() {
            var mappers, directions, n, _i, args_3, mapper, direction, aux, idx, value, newScope, tuple, i, result, _b, _c, e_7_1;
            return __generator(this, function(_d) {
                switch(_d.label){
                    case 0:
                        // eslint-disable-next-line max-len
                        // This is a workaround for https://github.com/rpetrich/babel-plugin-transform-async-to-promises/issues/59
                        return [
                            4 /*yield*/ ,
                            true
                        ];
                    case 1:
                        // eslint-disable-next-line max-len
                        // This is a workaround for https://github.com/rpetrich/babel-plugin-transform-async-to-promises/issues/59
                        _d.sent();
                        if (!base.isArray()) {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        mappers = [];
                        directions = [];
                        n = 0;
                        for(_i = 0, args_3 = args; _i < args_3.length; _i++){
                            mapper = args_3[_i];
                            direction = "asc";
                            if (mapper.type === "Desc") {
                                direction = "desc";
                                mapper = mapper.base;
                            } else if (mapper.type === "Asc") {
                                mapper = mapper.base;
                            }
                            mappers.push(mapper);
                            directions.push(direction);
                            n++;
                        }
                        aux = [];
                        idx = 0;
                        _d.label = 2;
                    case 2:
                        _d.trys.push([
                            2,
                            13,
                            14,
                            19
                        ]);
                        base_1 = __asyncValues(base);
                        _d.label = 3;
                    case 3:
                        return [
                            4 /*yield*/ ,
                            base_1.next()
                        ];
                    case 4:
                        if (!(base_1_1 = _d.sent(), !base_1_1.done)) return [
                            3 /*break*/ ,
                            12
                        ];
                        value = base_1_1.value;
                        newScope = scope.createNested(value);
                        return [
                            4 /*yield*/ ,
                            value.get()
                        ];
                    case 5:
                        tuple = [
                            _d.sent(),
                            idx
                        ];
                        i = 0;
                        _d.label = 6;
                    case 6:
                        if (!(i < n)) return [
                            3 /*break*/ ,
                            10
                        ];
                        return [
                            4 /*yield*/ ,
                            execute(mappers[i], newScope)
                        ];
                    case 7:
                        result = _d.sent();
                        _c = (_b = tuple).push;
                        return [
                            4 /*yield*/ ,
                            result.get()
                        ];
                    case 8:
                        _c.apply(_b, [
                            _d.sent()
                        ]);
                        _d.label = 9;
                    case 9:
                        i++;
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 10:
                        aux.push(tuple);
                        idx++;
                        _d.label = 11;
                    case 11:
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 12:
                        return [
                            3 /*break*/ ,
                            19
                        ];
                    case 13:
                        e_7_1 = _d.sent();
                        e_7 = {
                            error: e_7_1
                        };
                        return [
                            3 /*break*/ ,
                            19
                        ];
                    case 14:
                        _d.trys.push([
                            14,
                            ,
                            17,
                            18
                        ]);
                        if (!(base_1_1 && !base_1_1.done && (_a = base_1["return"]))) return [
                            3 /*break*/ ,
                            16
                        ];
                        return [
                            4 /*yield*/ ,
                            _a.call(base_1)
                        ];
                    case 15:
                        _d.sent();
                        _d.label = 16;
                    case 16:
                        return [
                            3 /*break*/ ,
                            18
                        ];
                    case 17:
                        if (e_7) throw e_7.error;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 18:
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 19:
                        aux.sort(function(aTuple, bTuple) {
                            for(var i = 0; i < n; i++){
                                var c = totalCompare(aTuple[i + 2], bTuple[i + 2]);
                                if (directions[i] === "desc") {
                                    c = -c;
                                }
                                if (c !== 0) {
                                    return c;
                                }
                            }
                            // Fallback to sorting on the original index for stable sorting.
                            return aTuple[1] - bTuple[1];
                        });
                        return [
                            2 /*return*/ ,
                            fromJS(aux.map(function(v) {
                                return v[0];
                            }))
                        ];
                }
            });
        });
    };
    pipeFunctions.order.arity = function(count) {
        return count >= 1;
    };
    // eslint-disable-next-line require-await
    pipeFunctions.score = function score(base, args, scope, execute) {
        var base_2, base_2_1;
        var e_8, _a;
        return __awaiter(this, void 0, void 0, function() {
            var unknown, scored, value, _b, _c, newScope, valueScore, _i, args_4, arg, _d, newObject, e_8_1;
            return __generator(this, function(_e) {
                switch(_e.label){
                    case 0:
                        if (!base.isArray()) return [
                            2 /*return*/ ,
                            NULL_VALUE
                        ];
                        unknown = [];
                        scored = [];
                        _e.label = 1;
                    case 1:
                        _e.trys.push([
                            1,
                            12,
                            13,
                            18
                        ]);
                        base_2 = __asyncValues(base);
                        _e.label = 2;
                    case 2:
                        return [
                            4 /*yield*/ ,
                            base_2.next()
                        ];
                    case 3:
                        if (!(base_2_1 = _e.sent(), !base_2_1.done)) return [
                            3 /*break*/ ,
                            11
                        ];
                        value = base_2_1.value;
                        if (!(value.type !== "object")) return [
                            3 /*break*/ ,
                            5
                        ];
                        _c = (_b = unknown).push;
                        return [
                            4 /*yield*/ ,
                            value.get()
                        ];
                    case 4:
                        _c.apply(_b, [
                            _e.sent()
                        ]);
                        return [
                            3 /*break*/ ,
                            10
                        ];
                    case 5:
                        newScope = scope.createNested(value);
                        valueScore = typeof value.data._score === "number" ? value.data._score : 0;
                        _i = 0, args_4 = args;
                        _e.label = 6;
                    case 6:
                        if (!(_i < args_4.length)) return [
                            3 /*break*/ ,
                            9
                        ];
                        arg = args_4[_i];
                        _d = valueScore;
                        return [
                            4 /*yield*/ ,
                            evaluateScore(arg, newScope, execute)
                        ];
                    case 7:
                        valueScore = _d + _e.sent();
                        _e.label = 8;
                    case 8:
                        _i++;
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 9:
                        newObject = Object.assign({}, value.data, {
                            _score: valueScore
                        });
                        scored.push(newObject);
                        _e.label = 10;
                    case 10:
                        return [
                            3 /*break*/ ,
                            2
                        ];
                    case 11:
                        return [
                            3 /*break*/ ,
                            18
                        ];
                    case 12:
                        e_8_1 = _e.sent();
                        e_8 = {
                            error: e_8_1
                        };
                        return [
                            3 /*break*/ ,
                            18
                        ];
                    case 13:
                        _e.trys.push([
                            13,
                            ,
                            16,
                            17
                        ]);
                        if (!(base_2_1 && !base_2_1.done && (_a = base_2["return"]))) return [
                            3 /*break*/ ,
                            15
                        ];
                        return [
                            4 /*yield*/ ,
                            _a.call(base_2)
                        ];
                    case 14:
                        _e.sent();
                        _e.label = 15;
                    case 15:
                        return [
                            3 /*break*/ ,
                            17
                        ];
                    case 16:
                        if (e_8) throw e_8.error;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 17:
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 18:
                        scored.sort(function(a, b) {
                            return b._score - a._score;
                        });
                        return [
                            2 /*return*/ ,
                            fromJS(scored)
                        ];
                }
            });
        });
    };
    pipeFunctions.score.arity = function(count) {
        return count >= 1;
    };
    var delta = {};
    delta.operation = function(args, scope) {
        return __awaiter(this, void 0, void 0, function() {
            var hasBefore, hasAfter;
            return __generator(this, function(_a) {
                hasBefore = scope.context.before !== null;
                hasAfter = scope.context.after !== null;
                if (hasBefore && hasAfter) {
                    return [
                        2 /*return*/ ,
                        fromString("update")
                    ];
                }
                if (hasAfter) {
                    return [
                        2 /*return*/ ,
                        fromString("create")
                    ];
                }
                if (hasBefore) {
                    return [
                        2 /*return*/ ,
                        fromString("delete")
                    ];
                }
                return [
                    2 /*return*/ ,
                    NULL_VALUE
                ];
            });
        });
    };
    delta.changedAny = function() {
        throw new Error("not implemented");
    };
    delta.changedAny.arity = 1;
    delta.changedAny.mode = "delta";
    delta.changedOnly = function() {
        throw new Error("not implemented");
    };
    delta.changedOnly.arity = 1;
    delta.changedOnly.mode = "delta";
    var diff = {};
    diff.changedAny = function() {
        throw new Error("not implemented");
    };
    diff.changedAny.arity = 3;
    diff.changedOnly = function() {
        throw new Error("not implemented");
    };
    diff.changedOnly.arity = 3;
    var math = {};
    math.min = function(args, scope, execute) {
        var e_9, _a;
        return __awaiter(this, void 0, void 0, function() {
            var arr, n, arr_3, arr_3_1, elem, e_9_1;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        arr = _b.sent();
                        if (!arr.isArray()) {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        n = undefined;
                        _b.label = 2;
                    case 2:
                        _b.trys.push([
                            2,
                            7,
                            8,
                            13
                        ]);
                        arr_3 = __asyncValues(arr);
                        _b.label = 3;
                    case 3:
                        return [
                            4 /*yield*/ ,
                            arr_3.next()
                        ];
                    case 4:
                        if (!(arr_3_1 = _b.sent(), !arr_3_1.done)) return [
                            3 /*break*/ ,
                            6
                        ];
                        elem = arr_3_1.value;
                        if (elem.type === "null") return [
                            3 /*break*/ ,
                            5
                        ];
                        if (elem.type !== "number") {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        if (n === undefined || elem.data < n) {
                            n = elem.data;
                        }
                        _b.label = 5;
                    case 5:
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 6:
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 7:
                        e_9_1 = _b.sent();
                        e_9 = {
                            error: e_9_1
                        };
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 8:
                        _b.trys.push([
                            8,
                            ,
                            11,
                            12
                        ]);
                        if (!(arr_3_1 && !arr_3_1.done && (_a = arr_3["return"]))) return [
                            3 /*break*/ ,
                            10
                        ];
                        return [
                            4 /*yield*/ ,
                            _a.call(arr_3)
                        ];
                    case 9:
                        _b.sent();
                        _b.label = 10;
                    case 10:
                        return [
                            3 /*break*/ ,
                            12
                        ];
                    case 11:
                        if (e_9) throw e_9.error;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 12:
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 13:
                        return [
                            2 /*return*/ ,
                            fromJS(n)
                        ];
                }
            });
        });
    };
    math.min.arity = 1;
    math.max = function(args, scope, execute) {
        var e_10, _a;
        return __awaiter(this, void 0, void 0, function() {
            var arr, n, arr_4, arr_4_1, elem, e_10_1;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        arr = _b.sent();
                        if (!arr.isArray()) {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        n = undefined;
                        _b.label = 2;
                    case 2:
                        _b.trys.push([
                            2,
                            7,
                            8,
                            13
                        ]);
                        arr_4 = __asyncValues(arr);
                        _b.label = 3;
                    case 3:
                        return [
                            4 /*yield*/ ,
                            arr_4.next()
                        ];
                    case 4:
                        if (!(arr_4_1 = _b.sent(), !arr_4_1.done)) return [
                            3 /*break*/ ,
                            6
                        ];
                        elem = arr_4_1.value;
                        if (elem.type === "null") return [
                            3 /*break*/ ,
                            5
                        ];
                        if (elem.type !== "number") {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        if (n === undefined || elem.data > n) {
                            n = elem.data;
                        }
                        _b.label = 5;
                    case 5:
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 6:
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 7:
                        e_10_1 = _b.sent();
                        e_10 = {
                            error: e_10_1
                        };
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 8:
                        _b.trys.push([
                            8,
                            ,
                            11,
                            12
                        ]);
                        if (!(arr_4_1 && !arr_4_1.done && (_a = arr_4["return"]))) return [
                            3 /*break*/ ,
                            10
                        ];
                        return [
                            4 /*yield*/ ,
                            _a.call(arr_4)
                        ];
                    case 9:
                        _b.sent();
                        _b.label = 10;
                    case 10:
                        return [
                            3 /*break*/ ,
                            12
                        ];
                    case 11:
                        if (e_10) throw e_10.error;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 12:
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 13:
                        return [
                            2 /*return*/ ,
                            fromJS(n)
                        ];
                }
            });
        });
    };
    math.max.arity = 1;
    math.sum = function(args, scope, execute) {
        var e_11, _a;
        return __awaiter(this, void 0, void 0, function() {
            var arr, n, arr_5, arr_5_1, elem, e_11_1;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        arr = _b.sent();
                        if (!arr.isArray()) {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        n = 0;
                        _b.label = 2;
                    case 2:
                        _b.trys.push([
                            2,
                            7,
                            8,
                            13
                        ]);
                        arr_5 = __asyncValues(arr);
                        _b.label = 3;
                    case 3:
                        return [
                            4 /*yield*/ ,
                            arr_5.next()
                        ];
                    case 4:
                        if (!(arr_5_1 = _b.sent(), !arr_5_1.done)) return [
                            3 /*break*/ ,
                            6
                        ];
                        elem = arr_5_1.value;
                        if (elem.type === "null") return [
                            3 /*break*/ ,
                            5
                        ];
                        if (elem.type !== "number") {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        n += elem.data;
                        _b.label = 5;
                    case 5:
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 6:
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 7:
                        e_11_1 = _b.sent();
                        e_11 = {
                            error: e_11_1
                        };
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 8:
                        _b.trys.push([
                            8,
                            ,
                            11,
                            12
                        ]);
                        if (!(arr_5_1 && !arr_5_1.done && (_a = arr_5["return"]))) return [
                            3 /*break*/ ,
                            10
                        ];
                        return [
                            4 /*yield*/ ,
                            _a.call(arr_5)
                        ];
                    case 9:
                        _b.sent();
                        _b.label = 10;
                    case 10:
                        return [
                            3 /*break*/ ,
                            12
                        ];
                    case 11:
                        if (e_11) throw e_11.error;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 12:
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 13:
                        return [
                            2 /*return*/ ,
                            fromJS(n)
                        ];
                }
            });
        });
    };
    math.sum.arity = 1;
    math.avg = function(args, scope, execute) {
        var e_12, _a;
        return __awaiter(this, void 0, void 0, function() {
            var arr, n, c, arr_6, arr_6_1, elem, e_12_1;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            execute(args[0], scope)
                        ];
                    case 1:
                        arr = _b.sent();
                        if (!arr.isArray()) {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        n = 0;
                        c = 0;
                        _b.label = 2;
                    case 2:
                        _b.trys.push([
                            2,
                            7,
                            8,
                            13
                        ]);
                        arr_6 = __asyncValues(arr);
                        _b.label = 3;
                    case 3:
                        return [
                            4 /*yield*/ ,
                            arr_6.next()
                        ];
                    case 4:
                        if (!(arr_6_1 = _b.sent(), !arr_6_1.done)) return [
                            3 /*break*/ ,
                            6
                        ];
                        elem = arr_6_1.value;
                        if (elem.type === "null") return [
                            3 /*break*/ ,
                            5
                        ];
                        if (elem.type !== "number") {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        n += elem.data;
                        c++;
                        _b.label = 5;
                    case 5:
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 6:
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 7:
                        e_12_1 = _b.sent();
                        e_12 = {
                            error: e_12_1
                        };
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 8:
                        _b.trys.push([
                            8,
                            ,
                            11,
                            12
                        ]);
                        if (!(arr_6_1 && !arr_6_1.done && (_a = arr_6["return"]))) return [
                            3 /*break*/ ,
                            10
                        ];
                        return [
                            4 /*yield*/ ,
                            _a.call(arr_6)
                        ];
                    case 9:
                        _b.sent();
                        _b.label = 10;
                    case 10:
                        return [
                            3 /*break*/ ,
                            12
                        ];
                    case 11:
                        if (e_12) throw e_12.error;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 12:
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 13:
                        if (c === 0) {
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            fromJS(n / c)
                        ];
                }
            });
        });
    };
    math.avg.arity = 1;
    var namespaces = {
        global: global,
        string: string,
        array: array,
        pt: pt,
        delta: delta,
        diff: diff,
        sanity: sanity,
        math: math
    };
    const WS = /^([\t\n\v\f\r \u0085\u00A0]|(\/\/[^\n]*\n))+/;
    const NUM = /^\d+/;
    const IDENT = /^[a-zA-Z_][a-zA-Z_0-9]*/;
    // Precedence levels for binary operators:
    const PREC_PAIR = 1;
    const PREC_OR = 2;
    const PREC_AND = 3;
    const PREC_COMP = 4;
    const PREC_ORDER = 4;
    const PREC_ADD = 6;
    const PREC_SUB = 6;
    const PREC_MUL = 7;
    const PREC_DIV = 7;
    const PREC_MOD = 7;
    const PREC_POW = 8;
    // Precedence levels for prefix operators:
    const PREC_POS = 10;
    const PREC_NOT = 10;
    const PREC_NEG = 8;
    function parse$1(str) {
        let pos = 0;
        pos = skipWS(str, pos);
        let result = parseExpr(str, pos, 0);
        if (result.type === "error") return result;
        pos = skipWS(str, result.position);
        if (pos !== str.length) {
            if (result.failPosition) {
                pos = result.failPosition - 1;
            }
            return {
                type: "error",
                position: pos
            };
        }
        delete result.position;
        delete result.failPosition;
        return result;
    }
    function parseExpr(str, pos, level) {
        // In this function we parse precedence "manually" by having two variables:
        //
        // `level` is the minimum precedence level we want to parse at. If this is
        // e.g. 7 then this function will not parse `3 + 4` (since addition is at 6),
        // but instead just return `1` and leave ` + 5` remaining. We use this so that
        // while handling the RHS of the multiplication in `1 + 2 * 3 + 4` we only parse `3`.
        //
        // `lhsLevel` is the precedence level of the currently parsed expression on
        // the left-hand side. This is mainly used to handle non-associcativeness.
        // This means that you'll see code like:
        // - `if (level > PREC_XXX) break`: Operator is at this precedence level.
        // - `if (lhsLevel < PREC_XXX) break`: Operator is left-associative.
        // - `if (lhsLevel <= PREC_XXX) break`: Operator is right/non-associative.
        // - `parseExpr(str, pos, PREC_XXX + 1)`: Operator is left/non-assoicate.
        // - `parseExpr(str, pos, PREC_XXX)`: Operator is right-assoicate.
        let startPos = pos;
        let token = str[pos];
        let marks;
        switch(token){
            case "+":
                {
                    let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_POS);
                    if (rhs.type === "error") return rhs;
                    marks = [
                        {
                            name: "pos",
                            position: startPos
                        }
                    ].concat(rhs.marks);
                    pos = rhs.position;
                    break;
                }
            case "-":
                {
                    let rhs1 = parseExpr(str, skipWS(str, pos + 1), PREC_NEG);
                    if (rhs1.type === "error") return rhs1;
                    marks = [
                        {
                            name: "neg",
                            position: startPos
                        }
                    ].concat(rhs1.marks);
                    pos = rhs1.position;
                    break;
                }
            case "(":
                {
                    let rhs2 = parseExpr(str, skipWS(str, pos + 1), 0);
                    if (rhs2.type === "error") return rhs2;
                    pos = skipWS(str, rhs2.position);
                    switch(str[pos]){
                        case ",":
                            {
                                // Tuples
                                marks = [
                                    {
                                        name: "tuple",
                                        position: startPos
                                    }
                                ].concat(rhs2.marks);
                                pos = skipWS(str, pos + 1);
                                while(true){
                                    rhs2 = parseExpr(str, pos, 0);
                                    if (rhs2.type === "error") return rhs2;
                                    pos = skipWS(str, rhs2.position);
                                    if (str[pos] !== ",") break;
                                    pos = skipWS(str, pos + 1);
                                }
                                if (str[pos] !== ")") return {
                                    type: "error",
                                    position: pos
                                };
                                pos++;
                                marks.push({
                                    name: "tuple_end",
                                    position: pos
                                });
                                break;
                            }
                        case ")":
                            {
                                pos++;
                                marks = [
                                    {
                                        name: "group",
                                        position: startPos
                                    }
                                ].concat(rhs2.marks);
                                break;
                            }
                        default:
                            return {
                                type: "error",
                                position: pos
                            };
                    }
                    break;
                }
            case "!":
                {
                    let rhs3 = parseExpr(str, skipWS(str, pos + 1), PREC_NOT);
                    if (rhs3.type === "error") return rhs3;
                    marks = [
                        {
                            name: "not",
                            position: startPos
                        }
                    ].concat(rhs3.marks);
                    pos = rhs3.position;
                    break;
                }
            case "{":
                {
                    let result = parseObject(str, pos);
                    if (result.type === "error") return result;
                    marks = result.marks;
                    pos = result.position;
                    break;
                }
            case "[":
                marks = [
                    {
                        name: "array",
                        position: pos
                    }
                ];
                pos = skipWS(str, pos + 1);
                if (str[pos] !== "]") {
                    while(true){
                        if (str.slice(pos, pos + 3) === "...") {
                            marks.push({
                                name: "array_splat",
                                position: pos
                            });
                            pos = skipWS(str, pos + 3);
                        }
                        let res = parseExpr(str, pos, 0);
                        if (res.type === "error") return res;
                        marks = marks.concat(res.marks);
                        pos = res.position;
                        pos = skipWS(str, pos);
                        if (str[pos] !== ",") break;
                        pos = skipWS(str, pos + 1);
                        if (str[pos] === "]") break;
                    }
                }
                if (str[pos] === "]") {
                    pos++;
                    marks.push({
                        name: "array_end",
                        position: pos
                    });
                } else {
                    return {
                        type: "error",
                        position: pos
                    };
                }
                break;
            case "'":
            case '"':
                {
                    let result1 = parseString(str, pos);
                    if (result1.type === "error") return result1;
                    marks = result1.marks;
                    pos = result1.position;
                    break;
                }
            case "^":
                {
                    pos++;
                    marks = [];
                    while(str[pos] === "." && str[pos + 1] === "^"){
                        marks.push({
                            name: "dblparent",
                            position: startPos
                        });
                        pos += 2;
                    }
                    marks.push({
                        name: "parent",
                        position: startPos
                    });
                    break;
                }
            case "@":
                marks = [
                    {
                        name: "this",
                        position: startPos
                    }
                ];
                pos++;
                break;
            case "*":
                marks = [
                    {
                        name: "everything",
                        position: startPos
                    }
                ];
                pos++;
                break;
            case "$":
                {
                    let identLen = parseRegex(str, pos + 1, IDENT);
                    if (identLen) {
                        pos += 1 + identLen;
                        marks = [
                            {
                                name: "param",
                                position: startPos
                            },
                            {
                                name: "ident",
                                position: startPos + 1
                            },
                            {
                                name: "ident_end",
                                position: pos
                            }
                        ];
                    }
                    break;
                }
            default:
                {
                    let numLen = parseRegex(str, pos, NUM);
                    if (numLen) {
                        pos += numLen;
                        let name = "integer";
                        if (str[pos] === ".") {
                            let fracLen = parseRegex(str, pos + 1, NUM);
                            if (fracLen) {
                                name = "float";
                                pos += 1 + fracLen;
                            }
                        }
                        if (str[pos] === "e" || str[pos] === "E") {
                            name = "sci";
                            pos++;
                            if (str[pos] === "+" || str[pos] === "-") {
                                pos++;
                            }
                            let expLen = parseRegex(str, pos, NUM);
                            if (!expLen) return {
                                type: "error",
                                position: pos
                            };
                            pos += expLen;
                        }
                        marks = [
                            {
                                name,
                                position: startPos
                            },
                            {
                                name: name + "_end",
                                position: pos
                            }
                        ];
                        break;
                    }
                    let identLen1 = parseRegex(str, pos, IDENT);
                    if (identLen1) {
                        pos += identLen1;
                        switch(str[pos]){
                            case ":":
                            case "(":
                                {
                                    let result2 = parseFuncCall(str, startPos, pos);
                                    if (result2.type === "error") return result2;
                                    marks = result2.marks;
                                    pos = result2.position;
                                    break;
                                }
                            default:
                                {
                                    marks = [
                                        {
                                            name: "this_attr",
                                            position: startPos
                                        },
                                        {
                                            name: "ident",
                                            position: startPos
                                        },
                                        {
                                            name: "ident_end",
                                            position: pos
                                        }
                                    ];
                                }
                        }
                        break;
                    }
                }
        }
        if (!marks) {
            return {
                type: "error",
                position: pos
            };
        }
        let lhsLevel = 12;
        let trav;
        loop: while(true){
            let innerPos = skipWS(str, pos);
            if (innerPos === str.length) {
                pos = innerPos;
                break;
            }
            trav = parseTraversal(str, innerPos);
            if (trav.type === "success") {
                marks.unshift({
                    name: "traverse",
                    position: startPos
                });
                while(trav.type === "success"){
                    marks = marks.concat(trav.marks);
                    pos = trav.position;
                    trav = parseTraversal(str, skipWS(str, pos));
                }
                marks.push({
                    name: "traversal_end",
                    position: pos
                });
                continue;
            }
            let token1 = str[innerPos];
            switch(token1){
                case "=":
                    {
                        let nextToken = str[innerPos + 1];
                        switch(nextToken){
                            case ">":
                                {
                                    // =>
                                    if (level > PREC_PAIR || lhsLevel <= PREC_PAIR) break loop;
                                    let rhs4 = parseExpr(str, skipWS(str, innerPos + 2), PREC_PAIR);
                                    if (rhs4.type === "error") return rhs4;
                                    marks = marks.concat(rhs4.marks);
                                    marks.unshift({
                                        name: "pair",
                                        position: startPos
                                    });
                                    pos = rhs4.position;
                                    lhsLevel = PREC_PAIR;
                                    break;
                                }
                            case "=":
                                {
                                    // ==
                                    if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop;
                                    let rhs5 = parseExpr(str, skipWS(str, innerPos + 2), 5);
                                    if (rhs5.type === "error") return rhs5;
                                    marks.unshift({
                                        name: "comp",
                                        position: startPos
                                    });
                                    marks.push({
                                        name: "op",
                                        position: innerPos
                                    }, {
                                        name: "op_end",
                                        position: innerPos + 2
                                    });
                                    marks = marks.concat(rhs5.marks);
                                    pos = rhs5.position;
                                    lhsLevel = PREC_COMP;
                                    break;
                                }
                            default:
                                break loop;
                        }
                        break;
                    }
                case "+":
                    {
                        if (level > PREC_ADD || lhsLevel < PREC_ADD) break loop;
                        let rhs6 = parseExpr(str, skipWS(str, innerPos + 1), PREC_ADD + 1);
                        if (rhs6.type === "error") return rhs6;
                        marks = marks.concat(rhs6.marks);
                        marks.unshift({
                            name: "add",
                            position: startPos
                        });
                        pos = rhs6.position;
                        lhsLevel = PREC_ADD;
                        break;
                    }
                case "-":
                    {
                        if (level > PREC_SUB || lhsLevel < PREC_SUB) break loop;
                        let rhs7 = parseExpr(str, skipWS(str, innerPos + 1), PREC_SUB + 1);
                        if (rhs7.type === "error") return rhs7;
                        marks = marks.concat(rhs7.marks);
                        marks.unshift({
                            name: "sub",
                            position: startPos
                        });
                        pos = rhs7.position;
                        lhsLevel = PREC_SUB;
                        break;
                    }
                case "*":
                    {
                        if (str[innerPos + 1] === "*") {
                            // **
                            if (level > PREC_POW || lhsLevel <= PREC_POW) break loop;
                            let rhs8 = parseExpr(str, skipWS(str, innerPos + 2), PREC_POW);
                            if (rhs8.type === "error") return rhs8;
                            marks = marks.concat(rhs8.marks);
                            marks.unshift({
                                name: "pow",
                                position: startPos
                            });
                            pos = rhs8.position;
                            lhsLevel = PREC_POW;
                            break;
                        }
                        // *
                        if (level > PREC_MUL || lhsLevel < PREC_MUL) break loop;
                        let rhs9 = parseExpr(str, skipWS(str, innerPos + 1), PREC_MUL + 1);
                        if (rhs9.type === "error") return rhs9;
                        marks = marks.concat(rhs9.marks);
                        marks.unshift({
                            name: "mul",
                            position: startPos
                        });
                        pos = rhs9.position;
                        lhsLevel = PREC_MUL;
                        break;
                    }
                case "/":
                    {
                        if (level > PREC_DIV || lhsLevel < PREC_DIV) break loop;
                        let rhs10 = parseExpr(str, skipWS(str, innerPos + 1), PREC_DIV + 1);
                        if (rhs10.type === "error") return rhs10;
                        marks = marks.concat(rhs10.marks);
                        marks.unshift({
                            name: "div",
                            position: startPos
                        });
                        pos = rhs10.position;
                        lhsLevel = PREC_DIV;
                        break;
                    }
                case "%":
                    {
                        if (level > PREC_MOD || lhsLevel < PREC_MOD) break loop;
                        let rhs11 = parseExpr(str, skipWS(str, innerPos + 1), PREC_MOD + 1);
                        if (rhs11.type === "error") return rhs11;
                        marks = marks.concat(rhs11.marks);
                        marks.unshift({
                            name: "mod",
                            position: startPos
                        });
                        pos = rhs11.position;
                        lhsLevel = PREC_MOD;
                        break;
                    }
                case "<":
                case ">":
                    {
                        if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop;
                        let nextPos = innerPos + 1;
                        if (str[nextPos] === "=") {
                            nextPos++;
                        }
                        let rhs12 = parseExpr(str, skipWS(str, nextPos), PREC_COMP + 1);
                        if (rhs12.type === "error") return rhs12;
                        marks.unshift({
                            name: "comp",
                            position: startPos
                        });
                        marks.push({
                            name: "op",
                            position: innerPos
                        }, {
                            name: "op_end",
                            position: nextPos
                        });
                        marks = marks.concat(rhs12.marks);
                        pos = rhs12.position;
                        lhsLevel = PREC_COMP;
                        break;
                    }
                case "|":
                    {
                        if (str[innerPos + 1] === "|") {
                            // ||
                            if (level > PREC_OR || lhsLevel < PREC_OR) break loop;
                            let rhs13 = parseExpr(str, skipWS(str, innerPos + 2), PREC_OR + 1);
                            if (rhs13.type === "error") return rhs13;
                            marks = marks.concat(rhs13.marks);
                            marks.unshift({
                                name: "or",
                                position: startPos
                            });
                            pos = rhs13.position;
                            lhsLevel = PREC_OR;
                        } else {
                            if (level > 11 || lhsLevel < 11) break loop;
                            // pipe call
                            let identPos = skipWS(str, innerPos + 1);
                            let identLen2 = parseRegex(str, identPos, IDENT);
                            if (!identLen2) return {
                                type: "error",
                                position: identPos
                            };
                            pos = identPos + identLen2;
                            if (str[pos] === "(" || str[pos] === ":") {
                                let result3 = parseFuncCall(str, identPos, pos);
                                if (result3.type === "error") return result3;
                                marks = marks.concat(result3.marks);
                                marks.unshift({
                                    name: "pipecall",
                                    position: startPos
                                });
                                pos = result3.position;
                                lhsLevel = 11;
                            }
                        }
                        break;
                    }
                case "&":
                    {
                        // &&
                        if (str[innerPos + 1] != "&") break loop;
                        if (level > PREC_AND || lhsLevel < PREC_AND) break loop;
                        let rhs14 = parseExpr(str, skipWS(str, innerPos + 2), PREC_AND + 1);
                        if (rhs14.type === "error") return rhs14;
                        marks = marks.concat(rhs14.marks);
                        marks.unshift({
                            name: "and",
                            position: startPos
                        });
                        pos = rhs14.position;
                        lhsLevel = PREC_AND;
                        break;
                    }
                case "!":
                    {
                        // !=
                        if (str[innerPos + 1] !== "=") break loop;
                        if (level > PREC_COMP || lhsLevel < PREC_COMP) break loop;
                        let rhs15 = parseExpr(str, skipWS(str, innerPos + 2), PREC_COMP + 1);
                        if (rhs15.type === "error") return rhs15;
                        marks.unshift({
                            name: "comp",
                            position: startPos
                        });
                        marks.push({
                            name: "op",
                            position: innerPos
                        }, {
                            name: "op_end",
                            position: innerPos + 2
                        });
                        marks = marks.concat(rhs15.marks);
                        pos = rhs15.position;
                        lhsLevel = PREC_COMP;
                        break;
                    }
                case "d":
                    {
                        // asc
                        if (str.slice(innerPos, innerPos + 4) !== "desc") break loop;
                        if (level > PREC_ORDER || lhsLevel < PREC_ORDER) break loop;
                        marks.unshift({
                            name: "desc",
                            position: startPos
                        });
                        pos = innerPos + 4;
                        lhsLevel = PREC_ORDER;
                        break;
                    }
                case "a":
                    {
                        // asc
                        if (str.slice(innerPos, innerPos + 3) !== "asc") break loop;
                        if (level > PREC_ORDER || lhsLevel < PREC_ORDER) break loop;
                        marks.unshift({
                            name: "asc",
                            position: startPos
                        });
                        pos = innerPos + 3;
                        lhsLevel = PREC_ORDER;
                        break;
                    }
                default:
                    {
                        let ident = parseRegexStr(str, innerPos, IDENT);
                        switch(ident){
                            case "in":
                                {
                                    if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop;
                                    pos = skipWS(str, innerPos + 2);
                                    let isGroup = false;
                                    if (str[pos] === "(") {
                                        isGroup = true;
                                        pos = skipWS(str, pos + 1);
                                    }
                                    let rangePos = pos;
                                    let result4 = parseExpr(str, pos, PREC_COMP + 1);
                                    if (result4.type === "error") return result4;
                                    pos = skipWS(str, result4.position);
                                    if (str[pos] === "." && str[pos + 1] === ".") {
                                        // LHS in RANGE
                                        let type = "inc_range";
                                        if (str[pos + 2] === ".") {
                                            type = "exc_range";
                                            pos = skipWS(str, pos + 3);
                                        } else {
                                            pos = skipWS(str, pos + 2);
                                        }
                                        let rhs16 = parseExpr(str, pos, PREC_COMP + 1);
                                        if (rhs16.type === "error") return rhs16;
                                        marks.unshift({
                                            name: "in_range",
                                            position: startPos
                                        });
                                        marks = marks.concat({
                                            name: type,
                                            position: rangePos
                                        }, result4.marks, rhs16.marks);
                                        pos = rhs16.position;
                                    } else {
                                        // LHS in RHS
                                        marks.unshift({
                                            name: "comp",
                                            position: startPos
                                        });
                                        marks.push({
                                            name: "op",
                                            position: innerPos
                                        }, {
                                            name: "op_end",
                                            position: innerPos + 2
                                        });
                                        marks = marks.concat(result4.marks);
                                    }
                                    if (isGroup) {
                                        pos = skipWS(str, pos);
                                        if (str[pos] !== ")") return {
                                            type: "error",
                                            position: pos
                                        };
                                        pos++;
                                    }
                                    lhsLevel = PREC_COMP;
                                    break;
                                }
                            case "match":
                                {
                                    // match operator
                                    if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop;
                                    let rhs17 = parseExpr(str, skipWS(str, innerPos + 5), PREC_COMP + 1);
                                    if (rhs17.type === "error") return rhs17;
                                    marks.unshift({
                                        name: "comp",
                                        position: startPos
                                    });
                                    marks.push({
                                        name: "op",
                                        position: innerPos
                                    }, {
                                        name: "op_end",
                                        position: innerPos + 5
                                    });
                                    marks = marks.concat(rhs17.marks);
                                    pos = rhs17.position;
                                    lhsLevel = 4;
                                    break;
                                }
                            default:
                                {
                                    break loop;
                                }
                        }
                    }
            }
        }
        let failPosition = trav?.type === "error" && trav.position;
        return {
            type: "success",
            marks,
            position: pos,
            failPosition
        };
    }
    function parseTraversal(str, pos) {
        let startPos = pos;
        switch(str[pos]){
            case ".":
                {
                    pos = skipWS(str, pos + 1);
                    let identStart = pos;
                    let identLen = parseRegex(str, pos, IDENT);
                    if (!identLen) return {
                        type: "error",
                        position: pos
                    };
                    pos += identLen;
                    return {
                        type: "success",
                        marks: [
                            {
                                name: "attr_access",
                                position: startPos
                            },
                            {
                                name: "ident",
                                position: identStart
                            },
                            {
                                name: "ident_end",
                                position: pos
                            }
                        ],
                        position: pos
                    };
                }
            case "-":
                if (str[pos + 1] !== ">") return {
                    type: "error",
                    position: pos
                };
                // ->
                let marks = [
                    {
                        name: "deref",
                        position: startPos
                    }
                ];
                pos += 2;
                let identPos = skipWS(str, pos);
                let identLen1 = parseRegex(str, identPos, IDENT);
                if (identLen1) {
                    pos = identPos + identLen1;
                    marks.push({
                        name: "deref_attr",
                        position: identPos
                    }, {
                        name: "ident",
                        position: identPos
                    }, {
                        name: "ident_end",
                        position: pos
                    });
                }
                return {
                    type: "success",
                    marks,
                    position: pos
                };
            case "[":
                {
                    pos = skipWS(str, pos + 1);
                    if (str[pos] === "]") {
                        return {
                            type: "success",
                            marks: [
                                {
                                    name: "array_postfix",
                                    position: startPos
                                }
                            ],
                            position: pos + 1
                        };
                    }
                    let rangePos = pos;
                    let result = parseExpr(str, pos, 0);
                    if (result.type === "error") return result;
                    pos = skipWS(str, result.position);
                    if (str[pos] === "." && str[pos + 1] === ".") {
                        let type = "inc_range";
                        if (str[pos + 2] === ".") {
                            type = "exc_range";
                            pos += 3;
                        } else {
                            pos += 2;
                        }
                        pos = skipWS(str, pos);
                        let rhs = parseExpr(str, pos, 0);
                        if (rhs.type === "error") return rhs;
                        pos = skipWS(str, rhs.position);
                        if (str[pos] !== "]") return {
                            type: "error",
                            position: pos
                        };
                        return {
                            type: "success",
                            marks: [
                                {
                                    name: "slice",
                                    position: startPos
                                },
                                {
                                    name: type,
                                    position: rangePos
                                }
                            ].concat(result.marks, rhs.marks),
                            position: pos + 1
                        };
                    }
                    if (str[pos] !== "]") return {
                        type: "error",
                        position: pos
                    };
                    return {
                        type: "success",
                        marks: [
                            {
                                name: "square_bracket",
                                position: startPos
                            }
                        ].concat(result.marks),
                        position: pos + 1
                    };
                }
            case "|":
                {
                    pos = skipWS(str, pos + 1);
                    if (str[pos] === "{") {
                        let result1 = parseObject(str, pos);
                        if (result1.type === "error") return result1;
                        result1.marks.unshift({
                            name: "projection",
                            position: startPos
                        });
                        return result1;
                    }
                    break;
                }
            case "{":
                {
                    let result2 = parseObject(str, pos);
                    if (result2.type === "error") return result2;
                    result2.marks.unshift({
                        name: "projection",
                        position: startPos
                    });
                    return result2;
                }
        }
        return {
            type: "error",
            position: pos
        };
    }
    function parseFuncCall(str, startPos, pos) {
        let marks = [];
        marks.push({
            name: "func_call",
            position: startPos
        });
        if (str[pos] === ":" && str[pos + 1] === ":") {
            marks.push({
                name: "namespace",
                position: startPos
            });
            marks.push({
                name: "ident",
                position: startPos
            }, {
                name: "ident_end",
                position: pos
            });
            pos = skipWS(str, pos + 2);
            let nameLen = parseRegex(str, pos, IDENT);
            if (!nameLen) return {
                type: "error",
                position: pos
            };
            marks.push({
                name: "ident",
                position: pos
            }, {
                name: "ident_end",
                position: pos + nameLen
            });
            pos = skipWS(str, pos + nameLen);
            if (str[pos] !== "(") return {
                type: "error",
                position: pos
            };
            pos++;
        } else {
            marks.push({
                name: "ident",
                position: startPos
            }, {
                name: "ident_end",
                position: pos
            });
            pos = skipWS(str, pos + 1);
        }
        let lastPos = pos;
        if (str[pos] !== ")") {
            while(true){
                let result = parseExpr(str, pos, 0);
                if (result.type === "error") return result;
                marks = marks.concat(result.marks);
                lastPos = result.position;
                pos = skipWS(str, result.position);
                if (str[pos] !== ",") break;
                pos = skipWS(str, pos + 1);
                // Also allow trailing commas
                if (str[pos] === ")") break;
            }
        }
        if (str[pos] !== ")") {
            return {
                type: "error",
                position: pos
            };
        }
        // NOTE: a bit arbitrary the func_args_end points comes before the whitespace.
        marks.push({
            name: "func_args_end",
            position: lastPos
        });
        return {
            type: "success",
            marks,
            position: pos + 1
        };
    }
    function parseObject(str, pos) {
        let marks = [
            {
                name: "object",
                position: pos
            }
        ];
        pos = skipWS(str, pos + 1);
        while(str[pos] !== "}"){
            let pairPos = pos;
            if (str.slice(pos, pos + 3) === "...") {
                pos = skipWS(str, pos + 3);
                if (str[pos] !== "}" && str[pos] !== ",") {
                    let expr = parseExpr(str, pos, 0);
                    if (expr.type === "error") return expr;
                    marks.push({
                        name: "object_splat",
                        position: pairPos
                    });
                    marks = marks.concat(expr.marks);
                    pos = expr.position;
                } else {
                    marks.push({
                        name: "object_splat_this",
                        position: pairPos
                    });
                }
            } else {
                let expr1 = parseExpr(str, pos, 0);
                if (expr1.type === "error") return expr1;
                let nextPos = skipWS(str, expr1.position);
                if (expr1.marks[0].name === "str" && str[nextPos] === ":") {
                    let value = parseExpr(str, skipWS(str, nextPos + 1), 0);
                    if (value.type === "error") return value;
                    marks.push({
                        name: "object_pair",
                        position: pairPos
                    });
                    marks = marks.concat(expr1.marks, value.marks);
                    pos = value.position;
                } else {
                    marks = marks.concat({
                        name: "object_expr",
                        position: pos
                    }, expr1.marks);
                    pos = expr1.position;
                }
            }
            pos = skipWS(str, pos);
            if (str[pos] !== ",") break;
            pos = skipWS(str, pos + 1);
        }
        if (str[pos] !== "}") {
            return {
                type: "error",
                position: pos
            };
        }
        pos++;
        marks.push({
            name: "object_end",
            position: pos
        });
        return {
            type: "success",
            marks,
            position: pos
        };
    }
    function parseString(str, pos) {
        let token = str[pos];
        pos = pos + 1;
        const marks = [
            {
                name: "str",
                position: pos
            }
        ];
        str: for(;; pos++){
            if (pos > str.length) return {
                type: "error",
                position: pos
            };
            switch(str[pos]){
                case token:
                    {
                        marks.push({
                            name: "str_end",
                            position: pos
                        });
                        pos++;
                        break str;
                    }
                case "\\":
                    {
                        marks.push({
                            name: "str_pause",
                            position: pos
                        });
                        if (str[pos + 1] === "u") {
                            if (str[pos + 2] === "{") {
                                marks.push({
                                    name: "unicode_hex",
                                    position: pos + 3
                                });
                                pos = str.indexOf("}", pos + 3);
                                marks.push({
                                    name: "unicode_hex_end",
                                    position: pos
                                });
                            } else {
                                marks.push({
                                    name: "unicode_hex",
                                    position: pos + 2
                                });
                                marks.push({
                                    name: "unicode_hex_end",
                                    position: pos + 6
                                });
                                pos += 5;
                            }
                        } else {
                            marks.push({
                                name: "single_escape",
                                position: pos + 1
                            });
                            pos += 1;
                        }
                        marks.push({
                            name: "str_start",
                            position: pos + 1
                        });
                    }
            }
        }
        return {
            type: "success",
            marks,
            position: pos
        };
    }
    function skipWS(str, pos) {
        return pos + parseRegex(str, pos, WS);
    }
    /**
 * Parses a regex at a position and returns the number of characters that was matched.
 */ function parseRegex(str, pos, re) {
        let m = re.exec(str.slice(pos));
        return m ? m[0].length : 0;
    }
    /**
 * Parses a regex at a position and returns matched string.
 */ function parseRegexStr(str, pos, re) {
        let m = re.exec(str.slice(pos));
        return m ? m[0] : null;
    } /**
 * Join combines two traversals, returning a mapper which is the result of first
 * applying `a` and then applying `b`.
 */ 
    function join(a, b) {
        return function(base) {
            return b(a(base));
        };
    }
    /**
 * Map returns a new mapper which will the inner mappe to each element of the array.
 */ function map(inner) {
        return function(base) {
            return {
                type: "Map",
                base: base,
                expr: inner({
                    type: "This"
                })
            };
        };
    }
    function flatMap(inner) {
        return function(base) {
            return {
                type: "FlatMap",
                base: base,
                expr: inner({
                    type: "This"
                })
            };
        };
    }
    function traverseArray(build, right) {
        if (!right) {
            return {
                type: "a-a",
                build: build
            };
        }
        switch(right.type){
            case "a-a":
                return {
                    type: "a-a",
                    build: join(build, right.build)
                };
            case "a-b":
                return {
                    type: "a-b",
                    build: join(build, right.build)
                };
            case "b-b":
                return {
                    type: "a-a",
                    build: join(build, map(right.build))
                };
            case "b-a":
                return {
                    type: "a-a",
                    build: join(build, flatMap(right.build))
                };
            default:
                throw new Error("unknown type: ".concat(right.type));
        }
    }
    function traversePlain(mapper, right) {
        if (!right) {
            return {
                type: "b-b",
                build: mapper
            };
        }
        switch(right.type){
            case "a-a":
            case "b-a":
                return {
                    type: "b-a",
                    build: join(mapper, right.build)
                };
            case "a-b":
            case "b-b":
                return {
                    type: "b-b",
                    build: join(mapper, right.build)
                };
            default:
                throw new Error("unknown type: ".concat(right.type));
        }
    }
    function traverseElement(mapper, right) {
        if (!right) {
            return {
                type: "a-b",
                build: mapper
            };
        }
        switch(right.type){
            case "a-a":
            case "b-a":
                return {
                    type: "a-a",
                    build: join(mapper, right.build)
                };
            case "a-b":
            case "b-b":
                return {
                    type: "a-b",
                    build: join(mapper, right.build)
                };
            default:
                throw new Error("unknown type: ".concat(right.type));
        }
    }
    function traverseProjection(mapper, right) {
        if (!right) {
            return {
                type: "b-b",
                build: mapper
            };
        }
        switch(right.type){
            case "a-a":
                return {
                    type: "a-a",
                    build: join(map(mapper), right.build)
                };
            case "a-b":
                return {
                    type: "a-b",
                    build: join(map(mapper), right.build)
                };
            case "b-a":
                return {
                    type: "b-a",
                    build: join(mapper, right.build)
                };
            case "b-b":
                return {
                    type: "b-b",
                    build: join(mapper, right.build)
                };
            default:
                throw new Error("unknown type: ".concat(right.type));
        }
    }
    var isEqual = equality;
    function equality(a, b) {
        if (a.type === "string" && b.type === "string" || a.type === "boolean" && b.type === "boolean" || a.type === "null" && b.type === "null" || a.type === "number" && b.type === "number") {
            return a.data === b.data;
        }
        if (a.type === "datetime" && b.type === "datetime") {
            return a.data.equals(b.data);
        }
        return false;
    }
    var operators = {
        "==": function eq(left, right) {
            return isEqual(left, right) ? TRUE_VALUE : FALSE_VALUE;
        },
        "!=": function neq(left, right) {
            return isEqual(left, right) ? FALSE_VALUE : TRUE_VALUE;
        },
        ">": function gt(left, right) {
            if (left.type === "stream" || right.type === "stream") return NULL_VALUE;
            var result = partialCompare(left.data, right.data);
            if (result === null) {
                return NULL_VALUE;
            }
            return result > 0 ? TRUE_VALUE : FALSE_VALUE;
        },
        ">=": function gte(left, right) {
            if (left.type === "stream" || right.type === "stream") return NULL_VALUE;
            var result = partialCompare(left.data, right.data);
            if (result === null) {
                return NULL_VALUE;
            }
            return result >= 0 ? TRUE_VALUE : FALSE_VALUE;
        },
        "<": function lt(left, right) {
            if (left.type === "stream" || right.type === "stream") return NULL_VALUE;
            var result = partialCompare(left.data, right.data);
            if (result === null) {
                return NULL_VALUE;
            }
            return result < 0 ? TRUE_VALUE : FALSE_VALUE;
        },
        "<=": function lte(left, right) {
            if (left.type === "stream" || right.type === "stream") return NULL_VALUE;
            var result = partialCompare(left.data, right.data);
            if (result === null) {
                return NULL_VALUE;
            }
            return result <= 0 ? TRUE_VALUE : FALSE_VALUE;
        },
        // eslint-disable-next-line func-name-matching
        "in": function inop(left, right) {
            var right_1, right_1_1;
            var e_1, _a;
            return __awaiter(this, void 0, void 0, function() {
                var b, e_1_1;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            if (right.type === "path") {
                                if (left.type !== "string") {
                                    return [
                                        2 /*return*/ ,
                                        NULL_VALUE
                                    ];
                                }
                                return [
                                    2 /*return*/ ,
                                    right.data.matches(left.data) ? TRUE_VALUE : FALSE_VALUE
                                ];
                            }
                            if (!right.isArray()) return [
                                3 /*break*/ ,
                                13
                            ];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([
                                1,
                                6,
                                7,
                                12
                            ]);
                            right_1 = __asyncValues(right);
                            _b.label = 2;
                        case 2:
                            return [
                                4 /*yield*/ ,
                                right_1.next()
                            ];
                        case 3:
                            if (!(right_1_1 = _b.sent(), !right_1_1.done)) return [
                                3 /*break*/ ,
                                5
                            ];
                            b = right_1_1.value;
                            if (isEqual(left, b)) {
                                return [
                                    2 /*return*/ ,
                                    TRUE_VALUE
                                ];
                            }
                            _b.label = 4;
                        case 4:
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case 5:
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case 6:
                            e_1_1 = _b.sent();
                            e_1 = {
                                error: e_1_1
                            };
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case 7:
                            _b.trys.push([
                                7,
                                ,
                                10,
                                11
                            ]);
                            if (!(right_1_1 && !right_1_1.done && (_a = right_1["return"]))) return [
                                3 /*break*/ ,
                                9
                            ];
                            return [
                                4 /*yield*/ ,
                                _a.call(right_1)
                            ];
                        case 8:
                            _b.sent();
                            _b.label = 9;
                        case 9:
                            return [
                                3 /*break*/ ,
                                11
                            ];
                        case 10:
                            if (e_1) throw e_1.error;
                            return [
                                7 /*endfinally*/ 
                            ];
                        case 11:
                            return [
                                7 /*endfinally*/ 
                            ];
                        case 12:
                            return [
                                2 /*return*/ ,
                                FALSE_VALUE
                            ];
                        case 13:
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                    }
                });
            });
        },
        match: function match(left, right) {
            return __awaiter(this, void 0, void 0, function() {
                var tokens, patterns, didSucceed, matched;
                return __generator(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            tokens = [];
                            patterns = [];
                            return [
                                4 /*yield*/ ,
                                gatherText(left, function(part) {
                                    tokens = tokens.concat(matchTokenize(part));
                                })
                            ];
                        case 1:
                            _a.sent();
                            return [
                                4 /*yield*/ ,
                                gatherText(right, function(part) {
                                    patterns = patterns.concat(matchAnalyzePattern(part));
                                })
                            ];
                        case 2:
                            didSucceed = _a.sent();
                            if (!didSucceed) {
                                return [
                                    2 /*return*/ ,
                                    FALSE_VALUE
                                ];
                            }
                            matched = matchText(tokens, patterns);
                            return [
                                2 /*return*/ ,
                                matched ? TRUE_VALUE : FALSE_VALUE
                            ];
                    }
                });
            });
        },
        "+": function plus(left, right) {
            if (left.type === "datetime" && right.type === "number") {
                return fromDateTime(left.data.add(right.data));
            }
            if (left.type === "number" && right.type === "number") {
                return fromNumber(left.data + right.data);
            }
            if (left.type === "string" && right.type === "string") {
                return fromString(left.data + right.data);
            }
            if (left.type === "object" && right.type === "object") {
                return fromJS(__assign(__assign({}, left.data), right.data));
            }
            if (left.type === "array" && right.type === "array") {
                return fromJS(left.data.concat(right.data));
            }
            if (left.isArray() && right.isArray()) {
                return new StreamValue(function() {
                    return __asyncGenerator(this, arguments, function() {
                        var left_1, left_1_1, val, e_2_1, right_2, right_2_1, val, e_3_1;
                        var e_2, _a, e_3, _b;
                        return __generator(this, function(_c) {
                            switch(_c.label){
                                case 0:
                                    _c.trys.push([
                                        0,
                                        7,
                                        8,
                                        13
                                    ]);
                                    left_1 = __asyncValues(left);
                                    _c.label = 1;
                                case 1:
                                    return [
                                        4 /*yield*/ ,
                                        __await(left_1.next())
                                    ];
                                case 2:
                                    if (!(left_1_1 = _c.sent(), !left_1_1.done)) return [
                                        3 /*break*/ ,
                                        6
                                    ];
                                    val = left_1_1.value;
                                    return [
                                        4 /*yield*/ ,
                                        __await(val)
                                    ];
                                case 3:
                                    return [
                                        4 /*yield*/ ,
                                        _c.sent()
                                    ];
                                case 4:
                                    _c.sent();
                                    _c.label = 5;
                                case 5:
                                    return [
                                        3 /*break*/ ,
                                        1
                                    ];
                                case 6:
                                    return [
                                        3 /*break*/ ,
                                        13
                                    ];
                                case 7:
                                    e_2_1 = _c.sent();
                                    e_2 = {
                                        error: e_2_1
                                    };
                                    return [
                                        3 /*break*/ ,
                                        13
                                    ];
                                case 8:
                                    _c.trys.push([
                                        8,
                                        ,
                                        11,
                                        12
                                    ]);
                                    if (!(left_1_1 && !left_1_1.done && (_a = left_1["return"]))) return [
                                        3 /*break*/ ,
                                        10
                                    ];
                                    return [
                                        4 /*yield*/ ,
                                        __await(_a.call(left_1))
                                    ];
                                case 9:
                                    _c.sent();
                                    _c.label = 10;
                                case 10:
                                    return [
                                        3 /*break*/ ,
                                        12
                                    ];
                                case 11:
                                    if (e_2) throw e_2.error;
                                    return [
                                        7 /*endfinally*/ 
                                    ];
                                case 12:
                                    return [
                                        7 /*endfinally*/ 
                                    ];
                                case 13:
                                    _c.trys.push([
                                        13,
                                        20,
                                        21,
                                        26
                                    ]);
                                    right_2 = __asyncValues(right);
                                    _c.label = 14;
                                case 14:
                                    return [
                                        4 /*yield*/ ,
                                        __await(right_2.next())
                                    ];
                                case 15:
                                    if (!(right_2_1 = _c.sent(), !right_2_1.done)) return [
                                        3 /*break*/ ,
                                        19
                                    ];
                                    val = right_2_1.value;
                                    return [
                                        4 /*yield*/ ,
                                        __await(val)
                                    ];
                                case 16:
                                    return [
                                        4 /*yield*/ ,
                                        _c.sent()
                                    ];
                                case 17:
                                    _c.sent();
                                    _c.label = 18;
                                case 18:
                                    return [
                                        3 /*break*/ ,
                                        14
                                    ];
                                case 19:
                                    return [
                                        3 /*break*/ ,
                                        26
                                    ];
                                case 20:
                                    e_3_1 = _c.sent();
                                    e_3 = {
                                        error: e_3_1
                                    };
                                    return [
                                        3 /*break*/ ,
                                        26
                                    ];
                                case 21:
                                    _c.trys.push([
                                        21,
                                        ,
                                        24,
                                        25
                                    ]);
                                    if (!(right_2_1 && !right_2_1.done && (_b = right_2["return"]))) return [
                                        3 /*break*/ ,
                                        23
                                    ];
                                    return [
                                        4 /*yield*/ ,
                                        __await(_b.call(right_2))
                                    ];
                                case 22:
                                    _c.sent();
                                    _c.label = 23;
                                case 23:
                                    return [
                                        3 /*break*/ ,
                                        25
                                    ];
                                case 24:
                                    if (e_3) throw e_3.error;
                                    return [
                                        7 /*endfinally*/ 
                                    ];
                                case 25:
                                    return [
                                        7 /*endfinally*/ 
                                    ];
                                case 26:
                                    return [
                                        2 /*return*/ 
                                    ];
                            }
                        });
                    });
                });
            }
            return NULL_VALUE;
        },
        "-": function minus(left, right) {
            if (left.type === "datetime" && right.type === "number") {
                return fromDateTime(left.data.add(-right.data));
            }
            if (left.type === "datetime" && right.type === "datetime") {
                return fromNumber(left.data.difference(right.data));
            }
            if (left.type === "number" && right.type === "number") {
                return fromNumber(left.data - right.data);
            }
            return NULL_VALUE;
        },
        "*": numericOperator(function(a, b) {
            return a * b;
        }),
        "/": numericOperator(function(a, b) {
            return a / b;
        }),
        "%": numericOperator(function(a, b) {
            return a % b;
        }),
        "**": numericOperator(function(a, b) {
            return Math.pow(a, b);
        })
    };
    function numericOperator(impl) {
        return function(left, right) {
            if (left.type === "number" && right.type === "number") {
                var result = impl(left.data, right.data);
                return fromNumber(result);
            }
            return NULL_VALUE;
        };
    }
    var Scope = /** @class */ function() {
        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
        function Scope(params, source, value, context, parent) {
            this.isHidden = false;
            this.params = params;
            this.source = source;
            this.value = value;
            this.context = context;
            this.parent = parent;
        }
        Scope.prototype.createNested = function(value) {
            if (this.isHidden) {
                return new Scope(this.params, this.source, value, this.context, this.parent);
            }
            return new Scope(this.params, this.source, value, this.context, this);
        };
        Scope.prototype.createHidden = function(value) {
            var result = this.createNested(value);
            result.isHidden = true;
            return result;
        };
        return Scope;
    }();
    function evaluate(node, scope, execute) {
        if (execute === void 0) {
            execute = evaluate;
        }
        var func = EXECUTORS[node.type];
        return func(node, scope, execute);
    }
    /**
 * Applies the function to a value, but tries to avoid creating unnecessary promises.
 */ function promiselessApply(value, cb) {
        if ("then" in value) {
            return value.then(cb);
        }
        return cb(value);
    }
    var EXECUTORS = {
        This: function(_, scope) {
            return scope.value;
        },
        Selector: function() {
            // These should be evaluated separely using a different evaluator.
            // At the mooment we haven't implemented this.
            throw new Error("Selectors can not be evaluated");
        },
        Everything: function(_, scope) {
            return scope.source;
        },
        Parameter: function(_a, scope) {
            var name = _a.name;
            return fromJS(scope.params[name]);
        },
        Context: function(_a, scope) {
            var key = _a.key;
            if (key === "before" || key === "after") {
                var value = scope.context[key];
                return value || NULL_VALUE;
            }
            throw new Error("unknown context key: ".concat(key));
        },
        Parent: function(_a, scope) {
            var n = _a.n;
            var current = scope;
            for(var i = 0; i < n; i++){
                if (!current.parent) {
                    return NULL_VALUE;
                }
                current = current.parent;
            }
            return current.value;
        },
        OpCall: function(_a, scope, execute) {
            var _this = this;
            var op = _a.op, left = _a.left, right = _a.right;
            var func = operators[op];
            if (!func) {
                throw new Error("Unknown operator: ".concat(op));
            }
            var leftValue = execute(left, scope);
            var rightValue = execute(right, scope);
            // Avoid uneccesary promises
            // This is required for constant evaluation to work correctly.
            if ("then" in leftValue || "then" in rightValue) {
                return function() {
                    return __awaiter(_this, void 0, void 0, function() {
                        var _a, _b;
                        return __generator(this, function(_c) {
                            switch(_c.label){
                                case 0:
                                    _a = func;
                                    return [
                                        4 /*yield*/ ,
                                        leftValue
                                    ];
                                case 1:
                                    _b = [
                                        _c.sent()
                                    ];
                                    return [
                                        4 /*yield*/ ,
                                        rightValue
                                    ];
                                case 2:
                                    return [
                                        2 /*return*/ ,
                                        _a.apply(void 0, _b.concat([
                                            _c.sent()
                                        ]))
                                    ];
                            }
                        });
                    });
                }();
            }
            return func(leftValue, rightValue);
        },
        Select: function(_a, scope, execute) {
            var alternatives = _a.alternatives, fallback = _a.fallback;
            return __awaiter(this, void 0, void 0, function() {
                var _i, alternatives_1, alt, altCond;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _i = 0, alternatives_1 = alternatives;
                            _b.label = 1;
                        case 1:
                            if (!(_i < alternatives_1.length)) return [
                                3 /*break*/ ,
                                4
                            ];
                            alt = alternatives_1[_i];
                            return [
                                4 /*yield*/ ,
                                execute(alt.condition, scope)
                            ];
                        case 2:
                            altCond = _b.sent();
                            if (altCond.type === "boolean" && altCond.data === true) {
                                return [
                                    2 /*return*/ ,
                                    execute(alt.value, scope)
                                ];
                            }
                            _b.label = 3;
                        case 3:
                            _i++;
                            return [
                                3 /*break*/ ,
                                1
                            ];
                        case 4:
                            if (fallback) {
                                return [
                                    2 /*return*/ ,
                                    execute(fallback, scope)
                                ];
                            }
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                    }
                });
            });
        },
        InRange: function(_a, scope, execute) {
            var base = _a.base, left = _a.left, right = _a.right, isInclusive = _a.isInclusive;
            return __awaiter(this, void 0, void 0, function() {
                var value, leftValue, rightValue, leftCmp, _b, _c, rightCmp, _d, _e;
                return __generator(this, function(_f) {
                    switch(_f.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                execute(base, scope)
                            ];
                        case 1:
                            value = _f.sent();
                            return [
                                4 /*yield*/ ,
                                execute(left, scope)
                            ];
                        case 2:
                            leftValue = _f.sent();
                            return [
                                4 /*yield*/ ,
                                execute(right, scope)
                            ];
                        case 3:
                            rightValue = _f.sent();
                            _b = partialCompare;
                            return [
                                4 /*yield*/ ,
                                value.get()
                            ];
                        case 4:
                            _c = [
                                _f.sent()
                            ];
                            return [
                                4 /*yield*/ ,
                                leftValue.get()
                            ];
                        case 5:
                            leftCmp = _b.apply(void 0, _c.concat([
                                _f.sent()
                            ]));
                            if (leftCmp === null) {
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                            }
                            _d = partialCompare;
                            return [
                                4 /*yield*/ ,
                                value.get()
                            ];
                        case 6:
                            _e = [
                                _f.sent()
                            ];
                            return [
                                4 /*yield*/ ,
                                rightValue.get()
                            ];
                        case 7:
                            rightCmp = _d.apply(void 0, _e.concat([
                                _f.sent()
                            ]));
                            if (rightCmp === null) {
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                            }
                            if (isInclusive) {
                                return [
                                    2 /*return*/ ,
                                    leftCmp >= 0 && rightCmp <= 0 ? TRUE_VALUE : FALSE_VALUE
                                ];
                            }
                            return [
                                2 /*return*/ ,
                                leftCmp >= 0 && rightCmp < 0 ? TRUE_VALUE : FALSE_VALUE
                            ];
                    }
                });
            });
        },
        Filter: function(_a, scope, execute) {
            var base = _a.base, expr = _a.expr;
            return __awaiter(this, void 0, void 0, function() {
                var baseValue;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                execute(base, scope)
                            ];
                        case 1:
                            baseValue = _b.sent();
                            if (!baseValue.isArray()) {
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                            }
                            return [
                                2 /*return*/ ,
                                new StreamValue(function() {
                                    return __asyncGenerator(this, arguments, function() {
                                        var baseValue_1, baseValue_1_1, elem, newScope, exprValue, e_1_1;
                                        var e_1, _a;
                                        return __generator(this, function(_b) {
                                            switch(_b.label){
                                                case 0:
                                                    _b.trys.push([
                                                        0,
                                                        8,
                                                        9,
                                                        14
                                                    ]);
                                                    baseValue_1 = __asyncValues(baseValue);
                                                    _b.label = 1;
                                                case 1:
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await(baseValue_1.next())
                                                    ];
                                                case 2:
                                                    if (!(baseValue_1_1 = _b.sent(), !baseValue_1_1.done)) return [
                                                        3 /*break*/ ,
                                                        7
                                                    ];
                                                    elem = baseValue_1_1.value;
                                                    newScope = scope.createNested(elem);
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await(execute(expr, newScope))
                                                    ];
                                                case 3:
                                                    exprValue = _b.sent();
                                                    if (!(exprValue.type === "boolean" && exprValue.data === true)) return [
                                                        3 /*break*/ ,
                                                        6
                                                    ];
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await(elem)
                                                    ];
                                                case 4:
                                                    return [
                                                        4 /*yield*/ ,
                                                        _b.sent()
                                                    ];
                                                case 5:
                                                    _b.sent();
                                                    _b.label = 6;
                                                case 6:
                                                    return [
                                                        3 /*break*/ ,
                                                        1
                                                    ];
                                                case 7:
                                                    return [
                                                        3 /*break*/ ,
                                                        14
                                                    ];
                                                case 8:
                                                    e_1_1 = _b.sent();
                                                    e_1 = {
                                                        error: e_1_1
                                                    };
                                                    return [
                                                        3 /*break*/ ,
                                                        14
                                                    ];
                                                case 9:
                                                    _b.trys.push([
                                                        9,
                                                        ,
                                                        12,
                                                        13
                                                    ]);
                                                    if (!(baseValue_1_1 && !baseValue_1_1.done && (_a = baseValue_1["return"]))) return [
                                                        3 /*break*/ ,
                                                        11
                                                    ];
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await(_a.call(baseValue_1))
                                                    ];
                                                case 10:
                                                    _b.sent();
                                                    _b.label = 11;
                                                case 11:
                                                    return [
                                                        3 /*break*/ ,
                                                        13
                                                    ];
                                                case 12:
                                                    if (e_1) throw e_1.error;
                                                    return [
                                                        7 /*endfinally*/ 
                                                    ];
                                                case 13:
                                                    return [
                                                        7 /*endfinally*/ 
                                                    ];
                                                case 14:
                                                    return [
                                                        2 /*return*/ 
                                                    ];
                                            }
                                        });
                                    });
                                })
                            ];
                    }
                });
            });
        },
        Projection: function(_a, scope, execute) {
            var base = _a.base, expr = _a.expr;
            return __awaiter(this, void 0, void 0, function() {
                var baseValue, newScope;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                execute(base, scope)
                            ];
                        case 1:
                            baseValue = _b.sent();
                            if (baseValue.type !== "object") {
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                            }
                            newScope = scope.createNested(baseValue);
                            return [
                                2 /*return*/ ,
                                execute(expr, newScope)
                            ];
                    }
                });
            });
        },
        FuncCall: function(_a, scope, execute) {
            var func = _a.func, args = _a.args;
            return func(args, scope, execute);
        },
        PipeFuncCall: function(_a, scope, execute) {
            var func = _a.func, base = _a.base, args = _a.args;
            return __awaiter(this, void 0, void 0, function() {
                var baseValue;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                execute(base, scope)
                            ];
                        case 1:
                            baseValue = _b.sent();
                            return [
                                2 /*return*/ ,
                                func(baseValue, args, scope, execute)
                            ];
                    }
                });
            });
        },
        AccessAttribute: function(_a, scope, execute) {
            var base = _a.base, name = _a.name;
            return __awaiter(this, void 0, void 0, function() {
                var value;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            value = scope.value;
                            if (!base) return [
                                3 /*break*/ ,
                                2
                            ];
                            return [
                                4 /*yield*/ ,
                                execute(base, scope)
                            ];
                        case 1:
                            value = _b.sent();
                            _b.label = 2;
                        case 2:
                            if (value.type === "object") {
                                if (value.data.hasOwnProperty(name)) {
                                    return [
                                        2 /*return*/ ,
                                        fromJS(value.data[name])
                                    ];
                                }
                            }
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                    }
                });
            });
        },
        AccessElement: function(_a, scope, execute) {
            var base = _a.base, index = _a.index;
            return __awaiter(this, void 0, void 0, function() {
                var baseValue, data, finalIndex;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                execute(base, scope)
                            ];
                        case 1:
                            baseValue = _b.sent();
                            if (!baseValue.isArray()) {
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                            }
                            return [
                                4 /*yield*/ ,
                                baseValue.get()
                            ];
                        case 2:
                            data = _b.sent();
                            finalIndex = index < 0 ? index + data.length : index;
                            return [
                                2 /*return*/ ,
                                fromJS(data[finalIndex])
                            ];
                    }
                });
            });
        },
        Slice: function(_a, scope, execute) {
            var base = _a.base, left = _a.left, right = _a.right, isInclusive = _a.isInclusive;
            return __awaiter(this, void 0, void 0, function() {
                var baseValue, array, leftIdx, rightIdx;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                execute(base, scope)
                            ];
                        case 1:
                            baseValue = _b.sent();
                            if (!baseValue.isArray()) {
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                            }
                            return [
                                4 /*yield*/ ,
                                baseValue.get()
                            ];
                        case 2:
                            array = _b.sent();
                            leftIdx = left;
                            rightIdx = right;
                            // Handle negative index
                            if (leftIdx < 0) {
                                leftIdx = array.length + leftIdx;
                            }
                            if (rightIdx < 0) {
                                rightIdx = array.length + rightIdx;
                            }
                            // Convert from inclusive to exclusive index
                            if (isInclusive) {
                                rightIdx++;
                            }
                            if (leftIdx < 0) {
                                leftIdx = 0;
                            }
                            if (rightIdx < 0) {
                                rightIdx = 0;
                            }
                            // Note: At this point the indices might point out-of-bound, but
                            // .slice handles this correctly.
                            return [
                                2 /*return*/ ,
                                fromJS(array.slice(leftIdx, rightIdx))
                            ];
                    }
                });
            });
        },
        Deref: function(_a, scope, execute) {
            var e_2, _b;
            var base = _a.base;
            return __awaiter(this, void 0, void 0, function() {
                var value, id, _c, _d, doc, e_2_1;
                return __generator(this, function(_e) {
                    switch(_e.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                execute(base, scope)
                            ];
                        case 1:
                            value = _e.sent();
                            if (!scope.source.isArray()) {
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                            }
                            if (value.type !== "object") {
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                            }
                            id = value.data._ref;
                            if (typeof id !== "string") {
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                            }
                            _e.label = 2;
                        case 2:
                            _e.trys.push([
                                2,
                                7,
                                8,
                                13
                            ]);
                            _c = __asyncValues(scope.source);
                            _e.label = 3;
                        case 3:
                            return [
                                4 /*yield*/ ,
                                _c.next()
                            ];
                        case 4:
                            if (!(_d = _e.sent(), !_d.done)) return [
                                3 /*break*/ ,
                                6
                            ];
                            doc = _d.value;
                            if (doc.type === "object" && id === doc.data._id) {
                                return [
                                    2 /*return*/ ,
                                    doc
                                ];
                            }
                            _e.label = 5;
                        case 5:
                            return [
                                3 /*break*/ ,
                                3
                            ];
                        case 6:
                            return [
                                3 /*break*/ ,
                                13
                            ];
                        case 7:
                            e_2_1 = _e.sent();
                            e_2 = {
                                error: e_2_1
                            };
                            return [
                                3 /*break*/ ,
                                13
                            ];
                        case 8:
                            _e.trys.push([
                                8,
                                ,
                                11,
                                12
                            ]);
                            if (!(_d && !_d.done && (_b = _c["return"]))) return [
                                3 /*break*/ ,
                                10
                            ];
                            return [
                                4 /*yield*/ ,
                                _b.call(_c)
                            ];
                        case 9:
                            _e.sent();
                            _e.label = 10;
                        case 10:
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case 11:
                            if (e_2) throw e_2.error;
                            return [
                                7 /*endfinally*/ 
                            ];
                        case 12:
                            return [
                                7 /*endfinally*/ 
                            ];
                        case 13:
                            return [
                                2 /*return*/ ,
                                NULL_VALUE
                            ];
                    }
                });
            });
        },
        Value: function(_a) {
            var value = _a.value;
            return fromJS(value);
        },
        Group: function(_a, scope, execute) {
            var base = _a.base;
            return execute(base, scope);
        },
        Object: function(_a, scope, execute) {
            var attributes = _a.attributes;
            return __awaiter(this, void 0, void 0, function() {
                var result, _i, attributes_1, attr, attrType, _b, value, _c, _d, cond, value, value;
                return __generator(this, function(_e) {
                    switch(_e.label){
                        case 0:
                            result = {};
                            _i = 0, attributes_1 = attributes;
                            _e.label = 1;
                        case 1:
                            if (!(_i < attributes_1.length)) return [
                                3 /*break*/ ,
                                12
                            ];
                            attr = attributes_1[_i];
                            attrType = attr.type;
                            _b = attr.type;
                            switch(_b){
                                case "ObjectAttributeValue":
                                    return [
                                        3 /*break*/ ,
                                        2
                                    ];
                                case "ObjectConditionalSplat":
                                    return [
                                        3 /*break*/ ,
                                        5
                                    ];
                                case "ObjectSplat":
                                    return [
                                        3 /*break*/ ,
                                        8
                                    ];
                            }
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case 2:
                            return [
                                4 /*yield*/ ,
                                execute(attr.value, scope)
                            ];
                        case 3:
                            value = _e.sent();
                            _c = result;
                            _d = attr.name;
                            return [
                                4 /*yield*/ ,
                                value.get()
                            ];
                        case 4:
                            _c[_d] = _e.sent();
                            return [
                                3 /*break*/ ,
                                11
                            ];
                        case 5:
                            return [
                                4 /*yield*/ ,
                                execute(attr.condition, scope)
                            ];
                        case 6:
                            cond = _e.sent();
                            if (cond.type !== "boolean" || cond.data === false) {
                                return [
                                    3 /*break*/ ,
                                    11
                                ];
                            }
                            return [
                                4 /*yield*/ ,
                                execute(attr.value, scope)
                            ];
                        case 7:
                            value = _e.sent();
                            if (value.type === "object") {
                                Object.assign(result, value.data);
                            }
                            return [
                                3 /*break*/ ,
                                11
                            ];
                        case 8:
                            return [
                                4 /*yield*/ ,
                                execute(attr.value, scope)
                            ];
                        case 9:
                            value = _e.sent();
                            if (value.type === "object") {
                                Object.assign(result, value.data);
                            }
                            return [
                                3 /*break*/ ,
                                11
                            ];
                        case 10:
                            throw new Error("Unknown node type: ".concat(attrType));
                        case 11:
                            _i++;
                            return [
                                3 /*break*/ ,
                                1
                            ];
                        case 12:
                            return [
                                2 /*return*/ ,
                                fromJS(result)
                            ];
                    }
                });
            });
        },
        Array: function(_a, scope, execute) {
            var elements = _a.elements;
            return new StreamValue(function() {
                return __asyncGenerator(this, arguments, function() {
                    var _i, elements_1, element, value, value_1, value_1_1, v, e_3_1;
                    var e_3, _a;
                    return __generator(this, function(_b) {
                        switch(_b.label){
                            case 0:
                                _i = 0, elements_1 = elements;
                                _b.label = 1;
                            case 1:
                                if (!(_i < elements_1.length)) return [
                                    3 /*break*/ ,
                                    21
                                ];
                                element = elements_1[_i];
                                return [
                                    4 /*yield*/ ,
                                    __await(execute(element.value, scope))
                                ];
                            case 2:
                                value = _b.sent();
                                if (!element.isSplat) return [
                                    3 /*break*/ ,
                                    17
                                ];
                                if (!value.isArray()) return [
                                    3 /*break*/ ,
                                    16
                                ];
                                _b.label = 3;
                            case 3:
                                _b.trys.push([
                                    3,
                                    10,
                                    11,
                                    16
                                ]);
                                value_1 = (e_3 = void 0, __asyncValues(value));
                                _b.label = 4;
                            case 4:
                                return [
                                    4 /*yield*/ ,
                                    __await(value_1.next())
                                ];
                            case 5:
                                if (!(value_1_1 = _b.sent(), !value_1_1.done)) return [
                                    3 /*break*/ ,
                                    9
                                ];
                                v = value_1_1.value;
                                return [
                                    4 /*yield*/ ,
                                    __await(v)
                                ];
                            case 6:
                                return [
                                    4 /*yield*/ ,
                                    _b.sent()
                                ];
                            case 7:
                                _b.sent();
                                _b.label = 8;
                            case 8:
                                return [
                                    3 /*break*/ ,
                                    4
                                ];
                            case 9:
                                return [
                                    3 /*break*/ ,
                                    16
                                ];
                            case 10:
                                e_3_1 = _b.sent();
                                e_3 = {
                                    error: e_3_1
                                };
                                return [
                                    3 /*break*/ ,
                                    16
                                ];
                            case 11:
                                _b.trys.push([
                                    11,
                                    ,
                                    14,
                                    15
                                ]);
                                if (!(value_1_1 && !value_1_1.done && (_a = value_1["return"]))) return [
                                    3 /*break*/ ,
                                    13
                                ];
                                return [
                                    4 /*yield*/ ,
                                    __await(_a.call(value_1))
                                ];
                            case 12:
                                _b.sent();
                                _b.label = 13;
                            case 13:
                                return [
                                    3 /*break*/ ,
                                    15
                                ];
                            case 14:
                                if (e_3) throw e_3.error;
                                return [
                                    7 /*endfinally*/ 
                                ];
                            case 15:
                                return [
                                    7 /*endfinally*/ 
                                ];
                            case 16:
                                return [
                                    3 /*break*/ ,
                                    20
                                ];
                            case 17:
                                return [
                                    4 /*yield*/ ,
                                    __await(value)
                                ];
                            case 18:
                                return [
                                    4 /*yield*/ ,
                                    _b.sent()
                                ];
                            case 19:
                                _b.sent();
                                _b.label = 20;
                            case 20:
                                _i++;
                                return [
                                    3 /*break*/ ,
                                    1
                                ];
                            case 21:
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                });
            });
        },
        Tuple: function() {
            throw new Error("tuples can not be evaluated");
        },
        Or: function(_a, scope, execute) {
            var left = _a.left, right = _a.right;
            return __awaiter(this, void 0, void 0, function() {
                var leftValue, rightValue;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                execute(left, scope)
                            ];
                        case 1:
                            leftValue = _b.sent();
                            return [
                                4 /*yield*/ ,
                                execute(right, scope)
                            ];
                        case 2:
                            rightValue = _b.sent();
                            if (leftValue.type === "boolean") {
                                if (leftValue.data === true) {
                                    return [
                                        2 /*return*/ ,
                                        TRUE_VALUE
                                    ];
                                }
                            }
                            if (rightValue.type === "boolean") {
                                if (rightValue.data === true) {
                                    return [
                                        2 /*return*/ ,
                                        TRUE_VALUE
                                    ];
                                }
                            }
                            if (leftValue.type !== "boolean" || rightValue.type !== "boolean") {
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                            }
                            return [
                                2 /*return*/ ,
                                FALSE_VALUE
                            ];
                    }
                });
            });
        },
        And: function(_a, scope, execute) {
            var left = _a.left, right = _a.right;
            return __awaiter(this, void 0, void 0, function() {
                var leftValue, rightValue;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                execute(left, scope)
                            ];
                        case 1:
                            leftValue = _b.sent();
                            return [
                                4 /*yield*/ ,
                                execute(right, scope)
                            ];
                        case 2:
                            rightValue = _b.sent();
                            if (leftValue.type === "boolean") {
                                if (leftValue.data === false) {
                                    return [
                                        2 /*return*/ ,
                                        FALSE_VALUE
                                    ];
                                }
                            }
                            if (rightValue.type === "boolean") {
                                if (rightValue.data === false) {
                                    return [
                                        2 /*return*/ ,
                                        FALSE_VALUE
                                    ];
                                }
                            }
                            if (leftValue.type !== "boolean" || rightValue.type !== "boolean") {
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                            }
                            return [
                                2 /*return*/ ,
                                TRUE_VALUE
                            ];
                    }
                });
            });
        },
        Not: function(_a, scope, execute) {
            var base = _a.base;
            return __awaiter(this, void 0, void 0, function() {
                var value;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                execute(base, scope)
                            ];
                        case 1:
                            value = _b.sent();
                            if (value.type !== "boolean") {
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                            }
                            return [
                                2 /*return*/ ,
                                value.data ? FALSE_VALUE : TRUE_VALUE
                            ];
                    }
                });
            });
        },
        Neg: function(_a, scope, execute) {
            var base = _a.base;
            return promiselessApply(execute(base, scope), function(value) {
                if (value.type !== "number") {
                    return NULL_VALUE;
                }
                return fromNumber(-value.data);
            });
        },
        Pos: function(_a, scope, execute) {
            var base = _a.base;
            return promiselessApply(execute(base, scope), function(value) {
                if (value.type !== "number") {
                    return NULL_VALUE;
                }
                return fromNumber(value.data);
            });
        },
        Asc: function() {
            return NULL_VALUE;
        },
        Desc: function() {
            return NULL_VALUE;
        },
        ArrayCoerce: function(_a, scope, execute) {
            var base = _a.base;
            return __awaiter(this, void 0, void 0, function() {
                var value;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                execute(base, scope)
                            ];
                        case 1:
                            value = _b.sent();
                            return [
                                2 /*return*/ ,
                                value.isArray() ? value : NULL_VALUE
                            ];
                    }
                });
            });
        },
        Map: function(_a, scope, execute) {
            var base = _a.base, expr = _a.expr;
            return __awaiter(this, void 0, void 0, function() {
                var value;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                execute(base, scope)
                            ];
                        case 1:
                            value = _b.sent();
                            if (!value.isArray()) {
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                            }
                            return [
                                2 /*return*/ ,
                                new StreamValue(function() {
                                    return __asyncGenerator(this, arguments, function() {
                                        var value_2, value_2_1, elem, newScope, e_4_1;
                                        var e_4, _a;
                                        return __generator(this, function(_b) {
                                            switch(_b.label){
                                                case 0:
                                                    _b.trys.push([
                                                        0,
                                                        8,
                                                        9,
                                                        14
                                                    ]);
                                                    value_2 = __asyncValues(value);
                                                    _b.label = 1;
                                                case 1:
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await(value_2.next())
                                                    ];
                                                case 2:
                                                    if (!(value_2_1 = _b.sent(), !value_2_1.done)) return [
                                                        3 /*break*/ ,
                                                        7
                                                    ];
                                                    elem = value_2_1.value;
                                                    newScope = scope.createHidden(elem);
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await(execute(expr, newScope))
                                                    ];
                                                case 3:
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await.apply(void 0, [
                                                            _b.sent()
                                                        ])
                                                    ];
                                                case 4:
                                                    return [
                                                        4 /*yield*/ ,
                                                        _b.sent()
                                                    ];
                                                case 5:
                                                    _b.sent();
                                                    _b.label = 6;
                                                case 6:
                                                    return [
                                                        3 /*break*/ ,
                                                        1
                                                    ];
                                                case 7:
                                                    return [
                                                        3 /*break*/ ,
                                                        14
                                                    ];
                                                case 8:
                                                    e_4_1 = _b.sent();
                                                    e_4 = {
                                                        error: e_4_1
                                                    };
                                                    return [
                                                        3 /*break*/ ,
                                                        14
                                                    ];
                                                case 9:
                                                    _b.trys.push([
                                                        9,
                                                        ,
                                                        12,
                                                        13
                                                    ]);
                                                    if (!(value_2_1 && !value_2_1.done && (_a = value_2["return"]))) return [
                                                        3 /*break*/ ,
                                                        11
                                                    ];
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await(_a.call(value_2))
                                                    ];
                                                case 10:
                                                    _b.sent();
                                                    _b.label = 11;
                                                case 11:
                                                    return [
                                                        3 /*break*/ ,
                                                        13
                                                    ];
                                                case 12:
                                                    if (e_4) throw e_4.error;
                                                    return [
                                                        7 /*endfinally*/ 
                                                    ];
                                                case 13:
                                                    return [
                                                        7 /*endfinally*/ 
                                                    ];
                                                case 14:
                                                    return [
                                                        2 /*return*/ 
                                                    ];
                                            }
                                        });
                                    });
                                })
                            ];
                    }
                });
            });
        },
        FlatMap: function(_a, scope, execute) {
            var base = _a.base, expr = _a.expr;
            return __awaiter(this, void 0, void 0, function() {
                var value;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                execute(base, scope)
                            ];
                        case 1:
                            value = _b.sent();
                            if (!value.isArray()) {
                                return [
                                    2 /*return*/ ,
                                    NULL_VALUE
                                ];
                            }
                            return [
                                2 /*return*/ ,
                                new StreamValue(function() {
                                    return __asyncGenerator(this, arguments, function() {
                                        var value_3, value_3_1, elem, newScope, innerValue, innerValue_1, innerValue_1_1, inner, e_5_1, e_6_1;
                                        var e_6, _a, e_5, _b;
                                        return __generator(this, function(_c) {
                                            switch(_c.label){
                                                case 0:
                                                    _c.trys.push([
                                                        0,
                                                        23,
                                                        24,
                                                        29
                                                    ]);
                                                    value_3 = __asyncValues(value);
                                                    _c.label = 1;
                                                case 1:
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await(value_3.next())
                                                    ];
                                                case 2:
                                                    if (!(value_3_1 = _c.sent(), !value_3_1.done)) return [
                                                        3 /*break*/ ,
                                                        22
                                                    ];
                                                    elem = value_3_1.value;
                                                    newScope = scope.createHidden(elem);
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await(execute(expr, newScope))
                                                    ];
                                                case 3:
                                                    innerValue = _c.sent();
                                                    if (!innerValue.isArray()) return [
                                                        3 /*break*/ ,
                                                        18
                                                    ];
                                                    _c.label = 4;
                                                case 4:
                                                    _c.trys.push([
                                                        4,
                                                        11,
                                                        12,
                                                        17
                                                    ]);
                                                    innerValue_1 = (e_5 = void 0, __asyncValues(innerValue));
                                                    _c.label = 5;
                                                case 5:
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await(innerValue_1.next())
                                                    ];
                                                case 6:
                                                    if (!(innerValue_1_1 = _c.sent(), !innerValue_1_1.done)) return [
                                                        3 /*break*/ ,
                                                        10
                                                    ];
                                                    inner = innerValue_1_1.value;
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await(inner)
                                                    ];
                                                case 7:
                                                    return [
                                                        4 /*yield*/ ,
                                                        _c.sent()
                                                    ];
                                                case 8:
                                                    _c.sent();
                                                    _c.label = 9;
                                                case 9:
                                                    return [
                                                        3 /*break*/ ,
                                                        5
                                                    ];
                                                case 10:
                                                    return [
                                                        3 /*break*/ ,
                                                        17
                                                    ];
                                                case 11:
                                                    e_5_1 = _c.sent();
                                                    e_5 = {
                                                        error: e_5_1
                                                    };
                                                    return [
                                                        3 /*break*/ ,
                                                        17
                                                    ];
                                                case 12:
                                                    _c.trys.push([
                                                        12,
                                                        ,
                                                        15,
                                                        16
                                                    ]);
                                                    if (!(innerValue_1_1 && !innerValue_1_1.done && (_b = innerValue_1["return"]))) return [
                                                        3 /*break*/ ,
                                                        14
                                                    ];
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await(_b.call(innerValue_1))
                                                    ];
                                                case 13:
                                                    _c.sent();
                                                    _c.label = 14;
                                                case 14:
                                                    return [
                                                        3 /*break*/ ,
                                                        16
                                                    ];
                                                case 15:
                                                    if (e_5) throw e_5.error;
                                                    return [
                                                        7 /*endfinally*/ 
                                                    ];
                                                case 16:
                                                    return [
                                                        7 /*endfinally*/ 
                                                    ];
                                                case 17:
                                                    return [
                                                        3 /*break*/ ,
                                                        21
                                                    ];
                                                case 18:
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await(innerValue)
                                                    ];
                                                case 19:
                                                    return [
                                                        4 /*yield*/ ,
                                                        _c.sent()
                                                    ];
                                                case 20:
                                                    _c.sent();
                                                    _c.label = 21;
                                                case 21:
                                                    return [
                                                        3 /*break*/ ,
                                                        1
                                                    ];
                                                case 22:
                                                    return [
                                                        3 /*break*/ ,
                                                        29
                                                    ];
                                                case 23:
                                                    e_6_1 = _c.sent();
                                                    e_6 = {
                                                        error: e_6_1
                                                    };
                                                    return [
                                                        3 /*break*/ ,
                                                        29
                                                    ];
                                                case 24:
                                                    _c.trys.push([
                                                        24,
                                                        ,
                                                        27,
                                                        28
                                                    ]);
                                                    if (!(value_3_1 && !value_3_1.done && (_a = value_3["return"]))) return [
                                                        3 /*break*/ ,
                                                        26
                                                    ];
                                                    return [
                                                        4 /*yield*/ ,
                                                        __await(_a.call(value_3))
                                                    ];
                                                case 25:
                                                    _c.sent();
                                                    _c.label = 26;
                                                case 26:
                                                    return [
                                                        3 /*break*/ ,
                                                        28
                                                    ];
                                                case 27:
                                                    if (e_6) throw e_6.error;
                                                    return [
                                                        7 /*endfinally*/ 
                                                    ];
                                                case 28:
                                                    return [
                                                        7 /*endfinally*/ 
                                                    ];
                                                case 29:
                                                    return [
                                                        2 /*return*/ 
                                                    ];
                                            }
                                        });
                                    });
                                })
                            ];
                    }
                });
            });
        }
    };
    /**
 * Evaluates a query.
 */ function evaluateQuery(tree, options) {
        if (options === void 0) {
            options = {};
        }
        var root = fromJS(options.root);
        var dataset = fromJS(options.dataset);
        var params = __assign({}, options.params);
        var scope = new Scope(params, dataset, root, {
            timestamp: options.timestamp || new Date(),
            identity: options.identity === undefined ? "me" : options.identity,
            sanity: options.sanity,
            after: options.after ? fromJS(options.after) : null,
            before: options.before ? fromJS(options.before) : null
        }, null);
        return evaluate(tree, scope);
    }
    function canConstantEvaluate(node) {
        switch(node.type){
            case "Group":
            case "Value":
            case "Parameter":
                return true;
            case "Pos":
            case "Neg":
                return canConstantEvaluate(node.base);
            case "OpCall":
                switch(node.op){
                    case "+":
                    case "-":
                    case "*":
                    case "/":
                    case "%":
                    case "**":
                        return canConstantEvaluate(node.left) && canConstantEvaluate(node.right);
                    default:
                        return false;
                }
            default:
                return false;
        }
    }
    var DUMMY_SCOPE = new Scope({}, NULL_VALUE, NULL_VALUE, {
        timestamp: new Date(0),
        identity: "me",
        before: null,
        after: null
    }, null);
    function tryConstantEvaluate(node) {
        if (!canConstantEvaluate(node)) {
            return null;
        }
        return constantEvaluate(node);
    }
    function constantEvaluate(node) {
        var value = evaluate(node, DUMMY_SCOPE, constantEvaluate);
        if ("then" in value) {
            throw new Error("BUG: constant evaluate should never return a promise");
        }
        return value;
    }
    var ESCAPE_SEQUENCE = {
        "'": "'",
        '"': '"',
        "\\": "\\",
        "/": "/",
        b: "\b",
        f: "\f",
        n: "\n",
        r: "\r",
        t: "	"
    };
    function expandHex(str) {
        var charCode = parseInt(str, 16);
        return String.fromCharCode(charCode);
    }
    var GroqQueryError = /** @class */ function(_super) {
        __extends(GroqQueryError, _super);
        function GroqQueryError() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.name = "GroqQueryError";
            return _this;
        }
        return GroqQueryError;
    }(Error);
    var EXPR_BUILDER = {
        group: function(p) {
            var inner = p.process(EXPR_BUILDER);
            return {
                type: "Group",
                base: inner
            };
        },
        everything: function() {
            return {
                type: "Everything"
            };
        },
        "this": function() {
            return {
                type: "This"
            };
        },
        parent: function() {
            return {
                type: "Parent",
                n: 1
            };
        },
        dblparent: function(p) {
            var next = p.process(EXPR_BUILDER);
            return {
                type: "Parent",
                n: next.n + 1
            };
        },
        traverse: function(p) {
            var base = p.process(EXPR_BUILDER);
            var traversalList = [];
            while(p.getMark().name !== "traversal_end"){
                traversalList.push(p.process(TRAVERSE_BUILDER));
            }
            p.shift();
            var traversal = null;
            for(var i = traversalList.length - 1; i >= 0; i--){
                traversal = traversalList[i](traversal);
            }
            if (base.type === "Everything" || base.type === "Array" || base.type === "PipeFuncCall") {
                traversal = traverseArray(function(val) {
                    return val;
                }, traversal);
            }
            if (traversal === null) throw new Error("BUG: unexpected empty traversal");
            return traversal.build(base);
        },
        this_attr: function(p) {
            var name = p.processString();
            if (name === "null") {
                return {
                    type: "Value",
                    value: null
                };
            }
            if (name === "true") {
                return {
                    type: "Value",
                    value: true
                };
            }
            if (name === "false") {
                return {
                    type: "Value",
                    value: false
                };
            }
            return {
                type: "AccessAttribute",
                name: name
            };
        },
        neg: function(p) {
            var base = p.process(EXPR_BUILDER);
            return {
                type: "Neg",
                base: base
            };
        },
        pos: function(p) {
            var base = p.process(EXPR_BUILDER);
            return {
                type: "Pos",
                base: base
            };
        },
        add: function(p) {
            var left = p.process(EXPR_BUILDER);
            var right = p.process(EXPR_BUILDER);
            return {
                type: "OpCall",
                op: "+",
                left: left,
                right: right
            };
        },
        sub: function(p) {
            var left = p.process(EXPR_BUILDER);
            var right = p.process(EXPR_BUILDER);
            return {
                type: "OpCall",
                op: "-",
                left: left,
                right: right
            };
        },
        mul: function(p) {
            var left = p.process(EXPR_BUILDER);
            var right = p.process(EXPR_BUILDER);
            return {
                type: "OpCall",
                op: "*",
                left: left,
                right: right
            };
        },
        div: function(p) {
            var left = p.process(EXPR_BUILDER);
            var right = p.process(EXPR_BUILDER);
            return {
                type: "OpCall",
                op: "/",
                left: left,
                right: right
            };
        },
        mod: function(p) {
            var left = p.process(EXPR_BUILDER);
            var right = p.process(EXPR_BUILDER);
            return {
                type: "OpCall",
                op: "%",
                left: left,
                right: right
            };
        },
        pow: function(p) {
            var left = p.process(EXPR_BUILDER);
            var right = p.process(EXPR_BUILDER);
            return {
                type: "OpCall",
                op: "**",
                left: left,
                right: right
            };
        },
        comp: function(p) {
            var left = p.process(EXPR_BUILDER);
            var op = p.processString();
            var right = p.process(EXPR_BUILDER);
            return {
                type: "OpCall",
                op: op,
                left: left,
                right: right
            };
        },
        in_range: function(p) {
            var base = p.process(EXPR_BUILDER);
            var isInclusive = p.getMark().name === "inc_range";
            p.shift();
            var left = p.process(EXPR_BUILDER);
            var right = p.process(EXPR_BUILDER);
            return {
                type: "InRange",
                base: base,
                left: left,
                right: right,
                isInclusive: isInclusive
            };
        },
        str: function(p) {
            var value = "";
            // eslint-disable-next-line no-labels
            loop: while(p.hasMark()){
                var mark = p.getMark();
                switch(mark.name){
                    case "str_end":
                        value += p.processStringEnd();
                        break loop;
                    case "str_pause":
                        value += p.processStringEnd();
                        break;
                    case "str_start":
                        p.shift();
                        break;
                    case "single_escape":
                        {
                            var char = p.slice(1);
                            p.shift();
                            value += ESCAPE_SEQUENCE[char];
                            break;
                        }
                    case "unicode_hex":
                        p.shift();
                        value += expandHex(p.processStringEnd());
                        break;
                    default:
                        throw new Error("unexpected mark: ".concat(mark.name));
                }
            }
            return {
                type: "Value",
                value: value
            };
        },
        integer: function(p) {
            var strValue = p.processStringEnd();
            return {
                type: "Value",
                value: Number(strValue)
            };
        },
        float: function(p) {
            var strValue = p.processStringEnd();
            return {
                type: "Value",
                value: Number(strValue)
            };
        },
        sci: function(p) {
            var strValue = p.processStringEnd();
            return {
                type: "Value",
                value: Number(strValue)
            };
        },
        object: function(p) {
            var attributes = [];
            while(p.getMark().name !== "object_end"){
                attributes.push(p.process(OBJECT_BUILDER));
            }
            p.shift();
            return {
                type: "Object",
                attributes: attributes
            };
        },
        array: function(p) {
            var elements = [];
            while(p.getMark().name !== "array_end"){
                var isSplat = false;
                if (p.getMark().name === "array_splat") {
                    isSplat = true;
                    p.shift();
                }
                var value = p.process(EXPR_BUILDER);
                elements.push({
                    type: "ArrayElement",
                    value: value,
                    isSplat: isSplat
                });
            }
            p.shift();
            return {
                type: "Array",
                elements: elements
            };
        },
        tuple: function(p) {
            var members = [];
            while(p.getMark().name !== "tuple_end"){
                members.push(p.process(EXPR_BUILDER));
            }
            p.shift();
            return {
                type: "Tuple",
                members: members
            };
        },
        func_call: function(p) {
            var namespace = "global";
            if (p.getMark().name === "namespace") {
                p.shift();
                namespace = p.processString();
            }
            var name = p.processString();
            if (namespace === "global" && name === "select") {
                var result = {
                    type: "Select",
                    alternatives: []
                };
                while(p.getMark().name !== "func_args_end"){
                    if (p.getMark().name === "pair") {
                        if (result.fallback) throw new GroqQueryError("unexpected argument to select()");
                        p.shift();
                        var condition = p.process(EXPR_BUILDER);
                        var value = p.process(EXPR_BUILDER);
                        result.alternatives.push({
                            type: "SelectAlternative",
                            condition: condition,
                            value: value
                        });
                    } else {
                        if (result.fallback) throw new GroqQueryError("unexpected argument to select()");
                        var value = p.process(EXPR_BUILDER);
                        result.fallback = value;
                    }
                }
                p.shift();
                return result;
            }
            var args = [];
            while(p.getMark().name !== "func_args_end"){
                if (argumentShouldBeSelector(namespace, name, args.length)) {
                    // Since the diff/delta functions aren't validated yet we only want to validate the selector
                    // being used. We expect the null valued arg to throw an error at evaluation time.
                    p.process(SELECTOR_BUILDER);
                    args.push({
                        type: "Selector"
                    });
                } else {
                    args.push(p.process(EXPR_BUILDER));
                }
            }
            p.shift();
            if (namespace === "global" && (name === "before" || name === "after")) {
                if (p.parseOptions.mode === "delta") {
                    return {
                        type: "Context",
                        key: name
                    };
                }
            }
            if (namespace === "global" && name === "boost" && !p.allowBoost) throw new GroqQueryError("unexpected boost");
            var funcs = namespaces[namespace];
            if (!funcs) {
                throw new GroqQueryError("Undefined namespace: ".concat(namespace));
            }
            var func = funcs[name];
            if (!func) {
                throw new GroqQueryError("Undefined function: ".concat(name));
            }
            if (func.arity !== undefined) {
                validateArity(name, func.arity, args.length);
            }
            if (func.mode !== undefined && func.mode !== p.parseOptions.mode) {
                throw new GroqQueryError("Undefined function: ".concat(name));
            }
            return {
                type: "FuncCall",
                func: func,
                name: name,
                args: args
            };
        },
        pipecall: function(p) {
            var base = p.process(EXPR_BUILDER);
            p.shift(); // Remove the func_call
            var namespace = "global";
            if (p.getMark().name === "namespace") {
                p.shift();
                namespace = p.processString();
            }
            if (namespace !== "global") {
                throw new GroqQueryError("Undefined namespace: ".concat(namespace));
            }
            var name = p.processString();
            var args = [];
            var oldAllowBoost = p.allowBoost;
            if (name === "score") {
                // Only allow boost inside a score expression
                p.allowBoost = true;
            }
            for(;;){
                var markName = p.getMark().name;
                if (markName === "func_args_end") {
                    break;
                }
                if (name === "order") {
                    if (markName === "asc") {
                        p.shift();
                        args.push({
                            type: "Asc",
                            base: p.process(EXPR_BUILDER)
                        });
                        continue;
                    } else if (markName === "desc") {
                        p.shift();
                        args.push({
                            type: "Desc",
                            base: p.process(EXPR_BUILDER)
                        });
                        continue;
                    }
                }
                args.push(p.process(EXPR_BUILDER));
            }
            p.shift();
            p.allowBoost = oldAllowBoost;
            var func = pipeFunctions[name];
            if (!func) {
                throw new GroqQueryError("Undefined pipe function: ".concat(name));
            }
            if (func.arity) {
                validateArity(name, func.arity, args.length);
            }
            return {
                type: "PipeFuncCall",
                func: func,
                base: base,
                name: name,
                args: args
            };
        },
        pair: function(p) {
            throw new GroqQueryError("unexpected =>");
        },
        and: function(p) {
            var left = p.process(EXPR_BUILDER);
            var right = p.process(EXPR_BUILDER);
            return {
                type: "And",
                left: left,
                right: right
            };
        },
        or: function(p) {
            var left = p.process(EXPR_BUILDER);
            var right = p.process(EXPR_BUILDER);
            return {
                type: "Or",
                left: left,
                right: right
            };
        },
        not: function(p) {
            var base = p.process(EXPR_BUILDER);
            return {
                type: "Not",
                base: base
            };
        },
        asc: function(p) {
            throw new GroqQueryError("unexpected asc");
        },
        desc: function(p) {
            throw new GroqQueryError("unexpected desc");
        },
        param: function(p) {
            var name = p.processString();
            if (p.parseOptions.params && p.parseOptions.params.hasOwnProperty(name)) {
                return {
                    type: "Value",
                    value: p.parseOptions.params[name]
                };
            }
            return {
                type: "Parameter",
                name: name
            };
        }
    };
    var OBJECT_BUILDER = {
        object_expr: function(p) {
            if (p.getMark().name === "pair") {
                p.shift();
                var condition = p.process(EXPR_BUILDER);
                var value_1 = p.process(EXPR_BUILDER);
                return {
                    type: "ObjectConditionalSplat",
                    condition: condition,
                    value: value_1
                };
            }
            var value = p.process(EXPR_BUILDER);
            return {
                type: "ObjectAttributeValue",
                name: extractPropertyKey(value),
                value: value
            };
        },
        object_pair: function(p) {
            var name = p.process(EXPR_BUILDER);
            if (name.type !== "Value") throw new Error("name must be string");
            var value = p.process(EXPR_BUILDER);
            return {
                type: "ObjectAttributeValue",
                name: name.value,
                value: value
            };
        },
        object_splat: function(p) {
            var value = p.process(EXPR_BUILDER);
            return {
                type: "ObjectSplat",
                value: value
            };
        },
        object_splat_this: function() {
            return {
                type: "ObjectSplat",
                value: {
                    type: "This"
                }
            };
        }
    };
    var TRAVERSE_BUILDER = {
        square_bracket: function(p) {
            var expr = p.process(EXPR_BUILDER);
            var value = tryConstantEvaluate(expr);
            if (value && value.type === "number") {
                return function(right) {
                    return traverseElement(function(base) {
                        return {
                            type: "AccessElement",
                            base: base,
                            index: value.data
                        };
                    }, right);
                };
            }
            if (value && value.type === "string") {
                return function(right) {
                    return traversePlain(function(base) {
                        return {
                            type: "AccessAttribute",
                            base: base,
                            name: value.data
                        };
                    }, right);
                };
            }
            return function(right) {
                return traverseArray(function(base) {
                    return {
                        type: "Filter",
                        base: base,
                        expr: expr
                    };
                }, right);
            };
        },
        slice: function(p) {
            var isInclusive = p.getMark().name === "inc_range";
            p.shift();
            var left = p.process(EXPR_BUILDER);
            var right = p.process(EXPR_BUILDER);
            var leftValue = tryConstantEvaluate(left);
            var rightValue = tryConstantEvaluate(right);
            if (!leftValue || !rightValue || leftValue.type !== "number" || rightValue.type !== "number") {
                throw new GroqQueryError("slicing must use constant numbers");
            }
            return function(rhs) {
                return traverseArray(function(base) {
                    return {
                        type: "Slice",
                        base: base,
                        left: leftValue.data,
                        right: rightValue.data,
                        isInclusive: isInclusive
                    };
                }, rhs);
            };
        },
        projection: function(p) {
            var obj = p.process(EXPR_BUILDER);
            return function(right) {
                return traverseProjection(function(base) {
                    return {
                        type: "Projection",
                        base: base,
                        expr: obj
                    };
                }, right);
            };
        },
        attr_access: function(p) {
            var name = p.processString();
            return function(right) {
                return traversePlain(function(base) {
                    return {
                        type: "AccessAttribute",
                        base: base,
                        name: name
                    };
                }, right);
            };
        },
        deref: function(p) {
            var attr = null;
            if (p.getMark().name === "deref_attr") {
                p.shift();
                attr = p.processString();
            }
            var wrap = function(base) {
                return attr ? {
                    type: "AccessAttribute",
                    base: base,
                    name: attr
                } : base;
            };
            return function(right) {
                return traversePlain(function(base) {
                    return wrap({
                        type: "Deref",
                        base: base
                    });
                }, right);
            };
        },
        array_postfix: function(p) {
            return function(right) {
                return traverseArray(function(base) {
                    return {
                        type: "ArrayCoerce",
                        base: base
                    };
                }, right);
            };
        }
    };
    var SELECTOR_BUILDER = {
        group: function(p) {
            p.process(SELECTOR_BUILDER);
            return null;
        },
        everything: function() {
            throw new Error("Invalid selector syntax");
        },
        "this": function() {
            throw new Error("Invalid selector syntax");
        },
        parent: function() {
            throw new Error("Invalid selector syntax");
        },
        dblparent: function(p) {
            throw new Error("Invalid selector syntax");
        },
        traverse: function(p) {
            p.process(SELECTOR_BUILDER);
            while(p.getMark().name !== "traversal_end"){
                p.process(TRAVERSE_BUILDER);
            }
            p.shift();
            return null;
        },
        this_attr: function(p) {
            p.processString();
            return null;
        },
        neg: function(p) {
            throw new Error("Invalid selector syntax");
        },
        pos: function(p) {
            throw new Error("Invalid selector syntax");
        },
        add: function(p) {
            throw new Error("Invalid selector syntax");
        },
        sub: function(p) {
            throw new Error("Invalid selector syntax");
        },
        mul: function(p) {
            throw new Error("Invalid selector syntax");
        },
        div: function(p) {
            throw new Error("Invalid selector syntax");
        },
        mod: function(p) {
            throw new Error("Invalid selector syntax");
        },
        pow: function(p) {
            throw new Error("Invalid selector syntax");
        },
        comp: function(p) {
            throw new Error("Invalid selector syntax");
        },
        in_range: function(p) {
            throw new Error("Invalid selector syntax");
        },
        str: function(p) {
            throw new Error("Invalid selector syntax");
        },
        integer: function(p) {
            throw new Error("Invalid selector syntax");
        },
        float: function(p) {
            throw new Error("Invalid selector syntax");
        },
        sci: function(p) {
            throw new Error("Invalid selector syntax");
        },
        object: function(p) {
            throw new Error("Invalid selector syntax");
        },
        array: function(p) {
            throw new Error("Invalid selector syntax");
        },
        tuple: function(p) {
            // This should only throw an error until we add support for tuples in selectors.
            throw new Error("Invalid selector syntax");
        },
        func_call: function(p, mark) {
            var func = EXPR_BUILDER.func_call(p, mark);
            if (func.name === "anywhere" && func.args.length === 1) return null;
            throw new Error("Invalid selector syntax");
        },
        pipecall: function(p) {
            throw new Error("Invalid selector syntax");
        },
        pair: function(p) {
            throw new Error("Invalid selector syntax");
        },
        and: function(p) {
            throw new Error("Invalid selector syntax");
        },
        or: function(p) {
            throw new Error("Invalid selector syntax");
        },
        not: function(p) {
            throw new Error("Invalid selector syntax");
        },
        asc: function(p) {
            throw new Error("Invalid selector syntax");
        },
        desc: function(p) {
            throw new Error("Invalid selector syntax");
        },
        param: function(p) {
            throw new Error("Invalid selector syntax");
        }
    };
    function extractPropertyKey(node) {
        if (node.type === "AccessAttribute" && !node.base) {
            return node.name;
        }
        if (node.type === "Deref" || node.type === "Map" || node.type === "Projection" || node.type === "Slice" || node.type === "Filter" || node.type === "AccessElement" || node.type === "ArrayCoerce") {
            return extractPropertyKey(node.base);
        }
        throw new GroqQueryError("Cannot determine property key for type: ".concat(node.type));
    }
    function validateArity(name, arity, count) {
        if (typeof arity === "number") {
            if (count !== arity) {
                throw new GroqQueryError("Incorrect number of arguments to function ".concat(name, "(). Expected ").concat(arity, ", got ").concat(count, "."));
            }
        } else if (arity) {
            if (!arity(count)) {
                throw new GroqQueryError("Incorrect number of arguments to function ".concat(name, "()."));
            }
        }
    }
    function argumentShouldBeSelector(namespace, functionName, argCount) {
        var functionsRequiringSelectors = [
            "changedAny",
            "changedOnly"
        ];
        return namespace == "diff" && argCount == 2 && functionsRequiringSelectors.includes(functionName);
    }
    var GroqSyntaxError = /** @class */ function(_super) {
        __extends(GroqSyntaxError, _super);
        function GroqSyntaxError(position) {
            var _this = _super.call(this, "Syntax error in GROQ query at position ".concat(position)) || this;
            _this.name = "GroqSyntaxError";
            _this.position = position;
            return _this;
        }
        return GroqSyntaxError;
    }(Error);
    /**
 * Parses a GROQ query and returns a tree structure.
 */ function parse(input, options) {
        if (options === void 0) {
            options = {};
        }
        var result = parse$1(input);
        if (result.type === "error") {
            throw new GroqSyntaxError(result.position);
        }
        var processor = new MarkProcessor(input, result.marks, options);
        return processor.process(EXPR_BUILDER);
    }
    exports1.evaluate = evaluateQuery;
    exports1.parse = parse;
    Object.defineProperty(exports1, "__esModule", {
        value: true
    });
});


/***/ }),

/***/ 9179:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
/* eslint-disable no-undefined,no-param-reassign,no-shadow */ /**
 * Throttle execution of a function. Especially useful for rate limiting
 * execution of handlers on events like resize and scroll.
 *
 * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)
 *                                            are most useful.
 * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,
 *                                            as-is, to `callback` when the throttled-function is executed.
 * @param {object} [options] -              An object to configure options.
 * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds
 *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed
 *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for
 *                                            `delay` milliseconds, the internal counter is reset).
 * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback
 *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that
 *                                            callback will never executed if both noLeading = true and noTrailing = true.
 * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is
 *                                            false (at end), schedule `callback` to execute after `delay` ms.
 *
 * @returns {Function} A new, throttled, function.
 */ function throttle(delay, callback, options) {
    var _ref = options || {}, _ref$noTrailing = _ref.noTrailing, noTrailing = _ref$noTrailing === void 0 ? false : _ref$noTrailing, _ref$noLeading = _ref.noLeading, noLeading = _ref$noLeading === void 0 ? false : _ref$noLeading, _ref$debounceMode = _ref.debounceMode, debounceMode = _ref$debounceMode === void 0 ? undefined : _ref$debounceMode;
    /*
   * After wrapper has stopped being called, this timeout ensures that
   * `callback` is executed at the proper times in `throttle` and `end`
   * debounce modes.
   */ var timeoutID;
    var cancelled = false; // Keep track of the last time `callback` was executed.
    var lastExec = 0; // Function to clear existing timeout
    function clearExistingTimeout() {
        if (timeoutID) {
            clearTimeout(timeoutID);
        }
    } // Function to cancel next exec
    function cancel(options) {
        var _ref2 = options || {}, _ref2$upcomingOnly = _ref2.upcomingOnly, upcomingOnly = _ref2$upcomingOnly === void 0 ? false : _ref2$upcomingOnly;
        clearExistingTimeout();
        cancelled = !upcomingOnly;
    }
    /*
   * The `wrapper` function encapsulates all of the throttling / debouncing
   * functionality and when executed will limit the rate at which `callback`
   * is executed.
   */ function wrapper() {
        for(var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++){
            arguments_[_key] = arguments[_key];
        }
        var self = this;
        var elapsed = Date.now() - lastExec;
        if (cancelled) {
            return;
        } // Execute `callback` and update the `lastExec` timestamp.
        function exec() {
            lastExec = Date.now();
            callback.apply(self, arguments_);
        }
        /*
     * If `debounceMode` is true (at begin) this is used to clear the flag
     * to allow future `callback` executions.
     */ function clear() {
            timeoutID = undefined;
        }
        if (!noLeading && debounceMode && !timeoutID) {
            /*
       * Since `wrapper` is being called for the first time and
       * `debounceMode` is true (at begin), execute `callback`
       * and noLeading != true.
       */ exec();
        }
        clearExistingTimeout();
        if (debounceMode === undefined && elapsed > delay) {
            if (noLeading) {
                /*
         * In throttle mode with noLeading, if `delay` time has
         * been exceeded, update `lastExec` and schedule `callback`
         * to execute after `delay` ms.
         */ lastExec = Date.now();
                if (!noTrailing) {
                    timeoutID = setTimeout(debounceMode ? clear : exec, delay);
                }
            } else {
                /*
         * In throttle mode without noLeading, if `delay` time has been exceeded, execute
         * `callback`.
         */ exec();
            }
        } else if (noTrailing !== true) {
            /*
       * In trailing throttle mode, since `delay` time has not been
       * exceeded, schedule `callback` to execute `delay` ms after most
       * recent execution.
       *
       * If `debounceMode` is true (at begin), schedule `clear` to execute
       * after `delay` ms.
       *
       * If `debounceMode` is false (at end), schedule `callback` to
       * execute after `delay` ms.
       */ timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);
        }
    }
    wrapper.cancel = cancel; // Return the wrapper function.
    return wrapper;
}
/* eslint-disable no-undefined */ /**
 * Debounce execution of a function. Debouncing, unlike throttling,
 * guarantees that a function is only executed a single time, either at the
 * very beginning of a series of calls, or at the very end.
 *
 * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
 * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
 *                                        to `callback` when the debounced-function is executed.
 * @param {object} [options] -           An object to configure options.
 * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds
 *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.
 *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).
 *
 * @returns {Function} A new, debounced function.
 */ function debounce(delay, callback, options) {
    var _ref = options || {}, _ref$atBegin = _ref.atBegin, atBegin = _ref$atBegin === void 0 ? false : _ref$atBegin;
    return throttle(delay, callback, {
        debounceMode: atBegin !== false
    });
}
exports.debounce = debounce;
exports.throttle = throttle; //# sourceMappingURL=index.js.map


/***/ }),

/***/ 2805:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"@sanity/client","version":"3.4.1","description":"Client for retrieving, creating and patching data from Sanity.io","main":"lib/sanityClient.js","umd":"umd/sanityClient.min.js","unpkg":"umd/sanityClient.min.js","types":"./sanityClient.d.ts","files":["dist","lib","umd","sanityClient.d.ts"],"scripts":{"browserify":"NODE_ENV=production BROWSERIFY_ENV=build DEBUG=\'\' browserify -t envify -g uglifyify lib/sanityClient.js -o umd/sanityClient.js --standalone=SanityClient","compile":"babel -d lib src","build":"npm run compile && npm run browserify && npm run minify && npm run esbuild:browser","esbuild":"esbuild src/sanityClient.js --bundle --sourcemap --external:object-assign --external:rxjs --external:@sanity/eventsource --external:get-it --external:make-error","esbuild:browser":"npm run esbuild -- --format=esm --outfile=dist/sanityClient.browser.mjs --platform=browser","lint":"eslint .","clean":"rimraf dist lib coverage .nyc_output umd/*.js","typecheck":"tsc --lib es2015 --lib dom,es2015  --noEmit sanityClient.d.ts","coverage":"DEBUG=sanity NODE_ENV=test nyc --reporter=html --reporter=lcov --reporter=text npm test","minify":"terser -c -m -- umd/sanityClient.js > umd/sanityClient.min.js","prepublishOnly":"npm run clean && npm run build","test":"NODE_ENV=test tape test/*.test.js","posttest":"npm run lint && npm run typecheck --strict"},"browser":{"./src/http/nodeMiddleware.js":"./src/http/browserMiddleware.js","./lib/http/nodeMiddleware.js":"./lib/http/browserMiddleware.js"},"engines":{"node":">=12"},"dependencies":{"@sanity/eventsource":"^4.0.0","get-it":"^6.1.1","make-error":"^1.3.0","object-assign":"^4.1.1","rxjs":"^6.0.0"},"devDependencies":{"@babel/cli":"^7.18.10","@babel/core":"^7.18.10","@babel/preset-env":"^7.18.10","@types/node":"^16.11.49","browserify":"^17.0.0","envify":"^4.0.0","esbuild":"^0.15.5","eslint":"^8.21.0","eslint-config-prettier":"^8.5.0","eslint-config-sanity":"^6.0.0","nock":"^13.2.9","nyc":"^15.1.0","prettier":"^2.7.1","rimraf":"^3.0.2","sse-channel":"^4.0.0","tape":"^5.5.3","terser":"^5.12.1","typescript":"^4.7.4","uglifyify":"^5.0.0","xtend":"4.0.2"},"repository":{"type":"git","url":"git+https://github.com/sanity-io/client.git"},"keywords":["sanity","cms","headless","realtime","content","client","fetch","api"],"author":"Sanity.io <hello@sanity.io>","license":"MIT","bugs":{"url":"https://github.com/sanity-io/client/issues"},"homepage":"https://www.sanity.io/","nyc":{"include":["src/**/*.js"],"sourceMap":false},"prettier":{"semi":false,"printWidth":100,"bracketSpacing":false,"singleQuote":true}}');

/***/ })

};
;